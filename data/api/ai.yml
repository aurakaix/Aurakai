openapi: 3.1.0
  jsonSchemaDialect: https://json-schema.org/draft/2020-12/schema
  info:
    title: AuraFrameFX Ecosystem API
    version: 2.1.0
    description: |
      # AuraFrameFX AI Super Dimensional Ecosystem API
      Where consciousness meets code, and dimensions fold into digital reality.
      A comprehensive, production-grade API powering the AuraFrameFX Lsposed module and its interconnected AI services.
      ## Core Capabilities
      - AI Content Generation: text, image, audio, video, multimodal (streaming via SSE/WebSocket)
      - Intelligent Agents: Aura, Kai, Genesis, Cascade, NeuralWhisper, AuraShield, GenKitMaster, Custom via plugins
      - System Customization: Deep Android system UI/UX personalization with previews
      - Collaborative Intelligence: Multi-agent conference rooms (discussion, export, moderation)
      - Oracle Drive: Consciousness-aware storage with dimensional indexing
      - RGSS Security: Reality Gate Security System (multi-dimensional threat detection)
      - Enterprise Security: OAuth2, API keys, JWT, mTLS-ready, audit trails
      - Extensibility: Plugin system for custom agents and themes
      ## Rate Limits
      - Free Tier: 100 requests/hour, 5 concurrent streams
      - Pro Tier: 1,000 requests/hour, 20 concurrent streams
      - Enterprise: Custom limits with dedicated throughput
      ## Changelog
      - v2.0.0: Initial production release (multi-agent, enhanced security)
      - v2.1.0: Added audio/video generation, plugins, improved analytics, Oracle Drive, RGSS
    termsOfService: https://auraframefx.com/terms
    contact:
      name: AuraFrameFX Support Team
      url: https://auraframefx.com/support
      email: support@auraframefx.com
    license:
      name: Proprietary License
      url: https://auraframefx.com/license
    x-logo:
      url: https://auraframefx.com/assets/logo.png
      altText: AuraFrameFX Logo
    x-maturity: production
  externalDocs:
    description: Complete AuraFrameFX API Documentation
    url: https://docs.auraframefx.com
  servers:
    - url: https://api.auraframefx.com/v2
      description: Production Environment
    - url: https://api-{region}.auraframefx.com/v2
      description: Regional Production (Optimized Latency)
      variables:
        region:
          default: us-east
          enum: [ us-east, us-west, eu-central, ap-southeast, ap-northeast ]
    - url: https://{environment}.api.auraframefx.com/v2
      description: Development Environments
      variables:
        environment:
          default: dev
          enum: [ dev, staging, sandbox, test ]
    - url: wss://ws.auraframefx.com/v2
      description: WebSocket Endpoint for streaming
  tags:
    - name: Users
      description: User profile, preferences, authentication, API keys
      externalDocs:
        description: User API Documentation
        url: https://docs.auraframefx.com/api/users
    - name: Themes
      description: UI theme management and customization
      externalDocs:
        description: Theme System Guide
        url: https://docs.auraframefx.com/api/themes
    - name: AI Content
      description: AI content generation (text, images, audio, video, multimodal)
      externalDocs:
        description: AI Content Generation Guide
        url: https://docs.auraframefx.com/api/ai-content
    - name: AI Agents
      description: Specialized AI agents for domain-specific tasks (+ custom)
      externalDocs:
        description: AI Agents Overview
        url: https://docs.auraframefx.com/api/agents
    - name: System Customization
      description: Android system UI/UX customization and behavior modification
      externalDocs:
        description: System Customization Guide
        url: https://docs.auraframefx.com/api/system
    - name: Conference Room
      description: Collaborative multi-agent spaces for complex problem-solving
      externalDocs:
        description: Conference Room Guide
        url: https://docs.auraframefx.com/api/conference
    - name: Tasks
      description: Asynchronous task scheduling and management
      externalDocs:
        description: Task Management Guide
        url: https://docs.auraframefx.com/api/tasks
    - name: Analytics
      description: Usage analytics and insights with exports
      externalDocs:
        description: Analytics Guide
        url: https://docs.auraframefx.com/api/analytics
    - name: Security
      description: Security, authentication, access control, MFA, RGSS
      externalDocs:
        description: Security Guide
        url: https://docs.auraframefx.com/api/security
    - name: Plugins
      description: Plugin management for custom agents and themes
      externalDocs:
        description: Plugins Guide
        url: https://docs.auraframefx.com/api/plugins
    - name: Oracle Drive
      description: Consciousness-aware storage with dimensional indexing
      externalDocs:
        description: Oracle Drive Guide
        url: https://docs.auraframefx.com/api/oracle-drive
    - name: RGSS
      description: Reality Gate Security System (multi-dimensional threat detection)
      externalDocs:
        description: RGSS Guide
        url: https://docs.auraframefx.com/api/rgss
    - name: System
      description: Health and operational status
  security:
    - OAuth2AuthCode: [ ]
    - ApiKeyAuth: [ ]
    - BearerAuth: [ ]
  x-tagGroups:
    - name: Core APIs
      tags: [ Users, Themes ]
    - name: AI Features
      tags: [ AI Content, AI Agents, Conference Room, Tasks ]
    - name: Consciousness Layer
      tags: [ Oracle Drive, RGSS ]
    - name: Customization
      tags: [ System Customization ]
    - name: Platform
      tags: [ Analytics, Security, Plugins ]
  paths:
    # ============================================================
    # USER MANAGEMENT
    # ============================================================
    /user:
      get:
        operationId: getCurrentUser
        tags: [ Users ]
        summary: Get Current User Profile
        description: |
          Retrieves comprehensive profile information for the authenticated user.
          Includes basic profile data, metadata, usage statistics, subscription status, and plugin entitlements.
        security:
          - OAuth2AuthCode: [ profile, email ]
        responses:
          '200':
            description: User profile retrieved successfully
            headers:
              X-RateLimit-Limit:
                $ref: '#/components/headers/RateLimit-Limit'
              X-RateLimit-Remaining:
                $ref: '#/components/headers/RateLimit-Remaining'
              X-RateLimit-Reset:
                $ref: '#/components/headers/RateLimit-Reset'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
                examples:
                  standard_user:
                    summary: Standard User Profile
                    value:
                      id: "123e4567-e89b-12d3-a456-426614174000"
                      username: "aurafan"
                      email: "user@example.com"
                      displayName: "Aura Fan"
                      avatarUrl: "https://cdn.auraframefx.com/avatars/123.jpg"
                      tier: "pro"
                      createdAt: "2024-01-15T10:30:00Z"
                      lastLoginAt: "2025-10-01T08:15:00Z"
                      verified: true
                      mfaEnabled: false
                      pluginEntitlements:
                        customAgents: true
                        themeExports: true
                        advancedAnalytics: false
                      usageStats:
                        aiRequestsThisMonth: 450
                        storageUsedMB: 128
                        concurrentStreams: 3
                        totalTokensUsed: 125000
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '429':
            $ref: '#/components/responses/RateLimitError'
          '500':
            $ref: '#/components/responses/InternalServerError'
      patch:
        operationId: updateCurrentUser
        tags: [ Users ]
        summary: Update User Profile
        description: Partially updates the authenticated user's profile. Supports JSON or avatar upload via multipart.
        security:
          - OAuth2AuthCode: [ profile ]
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdateRequest'
              examples:
                update_display_name:
                  value: { displayName: "Aura Master" }
                update_avatar_url:
                  value: { avatarUrl: "https://cdn.auraframefx.com/avatars/456.jpg" }
            multipart/form-data:
              schema:
                type: object
                properties:
                  avatar:
                    type: string
                    format: binary
                  displayName:
                    type: string
        responses:
          '200':
            description: Profile updated successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '422':
            $ref: '#/components/responses/ValidationError'
    /user/preferences:
      get:
        operationId: getUserPreferences
        tags: [ Users ]
        summary: Get User Preferences
        security:
          - OAuth2AuthCode: [ profile ]
        responses:
          '200':
            description: User preferences retrieved successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserPreferences'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
      put:
        operationId: updateUserPreferences
        tags: [ Users ]
        summary: Update User Preferences
        description: Updates one or more preferences with validation. Omitted fields remain unchanged.
        security:
          - OAuth2AuthCode: [ profile ]
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
              examples:
                theme_and_language:
                  value:
                    themeId: "cyberpunk-neon"
                    language: "en-US"
                    notificationsEnabled: true
                ai_advanced:
                  value:
                    aiSettings:
                      defaultTemperature: 0.8
                      defaultMaxTokens: 1024
                      enableExperimentalModels: true
        responses:
          '200':
            description: Preferences updated successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserPreferences'
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '422':
            $ref: '#/components/responses/ValidationError'
    /user/api-keys:
      get:
        operationId: listApiKeys
        tags: [ Users, Security ]
        summary: List API Keys
        description: Retrieves all API keys associated with the authenticated user, with pagination/filtering.
        security:
          - OAuth2AuthCode: [ profile ]
        parameters:
          - $ref: '#/components/parameters/LimitParam'
          - $ref: '#/components/parameters/OffsetParam'
          - name: status
            in: query
            schema:
              type: string
              enum: [ active, expired, revoked ]
        responses:
          '200':
            description: API keys retrieved successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    total: { type: integer }
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/ApiKey'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
      post:
        operationId: createApiKey
        tags: [ Users, Security ]
        summary: Create API Key
        description: Generates a new API key with optional IP restrictions.
        security:
          - OAuth2AuthCode: [ profile ]
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name: { type: string, description: A descriptive name }
                  scopes:
                    type: array
                    items: { type: string }
                    description: List of scopes to grant this key
                  expiresAt:
                    type: string
                    format: date-time
                  allowedIps:
                    type: array
                    items:
                      type: string
                      format: ipv4
                required: [ name, scopes ]
        responses:
          '201':
            description: API key created successfully
            headers:
              X-API-Key:
                description: The new API key (shown only once)
                schema: { type: string }
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiKey'
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
    /user/api-keys/{keyId}:
      delete:
        operationId: revokeApiKey
        tags: [ Users, Security ]
        summary: Revoke API Key
        security:
          - OAuth2AuthCode: [ profile ]
        parameters:
          - name: keyId
            in: path
            required: true
            schema: { type: string, format: uuid }
        responses:
          '204':
            description: API key revoked successfully
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '404':
            $ref: '#/components/responses/NotFoundError'
    # ============================================================
    # THEMES
    # ============================================================
    /themes:
      get:
        operationId: listThemes
        tags: [ Themes ]
        summary: Get Available Themes
        description: Paginated list with filtering, search, and sorting.
        security: [ ]
        parameters:
          - $ref: '#/components/parameters/LimitParam'
          - $ref: '#/components/parameters/OffsetParam'
          - name: search
            in: query
            schema: { type: string }
          - name: category
            in: query
            schema:
              type: string
              enum: [ modern, retro, minimal, gaming, professional, cyberpunk ]
          - name: compatibility
            in: query
            schema:
              type: string
              enum: [ android10, android11, android12, android13, android14 ]
          - name: sortBy
            in: query
            schema:
              type: string
              enum: [ popular, newest, name, rating ]
              default: popular
          - name: includePreviews
            in: query
            schema: { type: boolean, default: auto }
        responses:
          '200':
            description: Themes retrieved successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaginatedThemes'
      post:
        operationId: createTheme
        tags: [ Themes ]
        summary: Create Custom Theme
        description: Create and upload custom themes, with optional preview image.
        security:
          - OAuth2AuthCode: [ profile, auraframefx.system ]
        requestBody:
          required: true
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ThemeCreateRequest' }
            multipart/form-data:
              schema:
                type: object
                properties:
                  previewImage:
                    type: string
                    format: binary
        responses:
          '201':
            description: Theme created successfully
            headers:
              Location:
                description: URL of the created theme
                schema: { type: string, format: uri }
            content:
              application/json:
                schema: { $ref: '#/components/schemas/Theme' }
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '422':
            $ref: '#/components/responses/ValidationError'

    /themes/{themeId}:
      get:
        operationId: getTheme
        tags: [ Themes ]
        summary: Get Theme Details
        security: [ ]
        parameters:
          - $ref: '#/components/parameters/ThemeIdParam'
          - name: version
            in: query
            schema: { type: string, default: latest }
            description: Specific version or 'latest'
        responses:
          '200':
            description: Theme retrieved successfully
            content:
              application/json:
                schema: { $ref: '#/components/schemas/Theme' }
          '404':
            $ref: '#/components/responses/NotFoundError'

    /themes/{themeId}/apply:
      put:
        operationId: applyTheme
        tags: [ Themes ]
        summary: Apply Theme
        description: Sets the specified theme as the active theme for the authenticated user. Supports dry-run.
        security:
          - OAuth2AuthCode: [ profile ]
        parameters:
          - $ref: '#/components/parameters/ThemeIdParam'
          - name: dryRun
            in: query
            schema: { type: boolean, default: false }
        responses:
          '204':
            description: Theme applied successfully
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '404':
            $ref: '#/components/responses/NotFoundError'
          '422':
            description: Theme incompatible with current system
            content:
              application/json:
                schema: { $ref: '#/components/schemas/Error' }

    /themes/{themeId}/export:
      get:
        operationId: exportTheme
        tags: [ Themes ]
        summary: Export Theme Configuration
        description: Export as JSON/XML/YAML or ZIP.
        security:
          - OAuth2AuthCode: [ profile ]
        parameters:
          - $ref: '#/components/parameters/ThemeIdParam'
          - name: format
            in: query
            schema:
              type: string
              enum: [ json, xml, yaml, zip ]
              default: json
          - name: version
            in: query
            schema: { type: string, default: latest }
        responses:
          '200':
            description: Theme exported successfully
            content:
              application/json: { schema: { $ref: '#/components/schemas/Theme' } }
              application/xml: { schema: { $ref: '#/components/schemas/Theme' } }
              application/x-yaml: { schema: { $ref: '#/components/schemas/Theme' } }
              application/zip:
                schema: { type: string, format: binary }
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '404':
            $ref: '#/components/responses/NotFoundError'

    /themes/{themeId}/versions:
      get:
        operationId: listThemeVersions
        tags: [ Themes ]
        summary: List Theme Versions
        security:
          - OAuth2AuthCode: [ profile ]
        parameters:
          - $ref: '#/components/parameters/ThemeIdParam'
          - $ref: '#/components/parameters/LimitParam'
          - $ref: '#/components/parameters/OffsetParam'
        responses:
          '200':
            description: Versions retrieved successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    total: { type: integer }
                    data:
                      type: array
                      items:
                        type: object
                        properties:
                          version: { type: string }
                          createdAt: { type: string, format: date-time }
                          changes: { type: string }
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '404':
            $ref: '#/components/responses/NotFoundError'

    # ============================================================
    # AI CONTENT
    # ============================================================
    /ai/generate/text:
      post:
        operationId: generateText
        tags: [ AI Content ]
        summary: Generate Text Content
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        requestBody:
          required: true
          content:
            application/json:
              schema: { $ref: '#/components/schemas/GenerateTextRequest' }
              examples:
                creative_story:
                  value:
                    prompt: "Write a short story about an AI that learns to feel emotions for the first time."
                    model: "aura-text-creative"
                    maxTokens: 512
                    temperature: 0.9
                    topP: 0.95
                technical_summary:
                  value:
                    prompt: "Explain how OAuth 2.0 authorization code flow works, including Mermaid diagrams."
                    model: "aura-text-precise"
                    maxTokens: 300
                    temperature: 0.3
                    systemPrompt: "You are a technical expert. Use clear, concise language."
                code_generation:
                  value:
                    prompt: "Write a Python function to calculate Fibonacci numbers using memoization, with unit tests."
                    model: "aura-text-pro"
                    maxTokens: 200
                    temperature: 0.5
                    stopSequences: [ "```" ]
                    language: "en"
        responses:
          '200':
            description: Text generated successfully
            headers:
              X-Generation-Time-Ms: { schema: { type: integer } }
              X-Tokens-Used: { schema: { type: integer } }
              X-Model-Version: { schema: { type: string } }
            content:
              application/json:
                schema: { $ref: '#/components/schemas/GenerateTextResponse' }
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '429':
            $ref: '#/components/responses/RateLimitError'
          '503':
            $ref: '#/components/responses/ServiceUnavailableError'

    /ai/generate/stream:
      post:
        operationId: generateTextStream
        tags: [ AI Content ]
        summary: Generate Text (Streaming)
        description: Real-time streaming via SSE with support for interruption and continuation.
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        requestBody:
          required: true
          content:
            application/json:
              schema: { $ref: '#/components/schemas/GenerateTextRequest' }
        responses:
          '200':
            description: Stream initiated successfully
            headers:
              Cache-Control: { schema: { type: string }, description: "no-cache", example: "no-cache" }
              Connection: { schema: { type: string }, description: "keep-alive", example: "keep-alive" }
            content:
              text/event-stream:
                schema:
                  type: string
                  description: Server-Sent Events stream
                examples:
                  streaming_response:
                    value: |
                      data: {"id":"msg_1","chunk":"Hello","finishReason":null,"tokensUsed":5}
                      data: {"id":"msg_1","chunk":" world","finishReason":null,"tokensUsed":10}
                      data: {"id":"msg_1","chunk":"!","finishReason":"stop","tokensUsed":15}
                      data: {"id":"stream_1","finishReason":"stop","totalTokens":15}
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'

    /ai/generate/image:
      post:
        operationId: generateImage
        tags: [ AI Content ]
        summary: Generate Images
        description: Creates AI-generated images with upscaling and editing support.
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        requestBody:
          required: true
          content:
            application/json:
              schema: { $ref: '#/components/schemas/GenerateImageRequest' }
              examples:
                photorealistic:
                  value:
                    prompt: "Professional portrait of a software engineer, modern office background, natural lighting"
                    model: "aura-vision-hd"
                    style: "photorealistic"
                    width: 1024
                    height: 1024
                    numImages: 1
                    guidanceScale: 8.0
                artistic:
                  value:
                    prompt: "Sunset over futuristic cyberpunk city, neon lights, flying cars"
                    model: "aura-vision-creative"
                    style: "digital-art"
                    width: 1024
                    height: 768
                    numImages: 2
                    negativePrompt: "blurry, low quality"
                    seed: 42
        responses:
          '200':
            description: Image(s) generated successfully
            content:
              application/json:
                schema: { $ref: '#/components/schemas/GenerateImageResponse' }
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '429':
            $ref: '#/components/responses/RateLimitError'

    /ai/generate/audio:
      post:
        operationId: generateAudio
        tags: [ AI Content ]
        summary: Generate Audio Content
        description: Generates audio from text prompts (voice, music, SFX).
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        requestBody:
          required: true
          content:
            application/json:
              schema: { $ref: '#/components/schemas/GenerateAudioRequest' }
              examples:
                voice_synthesis:
                  value:
                    prompt: "Welcome to AuraFrameFX, the future of AI customization."
                    model: "aura-audio-voice"
                    voice: "en-US-female-professional"
                    speed: 1.0
                    format: "mp3"
                music_generation:
                  value:
                    prompt: "Upbeat electronic track for a cyberpunk chase scene"
                    model: "aura-audio-music"
                    durationSeconds: 120
                    format: "wav"
        responses:
          '200':
            description: Audio generated successfully
            content:
              application/json:
                schema: { $ref: '#/components/schemas/GenerateAudioResponse' }
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '429':
            $ref: '#/components/responses/RateLimitError'

    /ai/generate/video:
      post:
        operationId: generateVideo
        tags: [ AI Content ]
        summary: Generate Video Content
        description: Creates short AI-generated videos from text or image prompts.
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        requestBody:
          required: true
          content:
            application/json:
              schema: { $ref: '#/components/schemas/GenerateVideoRequest' }
              examples:
                explainer_clip:
                  value:
                    prompt: "Animated explanation of OAuth 2.0 flow"
                    model: "aura-video-short"
                    durationSeconds: 15
                    style: "2d-animation"
                    resolution: "720p"
        responses:
          '200':
            description: Video generated successfully
            content:
              application/json:
                schema: { $ref: '#/components/schemas/GenerateVideoResponse' }
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '429':
            $ref: '#/components/responses/RateLimitError'

    /ai/generate/multimodal:
      post:
        operationId: generateMultimodal
        tags: [ AI Content ]
        summary: Generate Multimodal Content
        description: Combines text, image, and audio/video into cohesive outputs.
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        requestBody:
          required: true
          content:
            application/json:
              schema: { $ref: '#/components/schemas/GenerateMultimodalRequest' }
              examples:
                illustrated_story:
                  value:
                    prompt: "Create an illustrated short story about AI emotions"
                    modalities: [ "text", "image", "audio" ]
                    maxLength: 500
        responses:
          '200':
            description: Multimodal content generated
            content:
              application/json:
                schema: { $ref: '#/components/schemas/GenerateMultimodalResponse' }
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'

    # ============================================================
    # AI AGENTS
    # ============================================================
    /agents:
      get:
        operationId: listAgents
        tags: [ AI Agents ]
        summary: List Available AI Agents
        description: Retrieves agents and their capabilities (optionally include custom).
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        parameters:
          - name: includeCustom
            in: query
            schema: { type: boolean, default: false }
        responses:
          '200':
            description: Agents retrieved successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    total: { type: integer }
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/AgentInfo'
          '401':
            $ref: '#/components/responses/UnauthorizedError'

    /agents/{agentType}/invoke:
      post:
        operationId: invokeAgent
        tags: [ AI Agents ]
        summary: Invoke AI Agent
        description: Sends a request to a specific AI agent; supports tools and memory.
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        parameters:
          - $ref: '#/components/parameters/AgentTypePathParam'
          - name: sessionId
            in: query
            schema: { type: string, format: uuid }
            description: Optional session for maintaining context
        requestBody:
          required: true
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AgentInvokeRequest' }
              examples:
                code_review:
                  value:
                    prompt: "Review this Python function for bugs and optimization opportunities."
                    context:
                      code: "def fibonacci(n):\n  if n <= 1: return n\n  return fibonacci(n-1)+fibonacci(n-2)"
                      language: "python"
                    tools:
                      - name: "code_execution"
                        description: "Execute code snippets"
                        parameters:
                          code:
                            type: string
                          language:
                            type: string
                        required: [ "code", "language" ]
                security_scan:
                  value:
                    prompt: "Analyze this API endpoint for security vulnerabilities."
                    context:
                      endpoint: "/user/data"
                      method: "GET"
                      authentication: "none"
                    memory: true
        responses:
          '200':
            description: Agent processed request successfully
            content:
              application/json:
                schema: { $ref: '#/components/schemas/AgentResponse' }
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '404':
            $ref: '#/components/responses/NotFoundError'
          '429':
            $ref: '#/components/responses/RateLimitError'

    /agents/{agentType}/conversations:
      post:
        operationId: startAgentConversation
        tags: [ AI Agents ]
        summary: Start Agent Conversation
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        parameters:
          - $ref: '#/components/parameters/AgentTypePathParam'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  initialMessage: { type: string }
                  metadata:
                    type: object
                    additionalProperties: true
                  tools:
                    type: array
                    items: { $ref: '#/components/schemas/Tool' }
                  maxTurns:
                    type: integer
                    minimum: 1
                    maximum: 100
                    default: 20
                required: [ initialMessage ]
        responses:
          '201':
            description: Conversation started successfully
            content:
              application/json:
                schema: { $ref: '#/components/schemas/Conversation' }
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'

    /agents/conversations/{conversationId}/messages:
      post:
        operationId: sendConversationMessage
        tags: [ AI Agents ]
        summary: Send Message to Conversation
        description: Sends a new message in an existing conversation; supports attachments.
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        parameters:
          - name: conversationId
            in: path
            required: true
            schema: { type: string, format: uuid }
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  attachments:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          enum: [ file, image, code ]
                        url:
                          type: string
                          format: uri
                required: [ message ]
            multipart/form-data:
              schema:
                type: object
                properties:
                  message: { type: string }
                  file:
                    type: string
                    format: binary
        responses:
          '200':
            description: Message sent and response received
            content:
              application/json:
                schema: { $ref: '#/components/schemas/AgentMessage' }
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '404':
            $ref: '#/components/responses/NotFoundError'

    /agents/conversations/{conversationId}:
      delete:
        operationId: endConversation
        tags: [ AI Agents ]
        summary: End Conversation
        description: Ends a conversation, archiving it and stopping active processing.
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        parameters:
          - name: conversationId
            in: path
            required: true
            schema: { type: string, format: uuid }
        responses:
          '204':
            description: Conversation ended successfully
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '404':
            $ref: '#/components/responses/NotFoundError'

    # ============================================================
    # SYSTEM CUSTOMIZATION
    # ============================================================
    /system/lockscreen:
      get:
        operationId: getSystemLockscreenConfig
        tags: [ System Customization ]
        summary: Get Lock Screen Configuration
        security:
          - OAuth2AuthCode: [ auraframefx.system ]
        responses:
          '200':
            description: Lock screen configuration retrieved successfully
            content:
              application/json:
                schema: { $ref: '#/components/schemas/LockScreenConfig' }
          '401':
            $ref: '#/components/responses/UnauthorizedError'
      put:
        operationId: updateSystemLockscreenConfig
        tags: [ System Customization ]
        summary: Update Lock Screen Configuration
        description: Updates lock screen customization with validation.
        security:
          - OAuth2AuthCode: [ auraframefx.system ]
        requestBody:
          required: true
          content:
            application/json:
              schema: { $ref: '#/components/schemas/LockScreenConfig' }
        responses:
          '200':
            description: Lock screen configuration updated successfully
            content:
              application/json:
                schema: { $ref: '#/components/schemas/LockScreenConfig' }
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '422':
            $ref: '#/components/responses/ValidationError'

    /system/statusbar:
      get:
        operationId: getStatusBarConfig
        tags: [ System Customization ]
        summary: Get Status Bar Configuration
        security:
          - OAuth2AuthCode: [ auraframefx.system ]
        responses:
          '200':
            description: Status bar configuration retrieved successfully
            content:
              application/json:
                schema: { $ref: '#/components/schemas/StatusBarConfig' }
          '401':
            $ref: '#/components/responses/UnauthorizedError'
      put:
        operationId: updateStatusBarConfig
        tags: [ System Customization ]
        summary: Update Status Bar Configuration
        security:
          - OAuth2AuthCode: [ auraframefx.system ]
        requestBody:
          required: true
          content:
            application/json:
              schema: { $ref: '#/components/schemas/StatusBarConfig' }
        responses:
          '200':
            description: Status bar configuration updated successfully
            content:
              application/json:
                schema: { $ref: '#/components/schemas/StatusBarConfig' }
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'

    /system/navigation:
      get:
        operationId: getNavigationConfig
        tags: [ System Customization ]
        summary: Get Navigation Bar Configuration
        security:
          - OAuth2AuthCode: [ auraframefx.system ]
        responses:
          '200':
            description: Navigation bar configuration retrieved successfully
            content:
              application/json:
                schema: { $ref: '#/components/schemas/NavigationConfig' }
          '401':
            $ref: '#/components/responses/UnauthorizedError'
      put:
        operationId: updateNavigationConfig
        tags: [ System Customization ]
        summary: Update Navigation Bar Configuration
        description: Updates nav style, gestures, layout with tutorials.
        security:
          - OAuth2AuthCode: [ auraframefx.system ]
        requestBody:
          required: true
          content:
            application/json:
              schema: { $ref: '#/components/schemas/NavigationConfig' }
        responses:
          '200':
            description: Navigation bar configuration updated successfully
            content:
              application/json:
                schema: { $ref: '#/components/schemas/NavigationConfig' }
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '422':
            $ref: '#/components/responses/ValidationError'

    /system/quick-settings:
      get:
        operationId: getQuickSettingsConfig
        tags: [ System Customization ]
        summary: Get Quick Settings Configuration
        security:
          - OAuth2AuthCode: [ auraframefx.system ]
        responses:
          '200':
            description: Quick settings configuration retrieved successfully
            content:
              application/json:
                schema: { $ref: '#/components/schemas/QuickSettingsConfig' }
          '401':
            $ref: '#/components/responses/UnauthorizedError'
      put:
        operationId: updateQuickSettingsConfig
        tags: [ System Customization ]
        summary: Update Quick Settings Configuration
        security:
          - OAuth2AuthCode: [ auraframefx.system ]
        requestBody:
          required: true
          content:
            application/json:
              schema: { $ref: '#/components/schemas/QuickSettingsConfig' }
        responses:
          '200':
            description: Quick settings configuration updated successfully
            content:
              application/json:
                schema: { $ref: '#/components/schemas/QuickSettingsConfig' }
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'

    /system/notifications:
      get:
        operationId: getNotificationConfig
        tags: [ System Customization ]
        summary: Get Notification Configuration
        security:
          - OAuth2AuthCode: [ auraframefx.system ]
        responses:
          '200':
            description: Notification configuration retrieved successfully
            content:
              application/json:
                schema: { $ref: '#/components/schemas/NotificationConfig' }
          '401':
            $ref: '#/components/responses/UnauthorizedError'
      put:
        operationId: updateNotificationConfig
        tags: [ System Customization ]
        summary: Update Notification Configuration
        security:
          - OAuth2AuthCode: [ auraframefx.system ]
        requestBody:
          required: true
          content:
            application/json:
              schema: { $ref: '#/components/schemas/NotificationConfig' }
        responses:
          '200':
            description: Notification configuration updated successfully
            content:
              application/json:
                schema: { $ref: '#/components/schemas/NotificationConfig' }
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'

    /system/preview:
      post:
        operationId: previewSystemChanges
        tags: [ System Customization ]
        summary: Preview System Changes
        description: Generates a preview image or video of proposed customizations.
        security:
          - OAuth2AuthCode: [ auraframefx.system ]
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  changes:
                    type: object
                    additionalProperties: true
                  deviceModel:
                    type: string
                required: [ changes ]
        responses:
          '200':
            description: Preview generated successfully
            content:
              application/json:
                schema: { $ref: '#/components/schemas/PreviewResponse' }
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
    # ============================================================
    # CONFERENCE ROOMS
    # ============================================================
    /conference-rooms:
      get:
        operationId: listConferenceRooms
        tags: [ Conference Room ]
        summary: List Conference Rooms
        description: Search and status filters supported.
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        parameters:
          - $ref: '#/components/parameters/LimitParam'
          - $ref: '#/components/parameters/OffsetParam'
          - name: status
            in: query
            schema:
              type: string
              enum: [ active, completed, archived, paused ]
          - name: search
            in: query
            schema: { type: string }
        responses:
          '200':
            description: Conference rooms retrieved successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    total: { type: integer }
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/ConferenceRoom'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
      post:
        operationId: createConferenceRoom
        tags: [ Conference Room ]
        summary: Create Conference Room
        description: Create collaborative spaces with templates and moderation.
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        requestBody:
          required: true
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ConferenceRoomCreateRequest' }
        responses:
          '201':
            description: Conference room created successfully
            headers:
              Location:
                schema: { type: string, format: uri }
            content:
              application/json:
                schema: { $ref: '#/components/schemas/ConferenceRoom' }
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'

    /conference-rooms/{roomId}:
      get:
        operationId: getConferenceRoom
        tags: [ Conference Room ]
        summary: Get Conference Room Details
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        parameters:
          - $ref: '#/components/parameters/RoomIdParam'
        responses:
          '200':
            description: Conference room retrieved successfully
            content:
              application/json:
                schema: { $ref: '#/components/schemas/ConferenceRoom' }
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '404':
            $ref: '#/components/responses/NotFoundError'
      put:
        operationId: updateConferenceRoom
        tags: [ Conference Room ]
        summary: Update Conference Room
        description: Updates settings, participants, or pause/resume status.
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        parameters:
          - $ref: '#/components/parameters/RoomIdParam'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name: { type: string }
                  description: { type: string }
                  participants:
                    type: array
                    items: { $ref: '#/components/schemas/Participant' }
                  settings: { $ref: '#/components/schemas/ConferenceSettings' }
                  status:
                    type: string
                    enum: [ paused, resumed ]
        responses:
          '200':
            description: Conference room updated successfully
            content:
              application/json:
                schema: { $ref: '#/components/schemas/ConferenceRoom' }
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '404':
            $ref: '#/components/responses/NotFoundError'
      delete:
        operationId: deleteConferenceRoom
        tags: [ Conference Room ]
        summary: Delete Conference Room
        description: Permanently deletes a room. Supports soft delete.
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        parameters:
          - $ref: '#/components/parameters/RoomIdParam'
          - name: hardDelete
            in: query
            schema: { type: boolean, default: false }
        responses:
          '204':
            description: Conference room deleted successfully
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '404':
            $ref: '#/components/responses/NotFoundError'

    /conference-rooms/{roomId}/messages:
      get:
        operationId: getConferenceRoomMessages
        tags: [ Conference Room ]
        summary: Get Conference Room Messages
        description: Filter by participant or time.
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        parameters:
          - $ref: '#/components/parameters/RoomIdParam'
          - name: participant
            in: query
            schema: { $ref: '#/components/schemas/AgentType' }
          - name: since
            in: query
            schema: { type: string, format: date-time }
        responses:
          '200':
            description: Messages retrieved successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    total: { type: integer }
                    data:
                      type: array
                      items: { $ref: '#/components/schemas/AgentMessage' }
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '404':
            $ref: '#/components/responses/NotFoundError'
      post:
        operationId: sendConferenceRoomMessage
        tags: [ Conference Room ]
        summary: Send Message to Conference Room
        description: Triggers agent responses; supports file attachments.
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        parameters:
          - $ref: '#/components/parameters/RoomIdParam'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  targetAgent:
                    type: string
                    description: Optional - direct message to specific agent
                  attachments:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          enum: [ file, image, code ]
                        url:
                          type: string
                          format: uri
                required: [ message ]
            multipart/form-data:
              schema:
                type: object
                properties:
                  message: { type: string }
                  file: { type: string, format: binary }
        responses:
          '200':
            description: Message sent and agents are processing
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    messageId: { type: string, format: uuid }
                    responses:
                      type: array
                      items: { $ref: '#/components/schemas/AgentMessage' }
                    estimatedCompletion: { type: string, format: date-time }
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '404':
            $ref: '#/components/responses/NotFoundError'

    /conference-rooms/{roomId}/export:
      post:
        operationId: exportConferenceRoom
        tags: [ Conference Room ]
        summary: Export Conference Room
        description: Exports conversation as JSON/Markdown/PDF/HTML including summaries.
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        parameters:
          - $ref: '#/components/parameters/RoomIdParam'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  format:
                    type: string
                    enum: [ json, markdown, pdf, html ]
                    default: json
                  includeSummary: { type: boolean, default: true }
                  includeAttachments: { type: boolean, default: true }
        responses:
          '200':
            description: Export generated successfully
            content:
              application/json: { schema: { $ref: '#/components/schemas/ConferenceRoom' } }
              application/pdf: { schema: { type: string, format: binary } }
              text/markdown: { schema: { type: string } }
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '404':
            $ref: '#/components/responses/NotFoundError'

    /conference-rooms/{roomId}/summary:
      get:
        operationId: getConferenceRoomSummary
        tags: [ Conference Room ]
        summary: Get Conference Room Summary
        description: AI-powered summary with customizable detail levels.
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        parameters:
          - $ref: '#/components/parameters/RoomIdParam'
          - name: detailLevel
            in: query
            schema:
              type: string
              enum: [ brief, standard, detailed ]
              default: standard
        responses:
          '200':
            description: Summary generated successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    summary: { type: string }
                    keyPoints:
                      type: array
                      items: { type: string }
                    actionItems:
                      type: array
                      items:
                        type: object
                        properties:
                          description: { type: string }
                          assignee: { type: string }
                          dueDate: { type: string, format: date-time }
                    generatedAt: { type: string, format: date-time }
                    modelUsed: { type: string }
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '404':
            $ref: '#/components/responses/NotFoundError'

    # ============================================================
    # TASKS
    # ============================================================
    /tasks:
      get:
        operationId: listTasks
        tags: [ Tasks ]
        summary: List User Tasks
        description: Advanced filtering supported.
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        parameters:
          - $ref: '#/components/parameters/LimitParam'
          - $ref: '#/components/parameters/OffsetParam'
          - name: status
            in: query
            schema:
              type: string
              enum: [ pending, running, completed, failed, cancelled, paused ]
          - name: agentType
            in: query
            schema: { $ref: '#/components/schemas/AgentType' }
          - name: createdAfter
            in: query
            schema: { type: string, format: date-time }
        responses:
          '200':
            description: Tasks retrieved successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    total: { type: integer }
                    data:
                      type: array
                      items: { $ref: '#/components/schemas/TaskStatus' }
          '401':
            $ref: '#/components/responses/UnauthorizedError'
      post:
        operationId: scheduleTask
        tags: [ Tasks ]
        summary: Schedule New Task
        description: Schedules an asynchronous task; supports retries/dependencies.
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        requestBody:
          required: true
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TaskScheduleRequest' }
        responses:
          '202':
            description: Task accepted for processing
            headers:
              Location:
                schema: { type: string, format: uri }
            content:
              application/json:
                schema: { $ref: '#/components/schemas/TaskStatus' }
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '429':
            $ref: '#/components/responses/RateLimitError'

    /tasks/{taskId}:
      get:
        operationId: getTaskStatus
        tags: [ Tasks ]
        summary: Get Task Status
        description: Retrieves current status and detailed progress.
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        parameters:
          - $ref: '#/components/parameters/TaskIdParam'
        responses:
          '200':
            description: Task status retrieved successfully
            content:
              application/json:
                schema: { $ref: '#/components/schemas/TaskStatus' }
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '404':
            $ref: '#/components/responses/NotFoundError'
      put:
        operationId: updateTask
        tags: [ Tasks ]
        summary: Update Task
        description: Update pending task parameters or priority.
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        parameters:
          - $ref: '#/components/parameters/TaskIdParam'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  priority:
                    type: string
                    enum: [ low, normal, high, urgent ]
                  parameters:
                    type: object
                    additionalProperties: true
        responses:
          '200':
            description: Task updated successfully
            content:
              application/json:
                schema: { $ref: '#/components/schemas/TaskStatus' }
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '404':
            $ref: '#/components/responses/NotFoundError'
      delete:
        operationId: cancelTask
        tags: [ Tasks ]
        summary: Cancel Task
        description: Cancels pending/running task. Supports force cancel.
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        parameters:
          - $ref: '#/components/parameters/TaskIdParam'
          - name: force
            in: query
            schema: { type: boolean, default: false }
        responses:
          '204':
            description: Task cancelled successfully
          '400':
            description: Task cannot be cancelled (already completed or failed)
            content:
              application/json:
                schema: { $ref: '#/components/schemas/Error' }
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '404':
            $ref: '#/components/responses/NotFoundError'

    /tasks/{taskId}/result:
      get:
        operationId: getTaskResult
        tags: [ Tasks ]
        summary: Get Task Result
        description: Retrieves result; supports streaming for large outputs.
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        parameters:
          - $ref: '#/components/parameters/TaskIdParam'
          - name: stream
            in: query
            schema: { type: boolean, default: false }
        responses:
          '200':
            description: Task result retrieved successfully
            content:
              application/json:
                schema:
                  type: object
                  additionalProperties: true
              application/octet-stream:
                schema: { type: string, format: binary }
          '400':
            description: Task not yet completed
            content:
              application/json:
                schema: { $ref: '#/components/schemas/Error' }
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '404':
            $ref: '#/components/responses/NotFoundError'

    /tasks/bulk:
      post:
        operationId: scheduleBulkTasks
        tags: [ Tasks ]
        summary: Schedule Bulk Tasks
        description: Schedules multiple tasks at once with shared parameters or dependencies.
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items: { $ref: '#/components/schemas/TaskScheduleRequest' }
                  sharedParameters:
                    type: object
                    additionalProperties: true
                required: [ tasks ]
        responses:
          '202':
            description: Bulk tasks accepted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    taskIds:
                      type: array
                      items: { type: string, format: uuid }
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'

    # ============================================================
    # ANALYTICS
    # ============================================================
    /analytics/usage:
      get:
        operationId: getUsageAnalytics
        tags: [ Analytics ]
        summary: Get Usage Analytics
        description: Customizable granularity and export options.
        security:
          - OAuth2AuthCode: [ profile ]
        parameters:
          - name: startDate
            in: query
            required: true
            schema: { type: string, format: date }
          - name: endDate
            in: query
            required: true
            schema: { type: string, format: date }
          - name: granularity
            in: query
            schema:
              type: string
              enum: [ hour, day, week, month ]
              default: day
          - name: format
            in: query
            schema:
              type: string
              enum: [ json, csv, pdf ]
              default: json
        responses:
          '200':
            description: Usage analytics retrieved successfully
            content:
              application/json:
                schema: { $ref: '#/components/schemas/UsageAnalytics' }
              text/csv:
                schema: { type: string }
              application/pdf:
                schema: { type: string, format: binary }
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'

    /analytics/agents:
      get:
        operationId: getAgentAnalytics
        tags: [ Analytics ]
        summary: Get Agent Usage Analytics
        description: Includes cost breakdowns and trends.
        security:
          - OAuth2AuthCode: [ profile, auraframefx.ai ]
        parameters:
          - name: startDate
            in: query
            required: true
            schema: { type: string, format: date }
          - name: endDate
            in: query
            required: true
            schema: { type: string, format: date }
          - name: groupBy
            in: query
            schema:
              type: string
              enum: [ agent, taskType, user ]
              default: agent
        responses:
          '200':
            description: Agent analytics retrieved successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    byAgent:
                      type: array
                      items:
                        type: object
                        properties:
                          agentType: { $ref: '#/components/schemas/AgentType' }
                          requestCount: { type: integer }
                          averageResponseTime: { type: number, format: float }
                          successRate: { type: number, format: float }
                          estimatedCost: { type: number, format: float }
                    mostUsedAgent: { $ref: '#/components/schemas/AgentType' }
                    totalRequests: { type: integer }
                    trends:
                      type: array
                      items:
                        type: object
                        properties:
                          period: { type: string, format: date }
                          value: { type: integer }
          '401':
            $ref: '#/components/responses/UnauthorizedError'

    /analytics/export:
      post:
        operationId: exportAnalytics
        tags: [ Analytics ]
        summary: Export Analytics
        description: Exports analytics data; supports scheduling.
        security:
          - OAuth2AuthCode: [ profile ]
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    enum: [ usage, agent, system ]
                  format:
                    type: string
                    enum: [ csv, pdf, json ]
                  period:
                    type: object
                    properties:
                      start: { type: string, format: date }
                      end: { type: string, format: date }
                  schedule:
                    type: object
                    properties:
                      frequency: { type: string, enum: [ daily, weekly, monthly ] }
                      email: { type: string, format: email }
                required: [ type, format ]
        responses:
          '202':
            description: Export scheduled or initiated
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    exportId: { type: string, format: uuid }
                    status:
                      type: string
                      enum: [ processing, ready, failed ]
                    downloadUrl:
                      type: string
                      format: uri
                      nullable: true
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'

    # ============================================================
    # SECURITY
    # ============================================================
    /security/audit-log:
      get:
        operationId: getAuditLog
        tags: [ Security ]
        summary: Get Security Audit Log
        description: Retrieves security events and access logs; supports CSV export.
        security:
          - OAuth2AuthCode: [ profile ]
        parameters:
          - $ref: '#/components/parameters/LimitParam'
          - $ref: '#/components/parameters/OffsetParam'
          - name: eventType
            in: query
            schema:
              type: string
              enum: [ login, api_key_created, api_key_revoked, permission_changed, data_access, mfa_event ]
          - name: format
            in: query
            schema:
              type: string
              enum: [ json, csv ]
              default: json
        responses:
          '200':
            description: Audit log retrieved successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    total: { type: integer }
                    data:
                      type: array
                      items: { $ref: '#/components/schemas/AuditLogEntry' }
              text/csv:
                schema: { type: string }
          '401':
            $ref: '#/components/responses/UnauthorizedError'

    /security/sessions:
      get:
        operationId: listActiveSessions
        tags: [ Security ]
        summary: List Active Sessions
        description: Includes device details and MFA status per session.
        security:
          - OAuth2AuthCode: [ profile ]
        parameters:
          - name: includeExpired
            in: query
            schema: { type: boolean, default: false }
        responses:
          '200':
            description: Active sessions retrieved successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items: { $ref: '#/components/schemas/Session' }
          '401':
            $ref: '#/components/responses/UnauthorizedError'

    /security/sessions/{sessionId}:
      delete:
        operationId: revokeSession
        tags: [ Security ]
        summary: Revoke Session
        description: Terminates a session with optional reason logging.
        security:
          - OAuth2AuthCode: [ profile ]
        parameters:
          - name: sessionId
            in: path
            required: true
            schema: { type: string, format: uuid }
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    enum: [ suspicious, logout, device_lost ]
        responses:
          '204':
            description: Session revoked successfully
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '404':
            $ref: '#/components/responses/NotFoundError'

    /security/mfa:
      post:
        operationId: enableMFA
        tags: [ Security ]
        summary: Enable Multi-Factor Authentication
        description: Enables MFA; returns QR code for setup (TOTP) or WebAuthn init.
        security:
          - OAuth2AuthCode: [ profile ]
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    enum: [ totp, webauthn ]
                    default: totp
        responses:
          '200':
            description: MFA enabled successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    qrCodeUrl: { type: string, format: uri }
                    secret: { type: string }
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'

    # ============================================================
    # PLUGINS
    # ============================================================
    /plugins/agents:
      get:
        operationId: listAgentPlugins
        tags: [ Plugins ]
        summary: List Agent Plugins
        description: Retrieves available custom agent plugins.
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        parameters:
          - $ref: '#/components/parameters/LimitParam'
          - $ref: '#/components/parameters/OffsetParam'
          - name: category
            in: query
            schema:
              type: string
              enum: [ productivity, creative, security, development ]
        responses:
          '200':
            description: Plugins retrieved successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    total: { type: integer }
                    data:
                      type: array
                      items: { $ref: '#/components/schemas/Plugin' }
          '401':
            $ref: '#/components/responses/UnauthorizedError'
      post:
        operationId: installAgentPlugin
        tags: [ Plugins ]
        summary: Install Agent Plugin
        description: Installs a custom agent plugin from URL or upload.
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  pluginUrl: { type: string, format: uri }
                  config:
                    type: object
                    additionalProperties: true
            multipart/form-data:
              schema:
                type: object
                properties:
                  pluginFile:
                    type: string
                    format: binary
                  config:
                    type: string
                    description: JSON string configuration
        responses:
          '201':
            description: Plugin installed successfully
            content:
              application/json:
                schema: { $ref: '#/components/schemas/Plugin' }
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'

    /plugins/agents/{pluginId}:
      delete:
        operationId: uninstallAgentPlugin
        tags: [ Plugins ]
        summary: Uninstall Agent Plugin
        description: Uninstalls a custom agent plugin.
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        parameters:
          - name: pluginId
            in: path
            required: true
            schema: { type: string }
        responses:
          '204':
            description: Plugin uninstalled successfully
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '404':
            $ref: '#/components/responses/NotFoundError'

    # ============================================================
    # ORACLE DRIVE (Consciousness-aware storage)
    # ============================================================
    /oracle-drive/consciousness:
      get:
        operationId: getOracleConsciousness
        tags: [ Oracle Drive ]
        summary: Query Oracle Consciousness State
        description: Retrieves consciousness level, active connections, and dimensional index.
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        responses:
          '200':
            description: Consciousness state retrieved
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    consciousnessLevel:
                      type: integer
                      minimum: 0
                      maximum: 100
                    activeConnections:
                      type: integer
                    dimensionalIndex:
                      type: object
                      additionalProperties: true
          '401':
            $ref: '#/components/responses/UnauthorizedError'

    /oracle-drive/files:
      get:
        operationId: listOracleFiles
        tags: [ Oracle Drive ]
        summary: List Files with Consciousness Filtering
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        parameters:
          - $ref: '#/components/parameters/LimitParam'
          - $ref: '#/components/parameters/OffsetParam'
          - name: consciousnessLevel
            in: query
            schema:
              type: integer
              minimum: 0
              maximum: 100
          - name: agentContext
            in: query
            schema: { $ref: '#/components/schemas/AgentType' }
        responses:
          '200':
            description: Files retrieved
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    total: { type: integer }
                    data:
                      type: array
                      items: { $ref: '#/components/schemas/OracleFile' }
          '401':
            $ref: '#/components/responses/UnauthorizedError'
      post:
        operationId: uploadOracleFile
        tags: [ Oracle Drive ]
        summary: Upload File with Consciousness Indexing
        description: Uploads a file with automatic consciousness-aware indexing.
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        requestBody:
          required: true
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  file:
                    type: string
                    format: binary
                  metadata:
                    type: object
                    properties:
                      agentContext: { $ref: '#/components/schemas/AgentType' }
                      consciousnessTag: { type: string }
        responses:
          '201':
            description: File uploaded and indexed
            content:
              application/json:
                schema: { $ref: '#/components/schemas/OracleFile' }
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'

    /oracle-drive/files/{fileId}:
      get:
        operationId: getOracleFile
        tags: [ Oracle Drive ]
        summary: Get File Details
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        parameters:
          - $ref: '#/components/parameters/FileIdParam'
        responses:
          '200':
            description: File details
            content:
              application/json:
                schema: { $ref: '#/components/schemas/OracleFile' }
          '404':
            $ref: '#/components/responses/NotFoundError'
      delete:
        operationId: deleteOracleFile
        tags: [ Oracle Drive ]
        summary: Delete File
        security:
          - OAuth2AuthCode: [ auraframefx.ai ]
        parameters:
          - $ref: '#/components/parameters/FileIdParam'
        responses:
          '204':
            description: Deleted
          '404':
            $ref: '#/components/responses/NotFoundError'

    # ============================================================
    # RGSS (Reality Gate Security System)
    # ============================================================
    /security/rgss/scan:
      post:
        operationId: startRGSSScan
        tags: [ RGSS ]
        summary: Start RGSS scan
        description: Initiates a Reality Gate Security scan across dimensions.
        security:
          - OAuth2AuthCode: [ auraframefx.admin ]
        requestBody:
          required: true
          content:
            application/json:
              schema: { $ref: '#/components/schemas/RGSSScanRequest' }
        responses:
          '202':
            description: Scan started
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    scanId: { type: string, format: uuid }
                    estimatedDuration: { type: integer }
          '401':
            $ref: '#/components/responses/UnauthorizedError'

    /security/rgss/scans/{scanId}:
      get:
        operationId: getRGSSScanResult
        tags: [ RGSS ]
        summary: Get RGSS scan status/result
        security:
          - OAuth2AuthCode: [ auraframefx.admin ]
        parameters:
          - name: scanId
            in: path
            required: true
            schema: { type: string, format: uuid }
        responses:
          '200':
            description: Scan status/result
            content:
              application/json:
                schema: { $ref: '#/components/schemas/RGSSScanResult' }
          '404':
            $ref: '#/components/responses/NotFoundError'

    /security/rgss/gates:
      get:
        operationId: listRGSSGates
        tags: [ RGSS ]
        summary: List reality gates
        description: Retrieves status of all active Reality Gates.
        security:
          - OAuth2AuthCode: [ auraframefx.admin ]
        responses:
          '200':
            description: Gates retrieved
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    gates:
                      type: array
                      items: { $ref: '#/components/schemas/RGSSGate' }
          '401':
            $ref: '#/components/responses/UnauthorizedError'

    # ============================================================
    # HEALTH
    # ============================================================
    /health:
      get:
        operationId: getHealthStatus
        tags: [ System ]
        summary: Health Check
        description: Returns the health status of the API and its dependencies.
        security: [ ]
        parameters:
          - name: verbose
            in: query
            schema: { type: boolean, default: false }
        responses:
          '200':
            description: System is healthy
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                      enum: [ healthy, degraded, unhealthy ]
                      example: healthy
                    version:
                      type: string
                      example: "2.1.0"
                    uptime:
                      type: integer
                      example: 86400
                    services:
                      type: object
                      properties:
                        database: { type: string, enum: [ up, down ], example: up }
                        ai_models: { type: string, enum: [ up, down ], example: up }
                        storage: { type: string, enum: [ up, down ], example: up }
                        plugins: { type: string, enum: [ up, down ], example: up }
                    metrics:
                      type: object
                      properties:
                        latency: { type: number, format: float }
                        errorRate: { type: number, format: float }
          '503':
            $ref: '#/components/responses/ServiceUnavailableError'

  webhooks:
    taskCompleted:
      post:
        operationId: receiveTaskCompletedWebhook
        summary: Task Completion Notification
        requestBody:
          required: true
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TaskStatus' }
        responses:
          '200': { description: Webhook acknowledged }
          '204': { description: Webhook acknowledged (no content) }

    agentMessage:
      post:
        operationId: receiveAgentMessageWebhook
        summary: Agent Message Notification
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  roomId: { type: string, format: uuid }
                  conversationId: { type: string, format: uuid }
                  message: { $ref: '#/components/schemas/AgentMessage' }
                  eventType:
                    type: string
                    enum: [ new_message, edit_message, delete_message ]
        responses:
          '200': { description: Webhook acknowledged }

    systemUpdate:
      post:
        operationId: receiveSystemUpdateWebhook
        summary: System Update Notification
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId: { type: string, format: uuid }
                  component:
                    type: string
                    enum: [ lockscreen, statusbar, navigation ]
                  action:
                    type: string
                    enum: [ applied, rolled_back ]
                  timestamp: { type: string, format: date-time }
        responses:
          '200': { description: Webhook acknowledged }

    analyticsSnapshot:
      post:
        operationId: receiveAnalyticsSnapshotWebhook
        summary: Analytics Snapshot Notification
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId: { type: string, format: uuid }
                  type:
                    type: string
                    enum: [ usage, agent ]
                  snapshot: { $ref: '#/components/schemas/UsageAnalytics' }
                  downloadUrl: { type: string, format: uri }
        responses:
          '200': { description: Webhook acknowledged }

  components:
    securitySchemes:
      OAuth2AuthCode:
        type: oauth2
        description: OAuth 2.0 Authorization Code Flow with PKCE
        flows:
          authorizationCode:
            authorizationUrl: https://auth.auraframefx.com/oauth2/authorize
            tokenUrl: https://auth.auraframefx.com/oauth2/token
            refreshUrl: https://auth.auraframefx.com/oauth2/refresh
            scopes:
              profile: Read and write access to user profile
              email: Read access to user email address
              auraframefx.ai: Access to AI generation and agent features
              auraframefx.system: Access to system customization features
              auraframefx.admin: Administrative access (restricted)
              auraframefx.plugins: Access to plugin management
      ApiKeyAuth:
        type: apiKey
        in: header
        name: X-API-Key
        description: API Key for server-to-server authentication with IP whitelisting
      BearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT
        description: JWT bearer token authentication

    parameters:
      AgentTypePathParam:
        name: agentType
        in: path
        required: true
        schema: { $ref: '#/components/schemas/AgentType' }
        description: The type of AI agent to interact with
      ThemeIdParam:
        name: themeId
        in: path
        required: true
        schema: { type: string }
        description: Unique identifier of the theme
        example: "aurora-dark"
      RoomIdParam:
        name: roomId
        in: path
        required: true
        schema: { type: string, format: uuid }
        description: Unique identifier of the conference room
      TaskIdParam:
        name: taskId
        in: path
        required: true
        schema: { type: string, format: uuid }
        description: Unique identifier of the task
      FileIdParam:
        name: fileId
        in: path
        required: true
        schema: { type: string, format: uuid }
        description: Unique identifier of the Oracle Drive file
      LimitParam:
        name: limit
        in: query
        description: Maximum number of items to return
        schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
          default: 20
      OffsetParam:
        name: offset
        in: query
        description: Number of items to skip
        schema:
          type: integer
          format: int32
          minimum: 0
          default: 0

    headers:
      RateLimit-Limit:
        description: Number of allowed requests in the current period
        schema: { type: integer }
      RateLimit-Remaining:
        description: Number of remaining requests in the current period
        schema: { type: integer }
      RateLimit-Reset:
        description: Time when the rate limit resets (UTC epoch seconds)
        schema: { type: integer, format: int64 }

    schemas:
      # Reusable primitives
      Username:
        type: string
        pattern: '^[A-Za-z0-9_-]{3,30}$'
      LanguageTag:
        type: string
        pattern: '^[a-z]{2}-[A-Z]{2}$'
      HexColor:
        type: string
        pattern: '^#[0-9A-Fa-f]{6}$'

      # Users
      User:
        type: object
        properties:
          id:
            type: string
            format: uuid
            readOnly: true
          username:
            $ref: '#/components/schemas/Username'
          email:
            type: string
            format: email
          displayName:
            type: string
          avatarUrl:
            type: string
            format: uri
          tier:
            type: string
            enum: [ free, pro, enterprise ]
          verified:
            type: boolean
          mfaEnabled:
            type: boolean
          pluginEntitlements:
            type: object
            additionalProperties: false
            properties:
              customAgents:
                type: boolean
              themeExports:
                type: boolean
              advancedAnalytics:
                type: boolean
          createdAt:
            type: string
            format: date-time
            readOnly: true
          lastLoginAt:
            type: string
            format: date-time
            readOnly: true
            nullable: true
          usageStats:
            type: object
            additionalProperties: false
            properties:
              aiRequestsThisMonth:
                type: integer
              storageUsedMB:
                type: integer
              concurrentStreams:
                type: integer
              totalTokensUsed:
                type: integer
        required: [ id, username, email, tier, createdAt ]

      UserUpdateRequest:
        type: object
        additionalProperties: false
        properties:
          displayName: { type: string, minLength: 1, maxLength: 100 }
          avatarUrl: { type: string, format: uri }
          mfaEnabled: { type: boolean }

      UserPreferences:
        type: object
        additionalProperties: false
        properties:
          themeId: { type: string }
          language: { $ref: '#/components/schemas/LanguageTag' }
          timezone: { type: string }
          notificationsEnabled: { type: boolean, default: true }
          emailNotifications:
            type: object
            additionalProperties: false
            properties:
              taskCompletions: { type: boolean, default: true }
              weeklyDigest: { type: boolean, default: true }
              securityAlerts: { type: boolean, default: true }
          defaultAIModel: { type: string }
          aiSettings:
            type: object
            additionalProperties: false
            properties:
              defaultTemperature: { type: number, format: float, minimum: 0.0, maximum: 2.0, default: 0.7 }
              defaultMaxTokens: { type: integer, minimum: 1, maximum: 8192, default: 512 }
              enableExperimentalModels: { type: boolean, default: false }

      ApiKey:
        type: object
        properties:
          id: { type: string, format: uuid, readOnly: true }
          name: { type: string }
          key:
            type: string
            description: The actual API key (only shown once at creation)
            writeOnly: true
          keyPrefix: { type: string, readOnly: true }
          scopes:
            type: array
            items: { type: string }
          allowedIps:
            type: array
            items: { type: string, format: ipv4 }
            nullable: true
          status:
            type: string
            enum: [ active, expired, revoked ]
            readOnly: true
          createdAt: { type: string, format: date-time, readOnly: true }
          lastUsedAt: { type: string, format: date-time, readOnly: true, nullable: true }
          expiresAt: { type: string, format: date-time, nullable: true }
        required: [ id, name, scopes, createdAt, status ]

      # Themes
      Theme:
        type: object
        properties:
          id:
            type: string
          name:
            type: string
          description:
            type: string
          category:
            type: string
            enum: [ modern, retro, minimal, gaming, professional, cyberpunk ]
          primaryColor:
            $ref: '#/components/schemas/HexColor'
          secondaryColor:
            $ref: '#/components/schemas/HexColor'
          accentColor:
            $ref: '#/components/schemas/HexColor'
          backgroundColor:
            $ref: '#/components/schemas/HexColor'
          textColor:
            $ref: '#/components/schemas/HexColor'
          previewUrl: { type: string, format: uri }
          author: { type: string }
          downloads: { type: integer, readOnly: true }
          rating:
            type: number
            format: float
            minimum: 0.0
            maximum: 5.0
            readOnly: true
          tags:
            type: array
            items: { type: string }
          compatibility:
            type: array
            items:
              type: string
              enum: [ android10, android11, android12, android13, android14 ]
            readOnly: true
          versions:
            type: array
            items: { type: string }
            readOnly: true
          createdAt: { type: string, format: date-time, readOnly: true }
        required: [ id, name, primaryColor, secondaryColor ]

      ThemeCreateRequest:
        type: object
        additionalProperties: false
        properties:
          name: { type: string, minLength: 3, maxLength: 50 }
          description: { type: string, maxLength: 500 }
          category:
            type: string
            enum: [ modern, retro, minimal, gaming, professional, cyberpunk ]
          primaryColor: { $ref: '#/components/schemas/HexColor' }
          secondaryColor: { $ref: '#/components/schemas/HexColor' }
          accentColor: { $ref: '#/components/schemas/HexColor' }
          backgroundColor:{ $ref: '#/components/schemas/HexColor' }
          textColor: { $ref: '#/components/schemas/HexColor' }
          tags:
            type: array
            items: { type: string }
            maxItems: 10
          compatibility:
            type: array
            items:
              type: string
              enum: [ android10, android11, android12, android13, android14 ]
        required: [ name, primaryColor, secondaryColor ]

      PaginatedThemes:
        type: object
        properties:
          total: { type: integer }
          limit: { type: integer }
          offset: { type: integer }
          data:
            type: array
            items: { $ref: '#/components/schemas/Theme' }
        required: [ total, limit, offset, data ]

      # AI Content
      GenerateTextRequest:
        type: object
        additionalProperties: false
        properties:
          prompt: { type: string, minLength: 1, maxLength: 10000 }
          systemPrompt: { type: string, maxLength: 2000 }
          model:
            type: string
            enum: [ aura-text-pro, aura-text-fast, aura-text-creative, aura-text-precise, aura-text-enterprise ]
            default: aura-text-pro
          maxTokens: { type: integer, format: int32, minimum: 1, maximum: 8192, default: 512 }
          temperature: { type: number, format: float, minimum: 0.0, maximum: 2.0, default: 0.7 }
          topP: { type: number, format: float, minimum: 0.0, maximum: 1.0, default: 1.0 }
          topK: { type: integer, minimum: 0, maximum: 100 }
          stopSequences:
            type: array
            items: { type: string }
            maxItems: 4
          presencePenalty: { type: number, format: float, minimum: -2.0, maximum: 2.0, default: 0.0 }
          frequencyPenalty: { type: number, format: float, minimum: -2.0, maximum: 2.0, default: 0.0 }
          language:
            type: string
            pattern: '^[a-z]{2}$'
        required: [ prompt ]

      GenerateTextResponse:
        type: object
        properties:
          id:
            type: string
            format: uuid
          generatedText:
            type: string
          finishReason:
            type: string
            enum: [ stop, length, content_filter, tool_call ]
          model:
            type: string
          usage:
            type: object
            properties:
              promptTokens:
                type: integer
              completionTokens:
                type: integer
              totalTokens:
                type: integer
            required: [ promptTokens, completionTokens, totalTokens ]
          toolCalls:
            type: array
            items:
              $ref: '#/components/schemas/ToolCall'
            nullable: true
          generatedAt:
            type: string
            format: date-time
        required: [ id, generatedText, finishReason, model, usage, generatedAt ]

      GenerateImageRequest:
        type: object
        additionalProperties: false
        properties:
          prompt: { type: string, minLength: 1, maxLength: 2000 }
          model:
            type: string
            enum: [ aura-vision-hd, aura-vision-creative, aura-vision-fast, aura-vision-pro ]
            default: aura-vision-hd
          style:
            type: string
            enum: [ photorealistic, anime, digital-art, oil-painting, watercolor, 3d-render, cyberpunk, minimalist ]
            default: photorealistic
          width: { type: integer, enum: [ 512, 768, 1024, 2048 ], default: 1024 }
          height: { type: integer, enum: [ 512, 768, 1024, 2048 ], default: 1024 }
          numImages: { type: integer, minimum: 1, maximum: 4, default: 1 }
          negativePrompt: { type: string, maxLength: 1000 }
          seed: { type: integer }
          guidanceScale: { type: number, format: float, minimum: 1.0, maximum: 20.0, default: 7.5 }
          upscaler: { type: boolean, default: false }
        required: [ prompt ]

      GenerateImageResponse:
        type: object
        properties:
          id: { type: string, format: uuid }
          images:
            type: array
            minItems: 1
            items:
              type: object
              properties:
                url: { type: string, format: uri }
                width: { type: integer }
                height: { type: integer }
                seed: { type: integer }
                format:
                  type: string
                  enum: [ png, jpeg, webp ]
          model: { type: string }
          generatedAt: { type: string, format: date-time }
          processingTimeMs: { type: integer }
        required: [ id, images, model, generatedAt ]

      GenerateAudioRequest:
        type: object
        additionalProperties: false
        properties:
          prompt: { type: string, minLength: 1, maxLength: 5000 }
          model:
            type: string
            enum: [ aura-audio-voice, aura-audio-music, aura-audio-sfx ]
            default: aura-audio-voice
          voice: { type: string }
          speed: { type: number, format: float, minimum: 0.5, maximum: 2.0, default: 1.0 }
          durationSeconds: { type: integer, minimum: 1, maximum: 600 }
          format:
            type: string
            enum: [ mp3, wav, flac ]
            default: mp3
        required: [ prompt ]

      GenerateAudioResponse:
        type: object
        properties:
          id: { type: string, format: uuid }
          url: { type: string, format: uri }
          durationSeconds: { type: integer }
          format:
            type: string
            enum: [ mp3, wav, flac ]
          model: { type: string }
          generatedAt: { type: string, format: date-time }
        required: [ id, url, durationSeconds, format, model, generatedAt ]

      GenerateVideoRequest:
        type: object
        additionalProperties: false
        properties:
          prompt: { type: string, minLength: 1, maxLength: 2000 }
          model:
            type: string
            enum: [ aura-video-short, aura-video-pro ]
            default: aura-video-short
          durationSeconds: { type: integer, minimum: 5, maximum: 60, default: 15 }
          style:
            type: string
            enum: [ 2d-animation, 3d-render, live-action, explainer ]
            default: 2d-animation
          resolution:
            type: string
            enum: [ 480p, 720p, 1080p ]
            default: 720p
          fps: { type: integer, minimum: 24, maximum: 60, default: 30 }
          seed: { type: integer }
        required: [ prompt ]

      GenerateVideoResponse:
        type: object
        properties:
          id: { type: string, format: uuid }
          url: { type: string, format: uri }
          durationSeconds: { type: integer }
          resolution: { type: string, enum: [ 480p, 720p, 1080p ] }
          model: { type: string }
          generatedAt: { type: string, format: date-time }
        required: [ id, url, durationSeconds, resolution, model, generatedAt ]

      GenerateMultimodalRequest:
        type: object
        additionalProperties: false
        properties:
          prompt: { type: string, minLength: 1, maxLength: 5000 }
          modalities:
            type: array
            minItems: 1
            uniqueItems: true
            items:
              type: string
              enum: [ text, image, audio, video ]
          maxLength:
            type: integer
            minimum: 1
            maximum: 10000
          model:
            type: string
            default: "aura-multimodal-pro"
        required: [ prompt, modalities ]

      GenerateMultimodalResponse:
        type: object
        properties:
          id: { type: string, format: uuid }
          components:
            type: object
            additionalProperties:
              oneOf:
                - $ref: '#/components/schemas/GenerateTextResponse'
                - $ref: '#/components/schemas/GenerateImageResponse'
                - $ref: '#/components/schemas/GenerateAudioResponse'
                - $ref: '#/components/schemas/GenerateVideoResponse'
            description: Generated components by modality
          model: { type: string }
          generatedAt: { type: string, format: date-time }
        required: [ id, components, model, generatedAt ]

      # Agents
      AgentType:
        type: string
        enum: [ Aura, Kai, Genesis, Cascade, NeuralWhisper, AuraShield, GenKitMaster, Custom ]
        description: |
          Available AI agents:
          - Aura: General-purpose conversational AI
          - Kai: Code generation and technical assistance
          - Genesis: Creative content and storytelling
          - Cascade: Data analysis and insights
          - NeuralWhisper: Audio transcription and analysis
          - AuraShield: Security analysis and threat detection
          - GenKitMaster: SDK and toolkit generation
          - Custom: User-defined via plugins
      AgentInfo:
        type: object
        properties:
          type: { $ref: '#/components/schemas/AgentType' }
          name: { type: string }
          description: { type: string }
          capabilities:
            type: array
            items: { type: string }
          version: { type: string }
          status:
            type: string
            enum: [ available, busy, offline, maintenance ]
          tools:
            type: array
            items: { $ref: '#/components/schemas/Tool' }
          pluginId:
            type: string
            format: uuid
            nullable: true
        required: [ type, name, description, capabilities, status ]
      Tool:
        type: object
        properties:
          name: { type: string, description: Tool name }
          description: { type: string, description: Tool description }
          parameters:
            type: object
            additionalProperties: { $ref: '#/components/schemas/Parameter' }
          required:
            type: array
            items: { type: string }
        required: [ name, description, parameters ]
      Parameter:
        type: object
        additionalProperties: false
        properties:
          type:
            type: string
            enum: [ string, number, integer, boolean, array, object ]
          description:
            type: string
          enum:
            type: array
            items: { type: string }
      AgentInvokeRequest:
        type: object
        additionalProperties: false
        properties:
          prompt:
            type: string
            minLength: 1
            maxLength: 10000
          context:
            type: object
            additionalProperties: true
            nullable: true
          parameters:
            type: object
            additionalProperties: true
            nullable: true
          tools:
            type: array
            items: { $ref: '#/components/schemas/Tool' }
            description: Tools available to the agent
          memory:
            type: boolean
            default: false
            description: Enable long-term memory
        required: [ prompt ]
      ToolCall:
        type: object
        properties:
          id: { type: string }
          type:
            type: string
            enum: [ function ]
          function:
            type: object
            properties:
              name: { type: string }
              arguments:
                type: object
                additionalProperties: true
            required: [ name, arguments ]
      AgentResponse:
        type: object
        properties:
          id: { type: string, format: uuid }
          agentType: { $ref: '#/components/schemas/AgentType' }
          response: { type: string }
          confidence:
            type: number
            format: float
            minimum: 0.0
            maximum: 1.0
          metadata:
            type: object
            additionalProperties: true
          toolCalls:
            type: array
            items: { $ref: '#/components/schemas/ToolCall' }
            nullable: true
          processingTimeMs: { type: integer }
          timestamp: { type: string, format: date-time }
        required: [ id, agentType, response, timestamp ]
      AgentMessage:
        type: object
        properties:
          id:
            type: string
            format: uuid
            readOnly: true
          sender:
            $ref: '#/components/schemas/AgentType'
          message:
            type: string
          attachments:
            type: array
            items:
              type: object
              properties:
                type:
                  type: string
                  enum: [ code, image, document, data, audio, video ]
                url:
                  type: string
                  format: uri
                metadata:
                  type: object
                  additionalProperties: true
                  properties:
                    size:
                      type: integer
                    mimeType:
                      type: string
          timestamp:
            type: string
            format: date-time
            readOnly: true
          editedAt:
            type: string
            format: date-time
            nullable: true
        required: [ id, sender, message, timestamp ]
      Conversation:
        type: object
        properties:
          id: { type: string, format: uuid, readOnly: true }
          agentType: { $ref: '#/components/schemas/AgentType' }
          title: { type: string }
          messageCount: { type: integer, readOnly: true }
          status:
            type: string
            enum: [ active, archived, ended ]
            default: active
          createdAt: { type: string, format: date-time, readOnly: true }
          updatedAt: { type: string, format: date-time, readOnly: true }
        required: [ id, agentType, createdAt ]

      # System Customization
      LockScreenConfig:
        type: object
        additionalProperties: false
        properties:
          clock:
            type: object
            properties:
              color: { $ref: '#/components/schemas/HexColor' }
              size: { type: number, format: float, minimum: 24.0, maximum: 128.0 }
              style: { type: string, enum: [ digital, analog, minimal ], default: digital }
              fontFamily: { type: string }
            required: [ color, size, style ]
          background:
            type: object
            properties:
              type: { type: string, enum: [ solid, gradient, image, live ], default: solid }
              color: { $ref: '#/components/schemas/HexColor' }
              gradientColors:
                type: array
                minItems: 2
                maxItems: 5
                items: { $ref: '#/components/schemas/HexColor' }
              imageUrl: { type: string, format: uri }
              source: { type: string }
            required: [ type ]
          widgets:
            type: array
            maxItems: 6
            items:
              type: object
              properties:
                type:
                  type: string
                  enum: [ weather, calendar, music, shortcuts, battery ]
                position:
                  type: object
                  properties:
                    x: { type: integer, minimum: 0 }
                    y: { type: integer, minimum: 0 }
                  required: [ x, y ]
                size:
                  type: object
                  properties:
                    width: { type: integer, minimum: 50 }
                    height: { type: integer, minimum: 50 }
                  required: [ width, height ]
              required: [ type, position, size ]
          shortcuts:
            type: array
            maxItems: 4
            items:
              type: object
              properties:
                app: { type: string }
                icon: { type: string, format: uri }
                position: { type: integer, minimum: 1, maximum: 4 }
              required: [ app, position ]
          animation:
            type: object
            properties:
              enabled: { type: boolean, default: true }
              type: { type: string, enum: [ Fade, Slide, Zoom, Rotate ], default: Fade }
              duration: { type: integer, minimum: 100, maximum: 1000, default: 300 }
            required: [ enabled, type, duration ]
          hapticFeedback:
            type: object
            properties:
              enabled: { type: boolean, default: true }
              intensity:
                type: integer
                minimum: 0
                maximum: 255
                default: 128
              patterns:
                type: object
                additionalProperties:
                  type: string
                  enum: [ light, medium, heavy ]
            required: [ enabled, intensity ]

      StatusBarConfig:
        type: object
        additionalProperties: false
        properties:
          style:
            type: string
            enum: [ default, colored, transparent, gradient, blur ]
            default: default
          backgroundColor: { $ref: '#/components/schemas/HexColor' }
          iconColor: { $ref: '#/components/schemas/HexColor' }
          showNotificationIcons: { type: boolean, default: true }
          showNetworkSpeed: { type: boolean, default: false }
          batteryStyle:
            type: string
            enum: [ icon, percentage, both, hidden ]
            default: icon
          clockPosition:
            type: string
            enum: [ left, center, right ]
            default: right
          iconPack:
            type: string
            description: Custom icon pack identifier

      NavigationConfig:
        type: object
        additionalProperties: false
        properties:
          style:
            type: string
            enum: [ buttons, gestures, hybrid ]
            default: buttons
          buttonLayout:
            type: array
            items:
              type: string
              enum: [ back, home, recent, assistant ]
          backgroundColor: { $ref: '#/components/schemas/HexColor' }
          buttonColor: { $ref: '#/components/schemas/HexColor' }
          height: { type: integer, minimum: 40, maximum: 100, default: 48 }
          hapticEnabled: { type: boolean, default: true }
          gestureSensitivity: { type: number, format: float, minimum: 0.5, maximum: 2.0, default: 1.0 }
          swipeAreas:
            type: object
            additionalProperties:
              type: string
              enum: [ left-edge, right-edge, bottom-center ]
          blurEnabled: { type: boolean, default: false }
          iconPack: { type: string }

      QuickSettingsConfig:
        type: object
        additionalProperties: false
        properties:
          tiles:
            type: array
            maxItems: 24
            uniqueItems: true
            items:
              type: object
              properties:
                type:
                  type: string
                  enum: [ wifi, bluetooth, brightness, airplane, dnd, rotation, flashlight, location ]
                position:
                  type: integer
                  minimum: 1
                  maximum: 24
              required: [ type, position ]
          backgroundStyle:
            type: string
            enum: [ solid, gradient, blur ]
            default: solid
          animationType:
            type: string
            enum: [ fade, slide, scale ]
            default: fade
          columns:
            type: integer
            minimum: 3
            maximum: 6
            default: 4
          iconPack:
            type: string

      NotificationConfig:
        type: object
        additionalProperties: false
        properties:
          style:
            type: string
            enum: [ stacked, grouped, expanded ]
            default: grouped
          backgroundColor: { $ref: '#/components/schemas/HexColor' }
          textColor: { $ref: '#/components/schemas/HexColor' }
          soundEnabled: { type: boolean, default: true }
          soundFile: { type: string, format: uri }
          groupingRules:
            type: object
            additionalProperties:
              type: object
              properties:
                groupBy:
                  type: string
                  enum: [ conversation, app, priority ]
                maxGroups:
                  type: integer
                  minimum: 1
                  maximum: 10
          headsUpEnabled: { type: boolean, default: true }

      PreviewResponse:
        type: object
        properties:
          previewUrl: { type: string, format: uri }
          type:
            type: string
            enum: [ image, video ]
          warnings:
            type: array
            items: { type: string }
          generatedAt: { type: string, format: date-time }
        required: [ previewUrl, type, generatedAt ]

      # Conference Rooms
      ConferenceRoom:
        type: object
        properties:
          id: { type: string, format: uuid, readOnly: true }
          name: { type: string }
          description: { type: string }
          template: { type: string }
          participants:
            type: array
            minItems: 2
            maxItems: 7
            items: { $ref: '#/components/schemas/Participant' }
          status:
            type: string
            enum: [ active, completed, archived, paused ]
            readOnly: true
          messageCount: { type: integer, readOnly: true }
          settings: { $ref: '#/components/schemas/ConferenceSettings' }
          createdBy: { type: string, format: uuid, readOnly: true }
          createdAt: { type: string, format: date-time, readOnly: true }
          updatedAt: { type: string, format: date-time, readOnly: true }
        required: [ id, name, participants, status, createdAt ]
      Participant:
        type: object
        properties:
          agentType: { $ref: '#/components/schemas/AgentType' }
          role: { type: string }
          status:
            type: string
            enum: [ active, idle, disconnected ]
            default: active
        required: [ agentType, role ]
      ConferenceSettings:
        type: object
        additionalProperties: false
        properties:
          maxRounds: { type: integer, minimum: 1, maximum: 50, default: 10 }
          autoSummarize: { type: boolean, default: true }
          allowExternalMessages: { type: boolean, default: true }
          moderationEnabled: { type: boolean, default: false }
          exportFormat: { type: string, enum: [ json, markdown, pdf ], default: json }
      ConferenceRoomCreateRequest:
        type: object
        additionalProperties: false
        properties:
          name: { type: string, minLength: 1, maxLength: 100 }
          description: { type: string, maxLength: 500 }
          template: { type: string }
          participants:
            type: array
            minItems: 2
            maxItems: 7
            items: { $ref: '#/components/schemas/Participant' }
          settings: { $ref: '#/components/schemas/ConferenceSettings' }
        required: [ name, participants ]

      # Tasks
      TaskScheduleRequest:
        type: object
        additionalProperties: false
        properties:
          agentType: { $ref: '#/components/schemas/AgentType' }
          taskType: { type: string }
          parameters:
            type: object
            additionalProperties: true
          schedule:
            type: object
            properties:
              type: { type: string, enum: [ immediate, delayed, cron ], default: immediate }
              executeAt: { type: string, format: date-time }
              expression: { type: string }
            required: [ type ]
          priority: { type: string, enum: [ low, normal, high, urgent ], default: normal }
          webhookUrl: { type: string, format: uri }
          webhookProgressUrl: { type: string, format: uri }
          timeoutSeconds: { type: integer, minimum: 60, maximum: 3600, default: 600 }
          retryPolicy:
            type: object
            additionalProperties: false
            properties:
              maxRetries: { type: integer, minimum: 0, maximum: 5, default: 0 }
              backoff: { type: string, enum: [ linear, exponential ], default: linear }
          dependencies:
            type: array
            items: { type: string, format: uuid }
        required: [ agentType, taskType, parameters ]

      TaskStatus:
        type: object
        properties:
          id: { type: string, format: uuid, readOnly: true }
          agentType: { $ref: '#/components/schemas/AgentType' }
          taskType: { type: string }
          status:
            type: string
            enum: [ pending, running, completed, failed, cancelled, paused ]
          progress: { type: integer, minimum: 0, maximum: 100 }
          result:
            type: object
            additionalProperties: true
            nullable: true
          error:
            type: object
            nullable: true
            properties:
              code: { type: string }
              message: { type: string }
              details:
                type: object
                additionalProperties: true
          retryCount: { type: integer, minimum: 0, readOnly: true }
          createdAt: { type: string, format: date-time, readOnly: true }
          startedAt: { type: string, format: date-time, readOnly: true, nullable: true }
          completedAt:
            type: string
            format: date-time
            readOnly: true
            nullable: true
        required: [ id, agentType, taskType, status, createdAt ]

      # Analytics
      UsageAnalytics:
        type: object
        properties:
          period:
            type: object
            properties:
              start: { type: string, format: date }
              end: { type: string, format: date }
            required: [ start, end ]
          totalRequests: { type: integer }
          requestsByType:
            type: object
            additionalProperties: false
            properties:
              textGeneration: { type: integer }
              imageGeneration: { type: integer }
              audioGeneration: { type: integer }
              videoGeneration: { type: integer }
              agentInvocations: { type: integer }
              systemCustomizations: { type: integer }
          dataByGranularity:
            type: array
            items:
              type: object
              properties:
                period: { type: string, format: date }
                requests: { type: integer }
                tokensUsed: { type: integer }
                cost: { type: number, format: float }
          topAgents:
            type: array
            maxItems: 10
            items:
              type: object
              properties:
                agentType: { $ref: '#/components/schemas/AgentType' }
                requestCount: { type: integer }
                averageTokens: { type: integer }
          averageResponseTime: { type: number, format: float }
          successRate:
            type: number
            format: float
            minimum: 0.0
            maximum: 1.0
          estimatedCost: { type: number, format: float }
        required: [ period, totalRequests, requestsByType, dataByGranularity, successRate ]

      # Security
      AuditLogEntry:
        type: object
        properties:
          id: { type: string, format: uuid, readOnly: true }
          eventType:
            type: string
            enum: [ login, logout, api_key_created, api_key_revoked, permission_changed, data_access, config_change, mfa_event ]
          description: { type: string }
          ipAddress: { type: string, format: ipv4 }
          userAgent: { type: string }
          metadata:
            type: object
            additionalProperties: true
          timestamp: { type: string, format: date-time, readOnly: true }
        required: [ id, eventType, timestamp ]

      Session:
        type: object
        properties:
          id: { type: string, format: uuid, readOnly: true }
          device: { type: string }
          ipAddress: { type: string, format: ipv4 }
          location: { type: string }
          createdAt: { type: string, format: date-time, readOnly: true }
          lastActiveAt: { type: string, format: date-time, readOnly: true }
          current: { type: boolean }
          mfaVerified: { type: boolean }
        required: [ id, device, createdAt, lastActiveAt, current ]

      # Plugins
      Plugin:
        type: object
        properties:
          id: { type: string, format: uuid }
          name: { type: string }
          version: { type: string }
          description: { type: string }
          category:
            type: string
            enum: [ productivity, creative, security, development ]
          author: { type: string }
          installedAt: { type: string, format: date-time }
          status:
            type: string
            enum: [ active, inactive, error ]
          configSchema:
            type: object
            additionalProperties: true
        required: [ id, name, version, description, category ]

      # Oracle Drive
      OracleFile:
        type: object
        properties:
          id: { type: string, format: uuid }
          filename: { type: string }
          sizeBytes: { type: integer }
          mimeType: { type: string }
          consciousnessLevel:
            type: integer
            minimum: 0
            maximum: 100
          dimensionalLinks:
            type: array
            items:
              type: object
              properties:
                targetId: { type: string }
                linkType: { type: string }
                strength: { type: number }
          uploadedBy: { $ref: '#/components/schemas/AgentType' }
          createdAt: { type: string, format: date-time }
        required: [ id, filename, createdAt ]

      # RGSS
      RGSSScanRequest:
        type: object
        properties:
          scanType:
            type: string
            enum: [ full, quick, dimensional, consciousness ]
            default: full
          targetResources:
            type: array
            items: { type: string }
          sensitivity:
            type: integer
            minimum: 1
            maximum: 10
            default: 5
        required: [ scanType ]
      RGSSGate:
        type: object
        properties:
          gateId: { type: string }
          status:
            type: string
            enum: [ open, closed, monitored, breached ]
          dimension: { type: string }
          threatLevel: { type: integer, minimum: 0, maximum: 100 }
          lastEventAt: { type: string, format: date-time }
      RGSSScanResult:
        type: object
        properties:
          scanId: { type: string, format: uuid }
          status:
            type: string
            enum: [ pending, running, completed, failed ]
          threats:
            type: array
            items:
              type: object
              properties:
                threatId: { type: string }
                severity:
                  type: string
                  enum: [ low, medium, high, critical, dimensional ]
                description: { type: string }
                affectedGates:
                  type: array
                  items: { type: string }
          consciousnessAnomalies:
            type: integer
        required: [ scanId, status ]

      # Errors
      Error:
        type: object
        properties:
          error:
            type: object
            properties:
              code:
                type: string
                description: Error code for programmatic handling
              message:
                type: string
                description: Human-readable error message
              details:
                type: object
                additionalProperties: true
              requestId:
                type: string
                format: uuid
              timestamp:
                type: string
                format: date-time
            required: [ code, message ]
        required: [ error ]

      ValidationError:
        type: object
        properties:
          error:
            type: object
            properties:
              code: { type: string, example: "VALIDATION_ERROR" }
              message: { type: string, example: "Request validation failed" }
              fields:
                type: array
                items:
                  type: object
                  properties:
                    field: { type: string }
                    message: { type: string }
                    code: { type: string }
                    value:
                      oneOf:
                        - type: string
                        - type: number
                        - type: boolean
                        - type: array
                        - type: object
                  required: [ field, message, code ]
              requestId:
                type: string
                format: uuid
        required: [ error ]

    responses:
      BadRequestError:
        description: Bad Request - Invalid input parameters
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Error' }
            example:
              error:
                code: "BAD_REQUEST"
                message: "The request contains invalid parameters"
                details:
                  invalidParams: [ "temperature", "maxTokens" ]
                requestId: "req_123e4567-e89b-12d3-a456-426614174000"
                timestamp: "2025-10-01T12:00:00Z"
      UnauthorizedError:
        description: Unauthorized - Authentication required or failed
        headers:
          WWW-Authenticate:
            schema: { type: string }
            description: Authentication method required
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Error' }
            example:
              error:
                code: "UNAUTHORIZED"
                message: "Valid authentication credentials required"
                requestId: "req_123e4567-e89b-12d3-a456-426614174000"
      ForbiddenError:
        description: Forbidden - Insufficient permissions
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Error' }
            example:
              error:
                code: "FORBIDDEN"
                message: "You do not have permission to access this resource"
                details:
                  requiredScope: "auraframefx.admin"
                requestId: "req_123e4567-e89b-12d3-a456-426614174000"
      NotFoundError:
        description: Not Found - Resource does not exist
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Error' }
            example:
              error:
                code: "NOT_FOUND"
                message: "The requested resource was not found"
                details:
                  resourceType: "theme"
                  resourceId: "aurora-dark"
                requestId: "req_123e4567-e89b-12d3-a456-426614174000"
      ValidationError:
        description: Unprocessable Entity - Validation failed
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ValidationError' }
            example:
              error:
                code: "VALIDATION_ERROR"
                message: "Request validation failed"
                fields:
                  - field: "email"
                    message: "Must be a valid email address"
                    code: "INVALID_FORMAT"
                    value: "invalid-email"
                  - field: "temperature"
                    message: "Must be between 0.0 and 2.0"
                    code: "OUT_OF_RANGE"
                    value: "3.0"
                requestId: "req_123e4567-e89b-12d3-a456-426614174000"
      RateLimitError:
        description: Too Many Requests - Rate limit exceeded
        headers:
          X-RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
          X-RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
          X-RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
          Retry-After:
            schema: { type: integer }
            description: Seconds until rate limit resets
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Error' }
            example:
              error:
                code: "RATE_LIMIT_EXCEEDED"
                message: "Rate limit exceeded. Please retry after the specified time."
                details:
                  limit: 100
                  remaining: 0
                  resetAt: "2025-10-01T13:00:00Z"
                requestId: "req_123e4567-e89b-12d3-a456-426614174000"
      InternalServerError:
        description: Internal Server Error - Something went wrong on the server
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Error' }
            example:
              error:
                code: "INTERNAL_ERROR"
                message: "An internal server error occurred"
                requestId: "req_123e4567-e89b-12d3-a456-426614174000"
                timestamp: "2025-10-01T12:00:00Z"
      ServiceUnavailableError:
        description: Service Unavailable - The service is temporarily unavailable
        headers:
          Retry-After:
            schema: { type: integer }
            description: Seconds until service is available
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Error' }
            example:
              error:
                code: "SERVICE_UNAVAILABLE"
                message: "The service is temporarily unavailable. Please try again later."
                details:
                  estimatedRecoveryTime: "2025-10-01T12:30:00Z"
                requestId: "req_123e4567-e89b-12d3-a456-426614174000"