kContainer.`writeReleaseAarMetadata`: TaskProvider<com.android.build.gradle.internal.tasks.AarMetadataTask>
        get() = named<com.android.build.gradle.internal.tasks.AarMetadataTask>("writeReleaseAarMetadata")
    


    /**
     * Provides the existing [checkReleaseAarMetadata][com.android.build.gradle.internal.tasks.CheckAarMetadataTask] task.
     */
    val TaskContainer.`checkReleaseAarMetadata`: TaskProvider<com.android.build.gradle.internal.tasks.CheckAarMetadataTask>
        get() = named<com.android.build.gradle.internal.tasks.CheckAarMetadataTask>("checkReleaseAarMetadata")
    


    /**
     * Provides the existing [bundleReleaseLocalLintAar][com.android.build.gradle.tasks.BundleAar] task.
     */
    val TaskContainer.`bundleReleaseLocalLintAar`: TaskProvider<com.android.build.gradle.tasks.BundleAar>
        get() = named<com.android.build.gradle.tasks.BundleAar>("bundleReleaseLocalLintAar")
    


    /**
     * Provides the existing [extractReleaseSupportedLocales][com.android.build.gradle.tasks.ExtractSupportedLocalesTask] task.
     */
    val TaskContainer.`extractReleaseSupportedLocales`: TaskProvider<com.android.build.gradle.tasks.ExtractSupportedLocalesTask>
        get() = named<com.android.build.gradle.tasks.ExtractSupportedLocalesTask>("extractReleaseSupportedLocales")
    


    /**
     * Provides the existing [bundleReleaseAar][com.android.build.gradle.tasks.BundleAar] task.
     */
    val TaskContainer.`bundleReleaseAar`: TaskProvider<com.android.build.gradle.tasks.BundleAar>
        get() = named<com.android.build.gradle.tasks.BundleAar>("bundleReleaseAar")
    


    /**
     * Provides the existing [assembleDebugAndroidTest][org.gradle.api.Task] task.
     */
    val TaskContainer.`assembleDebugAndroidTest`: TaskProvider<org.gradle.api.Task>
        get() = named<org.gradle.api.Task>("assembleDebugAndroidTest")
    


    /**
     * Provides the existing [preDebugAndroidTestBuild][com.android.build.gradle.internal.tasks.AndroidVariantTask] task.
     */
    val TaskContainer.`preDebugAndroidTestBuild`: TaskProvider<com.android.build.gradle.internal.tasks.AndroidVariantTask>
        get() = named<com.android.build.gradle.internal.tasks.AndroidVariantTask>("preDebugAndroidTestBuild")
    


    /**
     * Provides the existing [generateDebugAndroidTestSources][org.gradle.api.Task] task.
     */
    val TaskContainer.`generateDebugAndroidTestSources`: TaskProvider<org.gradle.api.Task>
        get() = named<org.gradle.api.Task>("generateDebugAndroidTestSources")
    


    /**
     * Provides the existing [generateDebugAndroidTestResources][com.android.build.gradle.internal.tasks.ValidateResourcesTask] task.
     */
    val TaskContainer.`generateDebugAndroidTestResources`: TaskProvider<com.android.build.gradle.internal.tasks.ValidateResourcesTask>
        get() = named<com.android.build.gradle.internal.tasks.ValidateResourcesTask>("generateDebugAndroidTestResources")
    


    /**
     * Provides the existing [generateDebugAndroidTestAssets][org.gradle.api.DefaultTask] task.
     */
    val TaskContainer.`generateDebugAndroidTestAssets`: TaskProvider<org.gradle.api.DefaultTask>
        get() = named<org.gradle.api.DefaultTask>("generateDebugAndroidTestAssets")
    


    /**
     * Provides the existing [compileDebugAndroidTestSources][org.gradle.api.Task] task.
     */
    val TaskContainer.`compileDebugAndroidTestSources`: TaskProvider<org.gradle.api.Task>
        get() = named<org.gradle.api.Task>("compileDebugAndroidTestSources")
    


    /**
     * Provides the existing [processDebugAndroidTestManifest][com.android.build.gradle.tasks.ProcessTestManifest] task.
     */
    val TaskContainer.`processDebugAndroidTestManifest`: TaskProvider<com.android.build.gradle.tasks.ProcessTestManifest>
        get() = named<com.android.build.gradle.tasks.ProcessTestManifest>("processDebugAndroidTestManifest")
    


    /**
     * Provides the existing [mergeDebugAndroidTestResources][com.android.build.gradle.tasks.MergeResources] task.
     */
    val TaskContainer.`mergeDebugAndroidTestResources`: TaskProvider<com.android.build.gradle.tasks.MergeResources>
        get() = named<com.android.build.gradle.tasks.MergeResources>("mergeDebugAndroidTestResources")
    


    /**
     * Provides the existing [mapDebugAndroidTestSourceSetPaths][com.android.build.gradle.tasks.MapSourceSetPathsTask] task.
     */
    val TaskContainer.`mapDebugAndroidTestSourceSetPaths`: TaskProvider<com.android.build.gradle.tasks.MapSourceSetPathsTask>
        get() = named<com.android.build.gradle.tasks.MapSourceSetPathsTask>("mapDebugAndroidTestSourceSetPaths")
    


    /**
     * Provides the existing [processDebugAndroidTestNavigationResources][com.android.build.gradle.internal.tasks.ProcessNavigationXmlTask] task.
     */
    val TaskContainer.`processDebugAndroidTestNavigationResources`: TaskProvider<com.android.build.gradle.internal.tasks.ProcessNavigationXmlTask>
        get() = named<com.android.build.gradle.internal.tasks.ProcessNavigationXmlTask>("processDebugAndroidTestNavigationResources")
    


    /**
     * Provides the existing [compileDebugAndroidTestNavigationResources][com.android.build.gradle.tasks.CompileNavigationXmlTask] task.
     */
    val TaskContainer.`compileDebugAndroidTestNavigationResources`: TaskProvider<com.android.build.gradle.tasks.CompileNavigationXmlTask>
        get() = named<com.android.build.gradle.tasks.CompileNavigationXmlTask>("compileDebugAndroidTestNavigationResources")
    


    /**
     * Provides the existing [packageDebugAndroidTestResources][com.android.build.gradle.tasks.MergeResources] task.
     */
    val TaskContainer.`packageDebugAndroidTestResources`: TaskProvider<com.android.build.gradle.tasks.MergeResources>
        get() = named<com.android.build.gradle.tasks.MergeResources>("packageDebugAndroidTestResources")
    


    /**
     * Provides the existing [mergeDebugAndroidTestAssets][com.android.build.gradle.tasks.MergeSourceSetFolders] task.
     */
    val TaskContainer.`mergeDebugAndroidTestAssets`: TaskProvider<com.android.build.gradle.tasks.MergeSourceSetFolders>
        get() = named<com.android.build.gradle.tasks.MergeSourceSetFolders>("mergeDebugAndroidTestAssets")
    


    /**
     * Provides the existing [compressDebugAndroidTestAssets][com.android.build.gradle.internal.tasks.CompressAssetsTask] task.
     */
    val TaskContainer.`compressDebugAndroidTestAssets`: TaskProvider<com.android.build.gradle.internal.tasks.CompressAssetsTask>
        get() = named<com.android.build.gradle.internal.tasks.CompressAssetsTask>("compressDebugAndroidTestAssets")
    


    /**
     * Provides the existing [checkDebugAndroidTestAarMetadata][com.android.build.gradle.internal.tasks.CheckAarMetadataTask] task.
     */
    val TaskContainer.`checkDebugAndroidTestAarMetadata`: TaskProvider<com.android.build.gradle.internal.tasks.CheckAarMetadataTask>
        get() = named<com.android.build.gradle.internal.tasks.CheckAarMetadataTask>("checkDebugAndroidTestAarMetadata")
    


    /**
     * Provides the existing [processDebugAndroidTestResources][com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask] task.
     */
    val TaskContainer.`processDebugAndroidTestResources`: TaskProvider<com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask>
        get() = named<com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask>("processDebugAndroidTestResources")
    


    /**
     * Provides the existing [parseDebugAndroidTestLocalResources][com.android.build.gradle.internal.res.ParseLibraryResourcesTask] task.
     */
    val TaskContainer.`parseDebugAndroidTestLocalResources`: TaskProvider<com.android.build.gradle.internal.res.ParseLibraryResourcesTask>
        get() = named<com.android.build.gradle.internal.res.ParseLibraryResourcesTask>("parseDebugAndroidTestLocalResources")
    


    /**
     * Provides the existing [generateDebugAndroidTestRFile][com.android.build.gradle.internal.res.GenerateLibraryRFileTask] task.
     */
    val TaskContainer.`generateDebugAndroidTestRFile`: TaskProvider<com.android.build.gradle.internal.res.GenerateLibraryRFileTask>
        get() = named<com.android.build.gradle.internal.res.GenerateLibraryRFileTask>("generateDebugAndroidTestRFile")
    


    /**
     * Provides the existing [processDebugAndroidTestJavaRes][com.android.build.gradle.internal.tasks.ProcessJavaResTask] task.
     */
    val TaskContainer.`processDebugAndroidTestJavaRes`: TaskProvider<com.android.build.gradle.internal.tasks.ProcessJavaResTask>
        get() = named<com.android.build.gradle.internal.tasks.ProcessJavaResTask>("processDebugAndroidTestJavaRes")
    


    /**
     * Provides the existing [mergeDebugAndroidTestJniLibFolders][com.android.build.gradle.tasks.MergeSourceSetFolders] task.
     */
    val TaskContainer.`mergeDebugAndroidTestJniLibFolders`: TaskProvider<com.android.build.gradle.tasks.MergeSourceSetFolders>
        get() = named<com.android.build.gradle.tasks.MergeSourceSetFolders>("mergeDebugAndroidTestJniLibFolders")
    


    /**
     * Provides the existing [mergeDebugAndroidTestNativeLibs][com.android.build.gradle.internal.tasks.MergeNativeLibsTask] task.
     */
    val TaskContainer.`mergeDebugAndroidTestNativeLibs`: TaskProvider<com.android.build.gradle.internal.tasks.MergeNativeLibsTask>
        get() = named<com.android.build.gradle.internal.tasks.MergeNativeLibsTask>("mergeDebugAndroidTestNativeLibs")
    


    /**
     * Provides the existing [javaPreCompileDebugAndroidTest][com.android.build.gradle.tasks.JavaPreCompileTask] task.
     */
    val TaskContainer.`javaPreCompileDebugAndroidTest`: TaskProvider<com.android.build.gradle.tasks.JavaPreCompileTask>
        get() = named<com.android.build.gradle.tasks.JavaPreCompileTask>("javaPreCompileDebugAndroidTest")
    


    /**
     * Provides the existing [compileDebugAndroidTestJavaWithJavac][org.gradle.api.tasks.compile.JavaCompile] task.
     */
    val TaskContainer.`compileDebugAndroidTestJavaWithJavac`: TaskProvider<org.gradle.api.tasks.compile.JavaCompile>
        get() = named<org.gradle.api.tasks.compile.JavaCompile>("compileDebugAndroidTestJavaWithJavac")
    


    /**
     * Provides the existing [mergeDebugAndroidTestGeneratedProguardFiles][com.android.build.gradle.internal.tasks.MergeFileTask] task.
     */
    val TaskContainer.`mergeDebugAndroidTestGeneratedProguardFiles`: TaskProvider<com.android.build.gradle.internal.tasks.MergeFileTask>
        get() = named<com.android.build.gradle.internal.tasks.MergeFileTask>("mergeDebugAndroidTestGeneratedProguardFiles")
    


    /**
     * Provides the existing [mergeDebugAndroidTestJavaResource][com.android.build.gradle.internal.tasks.MergeJavaResourceTask] task.
     */
    val TaskContainer.`mergeDebugAndroidTestJavaResource`: TaskProvider<com.android.build.gradle.internal.tasks.MergeJavaResourceTask>
        get() = named<com.android.build.gradle.internal.tasks.MergeJavaResourceTask>("mergeDebugAndroidTestJavaResource")
    


    /**
     * Provides the existing [checkDebugAndroidTestDuplicateClasses][com.android.build.gradle.internal.tasks.CheckDuplicateClassesTask] task.
     */
    val TaskContainer.`checkDebugAndroidTestDuplicateClasses`: TaskProvider<com.android.build.gradle.internal.tasks.CheckDuplicateClassesTask>
        get() = named<com.android.build.gradle.internal.tasks.CheckDuplicateClassesTask>("checkDebugAndroidTestDuplicateClasses")
    


    /**
     * Provides the existing [dexBuilderDebugAndroidTest][com.android.build.gradle.internal.tasks.DexArchiveBuilderTask] task.
     */
    val TaskContainer.`dexBuilderDebugAndroidTest`: TaskProvider<com.android.build.gradle.internal.tasks.DexArchiveBuilderTask>
        get() = named<com.android.build.gradle.internal.tasks.DexArchiveBuilderTask>("dexBuilderDebugAndroidTest")
    


    /**
     * Provides the existing [desugarDebugAndroidTestFileDependencies][com.android.build.gradle.internal.tasks.DexFileDependenciesTask] task.
     */
    val TaskContainer.`desugarDebugAndroidTestFileDependencies`: TaskProvider<com.android.build.gradle.internal.tasks.DexFileDependenciesTask>
        get() = named<com.android.build.gradle.internal.tasks.DexFileDependenciesTask>("desugarDebugAndroidTestFileDependencies")
    


    /**
     * Provides the existing [mergeExtDexDebugAndroidTest][com.android.build.gradle.internal.tasks.DexMergingTask] task.
     */
    val TaskContainer.`mergeExtDexDebugAndroidTest`: TaskProvider<com.android.build.gradle.internal.tasks.DexMergingTask>
        get() = named<com.android.build.gradle.internal.tasks.DexMergingTask>("mergeExtDexDebugAndroidTest")
    


    /**
     * Provides the existing [mergeProjectDexDebugAndroidTest][com.android.build.gradle.internal.tasks.DexMergingTask] task.
     */
    val TaskContainer.`mergeProjectDexDebugAndroidTest`: TaskProvider<com.android.build.gradle.internal.tasks.DexMergingTask>
        get() = named<com.android.build.gradle.internal.tasks.DexMergingTask>("mergeProjectDexDebugAndroidTest")
    


    /**
     * Provides the existing [mergeLibDexDebugAndroidTest][com.android.build.gradle.internal.tasks.DexMergingTask] task.
     */
    val TaskContainer.`mergeLibDexDebugAndroidTest`: TaskProvider<com.android.build.gradle.internal.tasks.DexMergingTask>
        get() = named<com.android.build.gradle.internal.tasks.DexMergingTask>("mergeLibDexDebugAndroidTest")
    


    /**
     * Provides the existing [mergeDebugAndroidTestGlobalSynthetics][com.android.build.gradle.internal.tasks.GlobalSyntheticsMergeTask] task.
     */
    val TaskContainer.`mergeDebugAndroidTestGlobalSynthetics`: TaskProvider<com.android.build.gradle.internal.tasks.GlobalSyntheticsMergeTask>
        get() = named<com.android.build.gradle.internal.tasks.GlobalSyntheticsMergeTask>("mergeDebugAndroidTestGlobalSynthetics")
    


    /**
     * Provides the existing [validateSigningDebugAndroidTest][com.android.build.gradle.internal.tasks.ValidateSigningTask] task.
     */
    val TaskContainer.`validateSigningDebugAndroidTest`: TaskProvider<com.android.build.gradle.internal.tasks.ValidateSigningTask>
        get() = named<com.android.build.gradle.internal.tasks.ValidateSigningTask>("validateSigningDebugAndroidTest")
    


    /**
     * Provides the existing [signingConfigWriterDebugAndroidTest][com.android.build.gradle.internal.tasks.SigningConfigWriterTask] task.
     */
    val TaskContainer.`signingConfigWriterDebugAndroidTest`: TaskProvider<com.android.build.gradle.internal.tasks.SigningConfigWriterTask>
        get() = named<com.android.build.gradle.internal.tasks.SigningConfigWriterTask>("signingConfigWriterDebugAndroidTest")
    


    /**
     * Provides the existing [writeDebugAndroidTestSigningConfigVersions][com.android.build.gradle.internal.tasks.SigningConfigVersionsWriterTask] task.
     */
    val TaskContainer.`writeDebugAndroidTestSigningConfigVersions`: TaskProvider<com.android.build.gradle.internal.tasks.SigningConfigVersionsWriterTask>
        get() = named<com.android.build.gradle.internal.tasks.SigningConfigVersionsWriterTask>("writeDebugAndroidTestSigningConfigVersions")
    


    /**
     * Provides the existing [stripDebugAndroidTestDebugSymbols][com.android.build.gradle.internal.tasks.StripDebugSymbolsTask] task.
     */
    val TaskContainer.`stripDebugAndroidTestDebugSymbols`: TaskProvider<com.android.build.gradle.internal.tasks.StripDebugSymbolsTask>
        get() = named<com.android.build.gradle.internal.tasks.StripDebugSymbolsTask>("stripDebugAndroidTestDebugSymbols")
    


    /**
     * Provides the existing [packageDebugAndroidTest][com.android.build.gradle.tasks.PackageApplication] task.
     */
    val TaskContainer.`packageDebugAndroidTest`: TaskProvider<com.android.build.gradle.tasks.PackageApplication>
        get() = named<com.android.build.gradle.tasks.PackageApplication>("packageDebugAndroidTest")
    


    /**
     * Provides the existing [createDebugAndroidTestApkListingFileRedirect][com.android.build.gradle.internal.tasks.ListingFileRedirectTask] task.
     */
    val TaskContainer.`createDebugAndroidTestApkListingFileRedirect`: TaskProvider<com.android.build.gradle.internal.tasks.ListingFileRedirectTask>
        get() = named<com.android.build.gradle.internal.tasks.ListingFileRedirectTask>("createDebugAndroidTestApkListingFileRedirect")
    


    /**
     * Provides the existing [installDebugAndroidTest][com.android.build.gradle.internal.tasks.InstallVariantTask] task.
     */
    val TaskContainer.`installDebugAndroidTest`: TaskProvider<com.android.build.gradle.internal.tasks.InstallVariantTask>
        get() = named<com.android.build.gradle.internal.tasks.InstallVariantTask>("installDebugAndroidTest")
    


    /**
     * Provides the existing [uninstallDebugAndroidTest][com.android.build.gradle.internal.tasks.UninstallTask] task.
     */
    val TaskContainer.`uninstallDebugAndroidTest`: TaskProvider<com.android.build.gradle.internal.tasks.UninstallTask>
        get() = named<com.android.build.gradle.internal.tasks.UninstallTask>("uninstallDebugAndroidTest")
    


    /**
     * Provides the existing [lintAnalyzeDebugAndroidTest][com.android.build.gradle.internal.lint.AndroidLintAnalysisTask] task.
     */
    val TaskContainer.`lintAnalyzeDebugAndroidTest`: TaskProvider<com.android.build.gradle.internal.lint.AndroidLintAnalysisTask>
        get() = named<com.android.build.gradle.internal.lint.AndroidLintAnalysisTask>("lintAnalyzeDebugAndroidTest")
    


    /**
     * Provides the existing [generateDebugAndroidTestLintModel][com.android.build.gradle.internal.lint.LintModelWriterTask] task.
     */
    val TaskContainer.`generateDebugAndroidTestLintModel`: TaskProvider<com.android.build.gradle.internal.lint.LintModelWriterTask>
        get() = named<com.android.build.gradle.internal.lint.LintModelWriterTask>("generateDebugAndroidTestLintModel")
    


    /**
     * Provides the existing [connectedDebugAndroidTest][com.android.build.gradle.internal.tasks.DeviceProviderInstrumentTestTask] task.
     */
    val TaskContainer.`connectedDebugAndroidTest`: TaskProvider<com.android.build.gradle.internal.tasks.DeviceProviderInstrumentTestTask>
        get() = named<com.android.build.gradle.internal.tasks.DeviceProviderInstrumentTestTask>("connectedDebugAndroidTest")
    


    /**
     * Provides the existing [assembleDebugUnitTest][org.gradle.api.Task] task.
     */
    val TaskContainer.`assembleDebugUnitTest`: TaskProvider<org.gradle.api.Task>
        get() = named<org.gradle.api.Task>("assembleDebugUnitTest")
    


    /**
     * Provides the existing [preDebugUnitTestBuild][com.android.build.gradle.internal.tasks.AndroidVariantTask] task.
     */
    val TaskContainer.`preDebugUnitTestBuild`: TaskProvider<com.android.build.gradle.internal.tasks.AndroidVariantTask>
        get() = named<com.android.build.gradle.internal.tasks.AndroidVariantTask>("preDebugUnitTestBuild")
    


    /**
     * Provides the existing [generateDebugUnitTestSources][org.gradle.api.Task] task.
     */
    val TaskContainer.`generateDebugUnitTestSources`: TaskProvider<org.gradle.api.Task>
        get() = named<org.gradle.api.Task>("generateDebugUnitTestSources")
    


    /**
     * Provides the existing [generateDebugUnitTestResources][com.android.build.gradle.internal.tasks.ValidateResourcesTask] task.
     */
    val TaskContainer.`generateDebugUnitTestResources`: TaskProvider<com.android.build.gradle.internal.tasks.ValidateResourcesTask>
        get() = named<com.android.build.gradle.internal.tasks.ValidateResourcesTask>("generateDebugUnitTestResources")
    


    /**
     * Provides the existing [generateDebugUnitTestAssets][org.gradle.api.DefaultTask] task.
     */
    val TaskContainer.`generateDebugUnitTestAssets`: TaskProvider<org.gradle.api.DefaultTask>
        get() = named<org.gradle.api.DefaultTask>("generateDebugUnitTestAssets")
    


    /**
     * Provides the existing [compileDebugUnitTestSources][org.gradle.api.Task] task.
     */
    val TaskContainer.`compileDebugUnitTestSources`: TaskProvider<org.gradle.api.Task>
        get() = named<org.gradle.api.Task>("compileDebugUnitTestSources")
    


    /**
     * Provides the existing [processDebugUnitTestJavaRes][com.android.build.gradle.internal.tasks.ProcessJavaResTask] task.
     */
    val TaskContainer.`processDebugUnitTestJavaRes`: TaskProvider<com.android.build.gradle.internal.tasks.ProcessJavaResTask>
        get() = named<com.android.build.gradle.internal.tasks.ProcessJavaResTask>("processDebugUnitTestJavaRes")
    


    /**
     * Provides the existing [generateDebugUnitTestStubRFile][com.android.build.gradle.internal.res.GenerateLibraryRFileTask] task.
     */
    val TaskContainer.`generateDebugUnitTestStubRFile`: TaskProvider<com.android.build.gradle.internal.res.GenerateLibraryRFileTask>
        get() = named<com.android.build.gradle.internal.res.GenerateLibraryRFileTask>("generateDebugUnitTestStubRFile")
    


    /**
     * Provides the existing [javaPreCompileDebugUnitTest][com.android.build.gradle.tasks.JavaPreCompileTask] task.
     */
    val TaskContainer.`javaPreCompileDebugUnitTest`: TaskProvider<com.android.build.gradle.tasks.JavaPreCompileTask>
        get() = named<com.android.build.gradle.tasks.JavaPreCompileTask>("javaPreCompileDebugUnitTest")
    


    /**
     * Provides the existing [compileDebugUnitTestJavaWithJavac][org.gradle.api.tasks.compile.JavaCompile] task.
     */
    val TaskContainer.`compileDebugUnitTestJavaWithJavac`: TaskProvider<org.gradle.api.tasks.compile.JavaCompile>
        get() = named<org.gradle.api.tasks.compile.JavaCompile>("compileDebugUnitTestJavaWithJavac")
    


    /**
     * Provides the existing [lintAnalyzeDebugUnitTest][com.android.build.gradle.internal.lint.AndroidLintAnalysisTask] task.
     */
    val TaskContainer.`lintAnalyzeDebugUnitTest`: TaskProvider<com.android.build.gradle.internal.lint.AndroidLintAnalysisTask>
        get() = named<com.android.build.gradle.internal.lint.AndroidLintAnalysisTask>("lintAnalyzeDebugUnitTest")
    


    /**
     * Provides the existing [generateDebugUnitTestLintModel][com.android.build.gradle.internal.lint.LintModelWriterTask] task.
     */
    val TaskContainer.`generateDebugUnitTestLintModel`: TaskProvider<com.android.build.gradle.internal.lint.LintModelWriterTask>
        get() = named<com.android.build.gradle.internal.lint.LintModelWriterTask>("generateDebugUnitTestLintModel")
    


    /**
     * Provides the existing [testDebugUnitTest][com.android.build.gradle.tasks.factory.AndroidUnitTest] task.
     */
    val TaskContainer.`testDebugUnitTest`: TaskProvider<com.android.build.gradle.tasks.factory.AndroidUnitTest>
        get() = named<com.android.build.gradle.tasks.factory.AndroidUnitTest>("testDebugUnitTest")
    


    /**
     * Provides the existing [lintDebug][com.android.build.gradle.internal.lint.AndroidLintTextOutputTask] task.
     */
    val TaskContainer.`lintDebug`: TaskProvider<com.android.build.gradle.internal.lint.AndroidLintTextOutputTask>
        get() = named<com.android.build.gradle.internal.lint.AndroidLintTextOutputTask>("lintDebug")
    


    /**
     * Provides the existing [generateDebugLintVitalModel][com.android.build.gradle.internal.lint.LintModelWriterTask] task.
     */
    val TaskContainer.`generateDebugLintVitalModel`: TaskProvider<com.android.build.gradle.internal.lint.LintModelWriterTask>
        get() = named<com.android.build.gradle.internal.lint.LintModelWriterTask>("generateDebugLintVitalModel")
    


    /**
     * Provides the existing [lintVitalAnalyzeDebug][com.android.build.gradle.internal.lint.AndroidLintAnalysisTask] task.
     */
    val TaskContainer.`lintVitalAnalyzeDebug`: TaskProvider<com.android.build.gradle.internal.lint.AndroidLintAnalysisTask>
        get() = named<com.android.build.gradle.internal.lint.AndroidLintAnalysisTask>("lintVitalAnalyzeDebug")
    


    /**
     * Provides the existing [writeDebugLintModelMetadata][com.android.build.gradle.internal.tasks.LintModelMetadataTask] task.
     */
    val TaskContainer.`writeDebugLintModelMetadata`: TaskProvider<com.android.build.gradle.internal.tasks.LintModelMetadataTask>
        get() = named<com.android.build.gradle.internal.tasks.LintModelMetadataTask>("writeDebugLintModelMetadata")
    


    /**
     * Provides the existing [generateDebugLintModel][com.android.build.gradle.internal.lint.LintModelWriterTask] task.
     */
    val TaskContainer.`generateDebugLintModel`: TaskProvider<com.android.build.gradle.internal.lint.LintModelWriterTask>
        get() = named<com.android.build.gradle.internal.lint.LintModelWriterTask>("generateDebugLintModel")
    


    /**
     * Provides the existing [lintAnalyzeDebug][com.android.build.gradle.internal.lint.AndroidLintAnalysisTask] task.
     */
    val TaskContainer.`lintAnalyzeDebug`: TaskProvider<com.android.build.gradle.internal.lint.AndroidLintAnalysisTask>
        get() = named<com.android.build.gradle.internal.lint.AndroidLintAnalysisTask>("lintAnalyzeDebug")
    


    /**
     * Provides the existing [generateDebugLintReportModel][com.android.build.gradle.internal.lint.LintModelWriterTask] task.
     */
    val TaskContainer.`generateDebugLintReportModel`: TaskProvider<com.android.build.gradle.internal.lint.LintModelWriterTask>
        get() = named<com.android.build.gradle.internal.lint.LintModelWriterTask>("generateDebugLintReportModel")
    


    /**
     * Provides the existing [updateLintBaselineDebug][com.android.build.gradle.internal.lint.AndroidLintTask] task.
     */
    val TaskContainer.`updateLintBaselineDebug`: TaskProvider<com.android.build.gradle.internal.lint.AndroidLintTask>
        get() = named<com.android.build.gradle.internal.lint.AndroidLintTask>("updateLintBaselineDebug")
    


    /**
     * Provides the existing [lintReportDebug][com.android.build.gradle.internal.lint.AndroidLintTask] task.
     */
    val TaskContainer.`lintReportDebug`: TaskProvider<com.android.build.gradle.internal.lint.AndroidLintTask>
        get() = named<com.android.build.gradle.internal.lint.AndroidLintTask>("lintReportDebug")
    


    /**
     * Provides the existing [lintFixDebug][com.android.build.gradle.internal.lint.AndroidLintTask] task.
     */
    val TaskContainer.`lintFixDebug`: TaskProvider<com.android.build.gradle.internal.lint.AndroidLintTask>
        get() = named<com.android.build.gradle.internal.lint.AndroidLintTask>("lintFixDebug")
    


    /**
     * Provides the existing [lintRelease][com.android.build.gradle.internal.lint.AndroidLintTextOutputTask] task.
     */
    val TaskContainer.`lintRelease`: TaskProvider<com.android.build.gradle.internal.lint.AndroidLintTextOutputTask>
        get() = named<com.android.build.gradle.internal.lint.AndroidLintTextOutputTask>("lintRelease")
    


    /**
     * Provides the existing [generateReleaseLintVitalModel][com.android.build.gradle.internal.lint.LintModelWriterTask] task.
     */
    val TaskContainer.`generateReleaseLintVitalModel`: TaskProvider<com.android.build.gradle.internal.lint.LintModelWriterTask>
        get() = named<com.android.build.gradle.internal.lint.LintModelWriterTask>("generateReleaseLintVitalModel")
    


    /**
     * Provides the existing [lintVitalAnalyzeRelease][com.android.build.gradle.internal.lint.AndroidLintAnalysisTask] task.
     */
    val TaskContainer.`lintVitalAnalyzeRelease`: TaskProvider<com.android.build.gradle.internal.lint.AndroidLintAnalysisTask>
        get() = named<com.android.build.gradle.internal.lint.AndroidLintAnalysisTask>("lintVitalAnalyzeRelease")
    


    /**
     * Provides the existing [writeReleaseLintModelMetadata][com.android.build.gradle.internal.tasks.LintModelMetadataTask] task.
     */
    val TaskContainer.`writeReleaseLintModelMetadata`: TaskProvider<com.android.build.gradle.internal.tasks.LintModelMetadataTask>
        get() = named<com.android.build.gradle.internal.tasks.LintModelMetadataTask>("writeReleaseLintModelMetadata")
    


    /**
     * Provides the existing [generateReleaseLintModel][com.android.build.gradle.internal.lint.LintModelWriterTask] task.
     */
    val TaskContainer.`generateReleaseLintModel`: TaskProvider<com.android.build.gradle.internal.lint.LintModelWriterTask>
        get() = named<com.android.build.gradle.internal.lint.LintModelWriterTask>("generateReleaseLintModel")
    


    /**
     * Provides the existing [lintAnalyzeRelease][com.android.build.gradle.internal.lint.AndroidLintAnalysisTask] task.
     */
    val TaskContainer.`lintAnalyzeRelease`: TaskProvider<com.android.build.gradle.internal.lint.AndroidLintAnalysisTask>
        get() = named<com.android.build.gradle.internal.lint.AndroidLintAnalysisTask>("lintAnalyzeRelease")
    


    /**
     * Provides the existing [generateReleaseLintReportModel][com.android.build.gradle.internal.lint.LintModelWriterTask] task.
     */
    val TaskContainer.`generateReleaseLintReportModel`: TaskProvider<com.android.build.gradle.internal.lint.LintModelWriterTask>
        get() = named<com.android.build.gradle.internal.lint.LintModelWriterTask>("generateReleaseLintReportModel")
    


    /**
     * Provides the existing [updateLintBaselineRelease][com.android.build.gradle.internal.lint.AndroidLintTask] task.
     */
    val TaskContainer.`updateLintBaselineRelease`: TaskProvider<com.android.build.gradle.internal.lint.AndroidLintTask>
        get() = named<com.android.build.gradle.internal.lint.AndroidLintTask>("updateLintBaselineRelease")
    


    /**
     * Provides the existing [lintReportRelease][com.android.build.gradle.internal.lint.AndroidLintTask] task.
     */
    val TaskContainer.`lintReportRelease`: TaskProvider<com.android.build.gradle.internal.lint.AndroidLintTask>
        get() = named<com.android.build.gradle.internal.lint.AndroidLintTask>("lintReportRelease")
    


    /**
     * Provides the existing [lintFixRelease][com.android.build.gradle.internal.lint.AndroidLintTask] task.
     */
    val TaskContainer.`lintFixRelease`: TaskProvider<com.android.build.gradle.internal.lint.AndroidLintTask>
        get() = named<com.android.build.gradle.internal.lint.AndroidLintTask>("lintFixRelease")
    


    /**
     * Provides the existing [signingReport][com.android.build.gradle.internal.tasks.SigningReportTask] task.
     */
    val TaskContainer.`signingReport`: TaskProvider<com.android.build.gradle.internal.tasks.SigningReportTask>
        get() = named<com.android.build.gradle.internal.tasks.SigningReportTask>("signingReport")
    


    /**
     * Provides the existing [analyzeDebugDependencies][com.android.build.gradle.tasks.AnalyzeDependenciesTask] task.
     */
    val TaskContainer.`analyzeDebugDependencies`: TaskProvider<com.android.build.gradle.tasks.AnalyzeDependenciesTask>
        get() = named<com.android.build.gradle.tasks.AnalyzeDependenciesTask>("analyzeDebugDependencies")
    


    /**
     * Provides the existing [analyzeReleaseDependencies][com.android.build.gradle.tasks.AnalyzeDependenciesTask] task.
     */
    val TaskContainer.`analyzeReleaseDependencies`: TaskProvider<com.android.build.gradle.tasks.AnalyzeDependenciesTask>
        get() = named<com.android.build.gradle.tasks.AnalyzeDependenciesTask>("analyzeReleaseDependencies")
    


    /**
     * Provides the existing [analyzeDebugAndroidTestDependencies][com.android.build.gradle.tasks.AnalyzeDependenciesTask] task.
     */
    val TaskContainer.`analyzeDebugAndroidTestDependencies`: TaskProvider<com.android.build.gradle.tasks.AnalyzeDependenciesTask>
        get() = named<com.android.build.gradle.tasks.AnalyzeDependenciesTask>("analyzeDebugAndroidTestDependencies")
    


    /**
     * Provides the existing [analyzeDebugUnitTestDependencies][com.android.build.gradle.tasks.AnalyzeDependenciesTask] task.
     */
    val TaskContainer.`analyzeDebugUnitTestDependencies`: TaskProvider<com.android.build.gradle.tasks.AnalyzeDependenciesTask>
        get() = named<com.android.build.gradle.tasks.AnalyzeDependenciesTask>("analyzeDebugUnitTestDependencies")
    


    /**
     * Provides the existing [checkJetifier][com.android.build.gradle.internal.tasks.CheckJetifierTask] task.
     */
    val TaskContainer.`checkJetifier`: TaskProvider<com.android.build.gradle.internal.tasks.CheckJetifierTask>
        get() = named<com.android.build.gradle.internal.tasks.CheckJetifierTask>("checkJetifier")
    


    /**
     * Provides the existing [configureCMakeDebug[armeabi-v7a]][com.android.build.gradle.tasks.ExternalNativeBuildJsonTask] task.
     */
    val TaskContainer.`configureCMakeDebug[armeabi-v7a]`: TaskProvider<com.android.build.gradle.tasks.ExternalNativeBuildJsonTask>
        get() = named<com.android.build.gradle.tasks.ExternalNativeBuildJsonTask>("configureCMakeDebug[armeabi-v7a]")
    


    /**
     * Provides the existing [configureCMakeDebug[arm64-v8a]][com.android.build.gradle.tasks.ExternalNativeBuildJsonTask] task.
     */
    val TaskContainer.`configureCMakeDebug[arm64-v8a]`: TaskProvider<com.android.build.gradle.tasks.ExternalNativeBuildJsonTask>
        get() = named<com.android.build.gradle.tasks.ExternalNativeBuildJsonTask>("configureCMakeDebug[arm64-v8a]")
    


    /**
     * Provides the existing [configureCMakeDebug[x86]][com.android.build.gradle.tasks.ExternalNativeBuildJsonTask] task.
     */
    val TaskContainer.`configureCMakeDebug[x86]`: TaskProvider<com.android.build.gradle.tasks.ExternalNativeBuildJsonTask>
        get() = named<com.android.build.gradle.tasks.ExternalNativeBuildJsonTask>("configureCMakeDebug[x86]")
    


    /**
     * Provides the existing [configureCMakeDebug[x86_64]][com.android.build.gradle.tasks.ExternalNativeBuildJsonTask] task.
     */
    val TaskContainer.`configureCMakeDebug[x86_64]`: TaskProvider<com.android.build.gradle.tasks.ExternalNativeBuildJsonTask>
        get() = named<com.android.build.gradle.tasks.ExternalNativeBuildJsonTask>("configureCMakeDebug[x86_64]")
    


    /**
     * Provides the existing [configureCMakeRelWithDebInfo[armeabi-v7a]][com.android.build.gradle.tasks.ExternalNativeBuildJsonTask] task.
     */
    val TaskContainer.`configureCMakeRelWithDebInfo[armeabi-v7a]`: TaskProvider<com.android.build.gradle.tasks.ExternalNativeBuildJsonTask>
        get() = named<com.android.build.gradle.tasks.ExternalNativeBuildJsonTask>("configureCMakeRelWithDebInfo[armeabi-v7a]")
    


    /**
     * Provides the existing [configureCMakeRelWithDebInfo[arm64-v8a]][com.android.build.gradle.tasks.ExternalNativeBuildJsonTask] task.
     */
    val TaskContainer.`configureCMakeRelWithDebInfo[arm64-v8a]`: TaskProvider<com.android.build.gradle.tasks.ExternalNativeBuildJsonTask>
        get() = named<com.android.build.gradle.tasks.ExternalNativeBuildJsonTask>("configureCMakeRelWithDebInfo[arm64-v8a]")
    


    /**
     * Provides the existing [configureCMakeRelWithDebInfo[x86]][com.android.build.gradle.tasks.ExternalNativeBuildJsonTask] task.
     */
    val TaskContainer.`configureCMakeRelWithDebInfo[x86]`: TaskProvider<com.android.build.gradle.tasks.ExternalNativeBuildJsonTask>
        get() = named<com.android.build.gradle.tasks.ExternalNativeBuildJsonTask>("configureCMakeRelWithDebInfo[x86]")
    


    /**
     * Provides the existing [configureCMakeRelWithDebInfo[x86_64]][com.android.build.gradle.tasks.ExternalNativeBuildJsonTask] task.
     */
    val TaskContainer.`configureCMakeRelWithDebInfo[x86_64]`: TaskProvider<com.android.build.gradle.tasks.ExternalNativeBuildJsonTask>
        get() = named<com.android.build.gradle.tasks.ExternalNativeBuildJsonTask>("configureCMakeRelWithDebInfo[x86_64]")
    


    /**
     * Provides the existing [configureCMakeDebug][org.gradle.api.DefaultTask] task.
     */
    val TaskContainer.`configureCMakeDebug`: TaskProvider<org.gradle.api.DefaultTask>
        get() = named<org.gradle.api.DefaultTask>("configureCMakeDebug")
    


    /**
     * Provides the existing [configureCMakeRelWithDebInfo][org.gradle.api.DefaultTask] task.
     */
    val TaskContainer.`configureCMakeRelWithDebInfo`: TaskProvider<org.gradle.api.DefaultTask>
        get() = named<org.gradle.api.DefaultTask>("configureCMakeRelWithDebInfo")
    


    /**
     * Provides the existing [buildCMakeDebug[armeabi-v7a]][com.android.build.gradle.tasks.ExternalNativeBuildTask] task.
     */
    val TaskContainer.`buildCMakeDebug[armeabi-v7a]`: TaskProvider<com.android.build.gradle.tasks.ExternalNativeBuildTask>
        get() = named<com.android.build.gradle.tasks.ExternalNativeBuildTask>("buildCMakeDebug[armeabi-v7a]")
    


    /**
     * Provides the existing [buildCMakeDebug[arm64-v8a]][com.android.build.gradle.tasks.ExternalNativeBuildTask] task.
     */
    val TaskContainer.`buildCMakeDebug[arm64-v8a]`: TaskProvider<com.android.build.gradle.tasks.ExternalNativeBuildTask>
        get() = named<com.android.build.gradle.tasks.ExternalNativeBuildTask>("buildCMakeDebug[arm64-v8a]")
    


    /**
     * Provides the existing [buildCMakeDebug[x86]][com.android.build.gradle.tasks.ExternalNativeBuildTask] task.
     */
    val TaskContainer.`buildCMakeDebug[x86]`: TaskProvider<com.android.build.gradle.tasks.ExternalNativeBuildTask>
        get() = named<com.android.build.gradle.tasks.ExternalNativeBuildTask>("buildCMakeDebug[x86]")
    


    /**
     * Provides the existing [buildCMakeDebug[x86_64]][com.android.build.gradle.tasks.ExternalNativeBuildTask] task.
     */
    val TaskContainer.`buildCMakeDebug[x86_64]`: TaskProvider<com.android.build.gradle.tasks.ExternalNativeBuildTask>
        get() = named<com.android.build.gradle.tasks.ExternalNativeBuildTask>("buildCMakeDebug[x86_64]")
    


    /**
     * Provides the existing [buildCMakeRelWithDebInfo[armeabi-v7a]][com.android.build.gradle.tasks.ExternalNativeBuildTask] task.
     */
    val TaskContainer.`buildCMakeRelWithDebInfo[armeabi-v7a]`: TaskProvider<com.android.build.gradle.tasks.ExternalNativeBuildTask>
        get() = named<com.android.build.gradle.tasks.ExternalNativeBuildTask>("buildCMakeRelWithDebInfo[armeabi-v7a]")
    


    /**
     * Provides the existing [buildCMakeRelWithDebInfo[arm64-v8a]][com.android.build.gradle.tasks.ExternalNativeBuildTask] task.
     */
    val TaskContainer.`buildCMakeRelWithDebInfo[arm64-v8a]`: TaskProvider<com.android.build.gradle.tasks.ExternalNativeBuildTask>
        get() = named<com.android.build.gradle.tasks.ExternalNativeBuildTask>("buildCMakeRelWithDebInfo[arm64-v8a]")
    


    /**
     * Provides the existing [buildCMakeRelWithDebInfo[x86]][com.android.build.gradle.tasks.ExternalNativeBuildTask] task.
     */
    val TaskContainer.`buildCMakeRelWithDebInfo[x86]`: TaskProvider<com.android.build.gradle.tasks.ExternalNativeBuildTask>
        get() = named<com.android.build.gradle.tasks.ExternalNativeBuildTask>("buildCMakeRelWithDebInfo[x86]")
    


    /**
     * Provides the existing [buildCMakeRelWithDebInfo[x86_64]][com.android.build.gradle.tasks.ExternalNativeBuildTask] task.
     */
    val TaskContainer.`buildCMakeRelWithDebInfo[x86_64]`: TaskProvider<com.android.build.gradle.tasks.ExternalNativeBuildTask>
        get() = named<com.android.build.gradle.tasks.ExternalNativeBuildTask>("buildCMakeRelWithDebInfo[x86_64]")
    


    /**
     * Provides the existing [buildCMakeDebug][org.gradle.api.DefaultTask] task.
     */
    val TaskContainer.`buildCMakeDebug`: TaskProvider<org.gradle.api.DefaultTask>
        get() = named<org.gradle.api.DefaultTask>("buildCMakeDebug")
    


    /**
     * Provides the existing [buildCMakeRelWithDebInfo][org.gradle.api.DefaultTask] task.
     */
    val TaskContainer.`buildCMakeRelWithDebInfo`: TaskProvider<org.gradle.api.DefaultTask>
        get() = named<org.gradle.api.DefaultTask>("buildCMakeRelWithDebInfo")
    


    /**
     * Provides the existing [generateJsonModelDebug][org.gradle.api.DefaultTask] task.
     */
    val TaskContainer.`generateJsonModelDebug`: TaskProvider<org.gradle.api.DefaultTask>
        get() = named<org.gradle.api.DefaultTask>("generateJsonModelDebug")
    


    /**
     * Provides the existing [generateJsonModelRelease][org.gradle.api.DefaultTask] task.
     */
    val TaskContainer.`generateJsonModelRelease`: TaskProvider<org.gradle.api.DefaultTask>
        get() = named<org.gradle.api.DefaultTask>("generateJsonModelRelease")
    


    /**
     * Provides the existing [externalNativeBuildDebug][com.android.build.gradle.tasks.ExternalNativeBuildTask] task.
     */
    val TaskContainer.`externalNativeBuildDebug`: TaskProvider<com.android.build.gradle.tasks.ExternalNativeBuildTask>
        get() = named<com.android.build.gradle.tasks.ExternalNativeBuildTask>("externalNativeBuildDebug")
    


    /**
     * Provides the existing [externalNativeBuildCleanDebug][com.android.build.gradle.tasks.ExternalNativeCleanTask] task.
     */
    val TaskContainer.`externalNativeBuildCleanDebug`: TaskProvider<com.android.build.gradle.tasks.ExternalNativeCleanTask>
        get() = named<com.android.build.gradle.tasks.ExternalNativeCleanTask>("externalNativeBuildCleanDebug")
    


    /**
     * Provides the existing [externalNativeBuildRelease][com.android.build.gradle.tasks.ExternalNativeBuildTask] task.
     */
    val TaskContainer.`externalNativeBuildRelease`: TaskProvider<com.android.build.gradle.tasks.ExternalNativeBuildTask>
        get() = named<com.android.build.gradle.tasks.ExternalNativeBuildTask>("externalNativeBuildRelease")
    


    /**
     * Provides the existing [externalNativeBuildCleanRelease][com.android.build.gradle.tasks.ExternalNativeCleanTask] task.
     */
    val TaskContainer.`externalNativeBuildCleanRelease`: TaskProvider<com.android.build.gradle.tasks.ExternalNativeCleanTask>
        get() = named<com.android.build.gradle.tasks.ExternalNativeCleanTask>("externalNativeBuildCleanRelease")
    


    /**
     * Provides the existing [debug][com.android.build.gradle.api.BaseVariantOutput] element.
     */
    @Suppress("deprecation")
    @Deprecated("Deprecated in Java", level = DeprecationLevel.WARNING)
    val org.gradle.api.NamedDomainObjectContainer<com.android.build.gradle.api.BaseVariantOutput>.`debug`: NamedDomainObjectProvider<com.android.build.gradle.api.BaseVariantOutput>
        get() = named<com.android.build.gradle.api.BaseVariantOutput>("debug")
    


    /**
     * Provides the existing [debug-androidTest][com.android.build.gradle.api.BaseVariantOutput] element.
     */
    @Suppress("deprecation")
    @Deprecated("Deprecated in Java", level = DeprecationLevel.WARNING)
    val org.gradle.api.NamedDomainObjectContainer<com.android.build.gradle.api.BaseVariantOutput>.`debug-androidTest`: NamedDomainObjectProvider<com.android.build.gradle.api.BaseVariantOutput>
        get() = named<com.android.build.gradle.api.BaseVariantOutput>("debug-androidTest")
    


    /**
     * Provides the existing [release][com.android.build.gradle.api.BaseVariantOutput] element.
     */
    @Suppress("deprecation")
    @Deprecated("Deprecated in Java", level = DeprecationLevel.WARNING)
    val org.gradle.api.NamedDomainObjectContainer<com.android.build.gradle.api.BaseVariantOutput>.`release`: NamedDomainObjectProvider<com.android.build.gradle.api.BaseVariantOutput>
        get() = named<com.android.build.gradle.api.BaseVariantOutput>("release")
    


    /**
     * Provides the existing [androidJdkImage][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`androidJdkImage`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("androidJdkImage")
    


    /**
     * Provides the existing [androidTestAnnotationProcessor][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`androidTestAnnotationProcessor`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("androidTestAnnotationProcessor")
    


    /**
     * Provides the existing [androidTestCompileOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`androidTestCompileOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("androidTestCompileOnly")
    


    /**
     * Provides the existing [androidTestDebugAnnotationProcessor][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`androidTestDebugAnnotationProcessor`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("androidTestDebugAnnotationProcessor")
    


    /**
     * Provides the existing [androidTestDebugCompileOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`androidTestDebugCompileOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("androidTestDebugCompileOnly")
    


    /**
     * Provides the existing [androidTestDebugImplementation][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`androidTestDebugImplementation`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("androidTestDebugImplementation")
    


    /**
     * Provides the existing [androidTestDebugRuntimeOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`androidTestDebugRuntimeOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("androidTestDebugRuntimeOnly")
    


    /**
     * Provides the existing [androidTestImplementation][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`androidTestImplementation`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("androidTestImplementation")
    


    /**
     * Provides the existing [androidTestReleaseAnnotationProcessor][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`androidTestReleaseAnnotationProcessor`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("androidTestReleaseAnnotationProcessor")
    


    /**
     * Provides the existing [androidTestReleaseCompileOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`androidTestReleaseCompileOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("androidTestReleaseCompileOnly")
    


    /**
     * Provides the existing [androidTestReleaseImplementation][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`androidTestReleaseImplementation`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("androidTestReleaseImplementation")
    


    /**
     * Provides the existing [androidTestReleaseRuntimeOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`androidTestReleaseRuntimeOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("androidTestReleaseRuntimeOnly")
    


    /**
     * Provides the existing [androidTestRuntimeOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`androidTestRuntimeOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("androidTestRuntimeOnly")
    


    /**
     * Provides the existing [androidTestUtil][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`androidTestUtil`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("androidTestUtil")
    


    /**
     * Provides the existing [annotationProcessor][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`annotationProcessor`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("annotationProcessor")
    


    /**
     * Provides the existing [api][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`api`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("api")
    


    /**
     * Provides the existing [archives][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`archives`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("archives")
    


    /**
     * Provides the existing [compileOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`compileOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("compileOnly")
    


    /**
     * Provides the existing [compileOnlyApi][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`compileOnlyApi`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("compileOnlyApi")
    


    /**
     * Provides the existing [coreLibraryDesugaring][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`coreLibraryDesugaring`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("coreLibraryDesugaring")
    


    /**
     * Provides the existing [debugAndroidTestAnnotationProcessorClasspath][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`debugAndroidTestAnnotationProcessorClasspath`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("debugAndroidTestAnnotationProcessorClasspath")
    


    /**
     * Provides the existing [debugAndroidTestCompileClasspath][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`debugAndroidTestCompileClasspath`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("debugAndroidTestCompileClasspath")
    


    /**
     * Provides the existing [debugAndroidTestRuntimeClasspath][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`debugAndroidTestRuntimeClasspath`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("debugAndroidTestRuntimeClasspath")
    


    /**
     * Provides the existing [debugAnnotationProcessor][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`debugAnnotationProcessor`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("debugAnnotationProcessor")
    


    /**
     * Provides the existing [debugAnnotationProcessorClasspath][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`debugAnnotationProcessorClasspath`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("debugAnnotationProcessorClasspath")
    


    /**
     * Provides the existing [debugApi][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`debugApi`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("debugApi")
    


    /**
     * Provides the existing [debugApiElements][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`debugApiElements`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("debugApiElements")
    


    /**
     * Provides the existing [debugCompileClasspath][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`debugCompileClasspath`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("debugCompileClasspath")
    


    /**
     * Provides the existing [debugCompileOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`debugCompileOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("debugCompileOnly")
    


    /**
     * Provides the existing [debugCompileOnlyApi][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`debugCompileOnlyApi`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("debugCompileOnlyApi")
    


    /**
     * Provides the existing [debugImplementation][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`debugImplementation`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("debugImplementation")
    


    /**
     * Provides the existing [debugRuntimeClasspath][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`debugRuntimeClasspath`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("debugRuntimeClasspath")
    


    /**
     * Provides the existing [debugRuntimeElements][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`debugRuntimeElements`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("debugRuntimeElements")
    


    /**
     * Provides the existing [debugRuntimeOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`debugRuntimeOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("debugRuntimeOnly")
    


    /**
     * Provides the existing [debugUnitTestAnnotationProcessorClasspath][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`debugUnitTestAnnotationProcessorClasspath`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("debugUnitTestAnnotationProcessorClasspath")
    


    /**
     * Provides the existing [debugUnitTestCompileClasspath][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`debugUnitTestCompileClasspath`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("debugUnitTestCompileClasspath")
    


    /**
     * Provides the existing [debugUnitTestRuntimeClasspath][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`debugUnitTestRuntimeClasspath`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("debugUnitTestRuntimeClasspath")
    


    /**
     * Provides the existing [default][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`default`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("default")
    


    /**
     * Provides the existing [implementation][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`implementation`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("implementation")
    


    /**
     * Provides the existing [ksp][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`ksp`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("ksp")
    


    /**
     * Provides the existing [kspAndroidTest][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`kspAndroidTest`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("kspAndroidTest")
    


    /**
     * Provides the existing [kspAndroidTestDebug][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`kspAndroidTestDebug`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("kspAndroidTestDebug")
    


    /**
     * Provides the existing [kspAndroidTestRelease][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`kspAndroidTestRelease`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("kspAndroidTestRelease")
    


    /**
     * Provides the existing [kspDebug][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`kspDebug`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("kspDebug")
    


    /**
     * Provides the existing [kspDebugAndroidTestKotlinProcessorClasspath][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`kspDebugAndroidTestKotlinProcessorClasspath`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("kspDebugAndroidTestKotlinProcessorClasspath")
    


    /**
     * Provides the existing [kspDebugKotlinProcessorClasspath][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`kspDebugKotlinProcessorClasspath`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("kspDebugKotlinProcessorClasspath")
    


    /**
     * Provides the existing [kspDebugUnitTestKotlinProcessorClasspath][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`kspDebugUnitTestKotlinProcessorClasspath`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("kspDebugUnitTestKotlinProcessorClasspath")
    


    /**
     * Provides the existing [kspRelease][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`kspRelease`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("kspRelease")
    


    /**
     * Provides the existing [kspReleaseKotlinProcessorClasspath][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`kspReleaseKotlinProcessorClasspath`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("kspReleaseKotlinProcessorClasspath")
    


    /**
     * Provides the existing [kspTest][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`kspTest`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("kspTest")
    


    /**
     * Provides the existing [kspTestDebug][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`kspTestDebug`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("kspTestDebug")
    


    /**
     * Provides the existing [kspTestFixtures][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`kspTestFixtures`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("kspTestFixtures")
    


    /**
     * Provides the existing [kspTestFixturesDebug][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`kspTestFixturesDebug`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("kspTestFixturesDebug")
    


    /**
     * Provides the existing [kspTestFixturesRelease][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`kspTestFixturesRelease`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("kspTestFixturesRelease")
    


    /**
     * Provides the existing [kspTestRelease][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`kspTestRelease`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("kspTestRelease")
    


    /**
     * Provides the existing [lintChecks][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`lintChecks`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("lintChecks")
    


    /**
     * Provides the existing [lintPublish][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`lintPublish`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("lintPublish")
    


    /**
     * Provides the existing [releaseAnnotationProcessor][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`releaseAnnotationProcessor`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("releaseAnnotationProcessor")
    


    /**
     * Provides the existing [releaseAnnotationProcessorClasspath][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`releaseAnnotationProcessorClasspath`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("releaseAnnotationProcessorClasspath")
    


    /**
     * Provides the existing [releaseApi][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`releaseApi`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("releaseApi")
    


    /**
     * Provides the existing [releaseApiElements][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`releaseApiElements`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("releaseApiElements")
    


    /**
     * Provides the existing [releaseCompileClasspath][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`releaseCompileClasspath`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("releaseCompileClasspath")
    


    /**
     * Provides the existing [releaseCompileOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`releaseCompileOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("releaseCompileOnly")
    


    /**
     * Provides the existing [releaseCompileOnlyApi][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`releaseCompileOnlyApi`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("releaseCompileOnlyApi")
    


    /**
     * Provides the existing [releaseImplementation][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`releaseImplementation`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("releaseImplementation")
    


    /**
     * Provides the existing [releaseRuntimeClasspath][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`releaseRuntimeClasspath`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("releaseRuntimeClasspath")
    


    /**
     * Provides the existing [releaseRuntimeElements][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`releaseRuntimeElements`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("releaseRuntimeElements")
    


    /**
     * Provides the existing [releaseRuntimeOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`releaseRuntimeOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("releaseRuntimeOnly")
    


    /**
     * Provides the existing [runtimeOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`runtimeOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("runtimeOnly")
    


    /**
     * Provides the existing [testAnnotationProcessor][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testAnnotationProcessor`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testAnnotationProcessor")
    


    /**
     * Provides the existing [testCompileOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testCompileOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testCompileOnly")
    


    /**
     * Provides the existing [testDebugAnnotationProcessor][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testDebugAnnotationProcessor`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testDebugAnnotationProcessor")
    


    /**
     * Provides the existing [testDebugCompileOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testDebugCompileOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testDebugCompileOnly")
    


    /**
     * Provides the existing [testDebugImplementation][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testDebugImplementation`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testDebugImplementation")
    


    /**
     * Provides the existing [testDebugRuntimeOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testDebugRuntimeOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testDebugRuntimeOnly")
    


    /**
     * Provides the existing [testFixturesAnnotationProcessor][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testFixturesAnnotationProcessor`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testFixturesAnnotationProcessor")
    


    /**
     * Provides the existing [testFixturesApi][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testFixturesApi`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testFixturesApi")
    


    /**
     * Provides the existing [testFixturesCompileOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testFixturesCompileOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testFixturesCompileOnly")
    


    /**
     * Provides the existing [testFixturesCompileOnlyApi][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testFixturesCompileOnlyApi`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testFixturesCompileOnlyApi")
    


    /**
     * Provides the existing [testFixturesDebugAnnotationProcessor][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testFixturesDebugAnnotationProcessor`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testFixturesDebugAnnotationProcessor")
    


    /**
     * Provides the existing [testFixturesDebugApi][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testFixturesDebugApi`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testFixturesDebugApi")
    


    /**
     * Provides the existing [testFixturesDebugCompileOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testFixturesDebugCompileOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testFixturesDebugCompileOnly")
    


    /**
     * Provides the existing [testFixturesDebugCompileOnlyApi][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testFixturesDebugCompileOnlyApi`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testFixturesDebugCompileOnlyApi")
    


    /**
     * Provides the existing [testFixturesDebugImplementation][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testFixturesDebugImplementation`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testFixturesDebugImplementation")
    


    /**
     * Provides the existing [testFixturesDebugRuntimeOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testFixturesDebugRuntimeOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testFixturesDebugRuntimeOnly")
    


    /**
     * Provides the existing [testFixturesImplementation][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testFixturesImplementation`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testFixturesImplementation")
    


    /**
     * Provides the existing [testFixturesReleaseAnnotationProcessor][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testFixturesReleaseAnnotationProcessor`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testFixturesReleaseAnnotationProcessor")
    


    /**
     * Provides the existing [testFixturesReleaseApi][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testFixturesReleaseApi`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testFixturesReleaseApi")
    


    /**
     * Provides the existing [testFixturesReleaseCompileOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testFixturesReleaseCompileOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testFixturesReleaseCompileOnly")
    


    /**
     * Provides the existing [testFixturesReleaseCompileOnlyApi][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testFixturesReleaseCompileOnlyApi`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testFixturesReleaseCompileOnlyApi")
    


    /**
     * Provides the existing [testFixturesReleaseImplementation][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testFixturesReleaseImplementation`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testFixturesReleaseImplementation")
    


    /**
     * Provides the existing [testFixturesReleaseRuntimeOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testFixturesReleaseRuntimeOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testFixturesReleaseRuntimeOnly")
    


    /**
     * Provides the existing [testFixturesRuntimeOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testFixturesRuntimeOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testFixturesRuntimeOnly")
    


    /**
     * Provides the existing [testImplementation][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testImplementation`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testImplementation")
    


    /**
     * Provides the existing [testReleaseAnnotationProcessor][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testReleaseAnnotationProcessor`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testReleaseAnnotationProcessor")
    


    /**
     * Provides the existing [testReleaseCompileOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testReleaseCompileOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testReleaseCompileOnly")
    


    /**
     * Provides the existing [testReleaseImplementation][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testReleaseImplementation`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testReleaseImplementation")
    


    /**
     * Provides the existing [testReleaseRuntimeOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testReleaseRuntimeOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testReleaseRuntimeOnly")
    


    /**
     * Provides the existing [testRuntimeOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testRuntimeOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testRuntimeOnly")
    


    /**
     * Adds a dependency to the 'androidJdkImage' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidJdkImage`(dependencyNotation: Any): Dependency? =
        add("androidJdkImage", dependencyNotation)


    /**
     * Adds a dependency to the 'androidJdkImage' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidJdkImage`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "androidJdkImage", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'androidJdkImage' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidJdkImage`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidJdkImage", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidJdkImage' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidJdkImage`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidJdkImage", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidJdkImage' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`androidJdkImage`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "androidJdkImage", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidJdkImage' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`androidJdkImage`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("androidJdkImage", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'androidJdkImage' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidJdkImage`(constraintNotation: Any): DependencyConstraint =
        add("androidJdkImage", constraintNotation)


    /**
     * Adds a dependency constraint to the 'androidJdkImage' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidJdkImage`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("androidJdkImage", constraintNotation, block)


    /**
     * Adds an artifact to the 'androidJdkImage' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidJdkImage`(artifactNotation: Any): PublishArtifact =
        add("androidJdkImage", artifactNotation)


    /**
     * Adds an artifact to the 'androidJdkImage' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidJdkImage`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("androidJdkImage", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'androidTestAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestAnnotationProcessor`(dependencyNotation: Any): Dependency? =
        add("androidTestAnnotationProcessor", dependencyNotation)


    /**
     * Adds a dependency to the 'androidTestAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestAnnotationProcessor`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "androidTestAnnotationProcessor", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'androidTestAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestAnnotationProcessor`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidTestAnnotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestAnnotationProcessor`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidTestAnnotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestAnnotationProcessor' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`androidTestAnnotationProcessor`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "androidTestAnnotationProcessor", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestAnnotationProcessor' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`androidTestAnnotationProcessor`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("androidTestAnnotationProcessor", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'androidTestAnnotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidTestAnnotationProcessor`(constraintNotation: Any): DependencyConstraint =
        add("androidTestAnnotationProcessor", constraintNotation)


    /**
     * Adds a dependency constraint to the 'androidTestAnnotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidTestAnnotationProcessor`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("androidTestAnnotationProcessor", constraintNotation, block)


    /**
     * Adds an artifact to the 'androidTestAnnotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidTestAnnotationProcessor`(artifactNotation: Any): PublishArtifact =
        add("androidTestAnnotationProcessor", artifactNotation)


    /**
     * Adds an artifact to the 'androidTestAnnotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidTestAnnotationProcessor`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("androidTestAnnotationProcessor", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'androidTestCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestCompileOnly`(dependencyNotation: Any): Dependency? =
        add("androidTestCompileOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'androidTestCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestCompileOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "androidTestCompileOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'androidTestCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestCompileOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidTestCompileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestCompileOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidTestCompileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestCompileOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`androidTestCompileOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "androidTestCompileOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestCompileOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`androidTestCompileOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("androidTestCompileOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'androidTestCompileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidTestCompileOnly`(constraintNotation: Any): DependencyConstraint =
        add("androidTestCompileOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'androidTestCompileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidTestCompileOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("androidTestCompileOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'androidTestCompileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidTestCompileOnly`(artifactNotation: Any): PublishArtifact =
        add("androidTestCompileOnly", artifactNotation)


    /**
     * Adds an artifact to the 'androidTestCompileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidTestCompileOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("androidTestCompileOnly", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'androidTestDebugAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestDebugAnnotationProcessor`(dependencyNotation: Any): Dependency? =
        add("androidTestDebugAnnotationProcessor", dependencyNotation)


    /**
     * Adds a dependency to the 'androidTestDebugAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestDebugAnnotationProcessor`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "androidTestDebugAnnotationProcessor", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'androidTestDebugAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestDebugAnnotationProcessor`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidTestDebugAnnotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestDebugAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestDebugAnnotationProcessor`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidTestDebugAnnotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestDebugAnnotationProcessor' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`androidTestDebugAnnotationProcessor`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "androidTestDebugAnnotationProcessor", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestDebugAnnotationProcessor' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`androidTestDebugAnnotationProcessor`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("androidTestDebugAnnotationProcessor", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'androidTestDebugAnnotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidTestDebugAnnotationProcessor`(constraintNotation: Any): DependencyConstraint =
        add("androidTestDebugAnnotationProcessor", constraintNotation)


    /**
     * Adds a dependency constraint to the 'androidTestDebugAnnotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidTestDebugAnnotationProcessor`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("androidTestDebugAnnotationProcessor", constraintNotation, block)


    /**
     * Adds an artifact to the 'androidTestDebugAnnotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidTestDebugAnnotationProcessor`(artifactNotation: Any): PublishArtifact =
        add("androidTestDebugAnnotationProcessor", artifactNotation)


    /**
     * Adds an artifact to the 'androidTestDebugAnnotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidTestDebugAnnotationProcessor`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("androidTestDebugAnnotationProcessor", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'androidTestDebugCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestDebugCompileOnly`(dependencyNotation: Any): Dependency? =
        add("androidTestDebugCompileOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'androidTestDebugCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestDebugCompileOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "androidTestDebugCompileOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'androidTestDebugCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestDebugCompileOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidTestDebugCompileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestDebugCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestDebugCompileOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidTestDebugCompileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestDebugCompileOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`androidTestDebugCompileOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "androidTestDebugCompileOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestDebugCompileOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`androidTestDebugCompileOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("androidTestDebugCompileOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'androidTestDebugCompileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidTestDebugCompileOnly`(constraintNotation: Any): DependencyConstraint =
        add("androidTestDebugCompileOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'androidTestDebugCompileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidTestDebugCompileOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("androidTestDebugCompileOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'androidTestDebugCompileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidTestDebugCompileOnly`(artifactNotation: Any): PublishArtifact =
        add("androidTestDebugCompileOnly", artifactNotation)


    /**
     * Adds an artifact to the 'androidTestDebugCompileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidTestDebugCompileOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("androidTestDebugCompileOnly", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'androidTestDebugImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestDebugImplementation`(dependencyNotation: Any): Dependency? =
        add("androidTestDebugImplementation", dependencyNotation)


    /**
     * Adds a dependency to the 'androidTestDebugImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestDebugImplementation`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "androidTestDebugImplementation", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'androidTestDebugImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestDebugImplementation`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidTestDebugImplementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestDebugImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestDebugImplementation`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidTestDebugImplementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestDebugImplementation' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`androidTestDebugImplementation`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "androidTestDebugImplementation", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestDebugImplementation' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`androidTestDebugImplementation`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("androidTestDebugImplementation", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'androidTestDebugImplementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidTestDebugImplementation`(constraintNotation: Any): DependencyConstraint =
        add("androidTestDebugImplementation", constraintNotation)


    /**
     * Adds a dependency constraint to the 'androidTestDebugImplementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidTestDebugImplementation`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("androidTestDebugImplementation", constraintNotation, block)


    /**
     * Adds an artifact to the 'androidTestDebugImplementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidTestDebugImplementation`(artifactNotation: Any): PublishArtifact =
        add("androidTestDebugImplementation", artifactNotation)


    /**
     * Adds an artifact to the 'androidTestDebugImplementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidTestDebugImplementation`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("androidTestDebugImplementation", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'androidTestDebugRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestDebugRuntimeOnly`(dependencyNotation: Any): Dependency? =
        add("androidTestDebugRuntimeOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'androidTestDebugRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestDebugRuntimeOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "androidTestDebugRuntimeOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'androidTestDebugRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestDebugRuntimeOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidTestDebugRuntimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestDebugRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestDebugRuntimeOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidTestDebugRuntimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestDebugRuntimeOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`androidTestDebugRuntimeOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "androidTestDebugRuntimeOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestDebugRuntimeOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`androidTestDebugRuntimeOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("androidTestDebugRuntimeOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'androidTestDebugRuntimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidTestDebugRuntimeOnly`(constraintNotation: Any): DependencyConstraint =
        add("androidTestDebugRuntimeOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'androidTestDebugRuntimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidTestDebugRuntimeOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("androidTestDebugRuntimeOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'androidTestDebugRuntimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidTestDebugRuntimeOnly`(artifactNotation: Any): PublishArtifact =
        add("androidTestDebugRuntimeOnly", artifactNotation)


    /**
     * Adds an artifact to the 'androidTestDebugRuntimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidTestDebugRuntimeOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("androidTestDebugRuntimeOnly", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'androidTestImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestImplementation`(dependencyNotation: Any): Dependency? =
        add("androidTestImplementation", dependencyNotation)


    /**
     * Adds a dependency to the 'androidTestImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestImplementation`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "androidTestImplementation", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'androidTestImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestImplementation`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidTestImplementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestImplementation`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidTestImplementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestImplementation' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`androidTestImplementation`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "androidTestImplementation", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestImplementation' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`androidTestImplementation`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("androidTestImplementation", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'androidTestImplementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidTestImplementation`(constraintNotation: Any): DependencyConstraint =
        add("androidTestImplementation", constraintNotation)


    /**
     * Adds a dependency constraint to the 'androidTestImplementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidTestImplementation`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("androidTestImplementation", constraintNotation, block)


    /**
     * Adds an artifact to the 'androidTestImplementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidTestImplementation`(artifactNotation: Any): PublishArtifact =
        add("androidTestImplementation", artifactNotation)


    /**
     * Adds an artifact to the 'androidTestImplementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidTestImplementation`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("androidTestImplementation", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'androidTestReleaseAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestReleaseAnnotationProcessor`(dependencyNotation: Any): Dependency? =
        add("androidTestReleaseAnnotationProcessor", dependencyNotation)


    /**
     * Adds a dependency to the 'androidTestReleaseAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestReleaseAnnotationProcessor`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "androidTestReleaseAnnotationProcessor", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'androidTestReleaseAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestReleaseAnnotationProcessor`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidTestReleaseAnnotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestReleaseAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestReleaseAnnotationProcessor`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidTestReleaseAnnotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestReleaseAnnotationProcessor' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`androidTestReleaseAnnotationProcessor`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "androidTestReleaseAnnotationProcessor", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestReleaseAnnotationProcessor' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`androidTestReleaseAnnotationProcessor`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("androidTestReleaseAnnotationProcessor", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'androidTestReleaseAnnotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidTestReleaseAnnotationProcessor`(constraintNotation: Any): DependencyConstraint =
        add("androidTestReleaseAnnotationProcessor", constraintNotation)


    /**
     * Adds a dependency constraint to the 'androidTestReleaseAnnotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidTestReleaseAnnotationProcessor`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("androidTestReleaseAnnotationProcessor", constraintNotation, block)


    /**
     * Adds an artifact to the 'androidTestReleaseAnnotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidTestReleaseAnnotationProcessor`(artifactNotation: Any): PublishArtifact =
        add("androidTestReleaseAnnotationProcessor", artifactNotation)


    /**
     * Adds an artifact to the 'androidTestReleaseAnnotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidTestReleaseAnnotationProcessor`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("androidTestReleaseAnnotationProcessor", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'androidTestReleaseCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestReleaseCompileOnly`(dependencyNotation: Any): Dependency? =
        add("androidTestReleaseCompileOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'androidTestReleaseCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestReleaseCompileOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "androidTestReleaseCompileOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'androidTestReleaseCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestReleaseCompileOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidTestReleaseCompileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestReleaseCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestReleaseCompileOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidTestReleaseCompileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestReleaseCompileOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`androidTestReleaseCompileOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "androidTestReleaseCompileOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestReleaseCompileOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`androidTestReleaseCompileOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("androidTestReleaseCompileOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'androidTestReleaseCompileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidTestReleaseCompileOnly`(constraintNotation: Any): DependencyConstraint =
        add("androidTestReleaseCompileOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'androidTestReleaseCompileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidTestReleaseCompileOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("androidTestReleaseCompileOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'androidTestReleaseCompileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidTestReleaseCompileOnly`(artifactNotation: Any): PublishArtifact =
        add("androidTestReleaseCompileOnly", artifactNotation)


    /**
     * Adds an artifact to the 'androidTestReleaseCompileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidTestReleaseCompileOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("androidTestReleaseCompileOnly", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'androidTestReleaseImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestReleaseImplementation`(dependencyNotation: Any): Dependency? =
        add("androidTestReleaseImplementation", dependencyNotation)


    /**
     * Adds a dependency to the 'androidTestReleaseImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestReleaseImplementation`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "androidTestReleaseImplementation", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'androidTestReleaseImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestReleaseImplementation`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidTestReleaseImplementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestReleaseImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestReleaseImplementation`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidTestReleaseImplementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestReleaseImplementation' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`androidTestReleaseImplementation`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "androidTestReleaseImplementation", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestReleaseImplementation' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`androidTestReleaseImplementation`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("androidTestReleaseImplementation", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'androidTestReleaseImplementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidTestReleaseImplementation`(constraintNotation: Any): DependencyConstraint =
        add("androidTestReleaseImplementation", constraintNotation)


    /**
     * Adds a dependency constraint to the 'androidTestReleaseImplementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidTestReleaseImplementation`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("androidTestReleaseImplementation", constraintNotation, block)


    /**
     * Adds an artifact to the 'androidTestReleaseImplementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidTestReleaseImplementation`(artifactNotation: Any): PublishArtifact =
        add("androidTestReleaseImplementation", artifactNotation)


    /**
     * Adds an artifact to the 'androidTestReleaseImplementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidTestReleaseImplementation`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("androidTestReleaseImplementation", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'androidTestReleaseRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestReleaseRuntimeOnly`(dependencyNotation: Any): Dependency? =
        add("androidTestReleaseRuntimeOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'androidTestReleaseRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestReleaseRuntimeOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "androidTestReleaseRuntimeOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'androidTestReleaseRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestReleaseRuntimeOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidTestReleaseRuntimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestReleaseRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestReleaseRuntimeOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidTestReleaseRuntimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestReleaseRuntimeOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`androidTestReleaseRuntimeOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "androidTestReleaseRuntimeOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestReleaseRuntimeOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`androidTestReleaseRuntimeOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("androidTestReleaseRuntimeOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'androidTestReleaseRuntimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidTestReleaseRuntimeOnly`(constraintNotation: Any): DependencyConstraint =
        add("androidTestReleaseRuntimeOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'androidTestReleaseRuntimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidTestReleaseRuntimeOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("androidTestReleaseRuntimeOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'androidTestReleaseRuntimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidTestReleaseRuntimeOnly`(artifactNotation: Any): PublishArtifact =
        add("androidTestReleaseRuntimeOnly", artifactNotation)


    /**
     * Adds an artifact to the 'androidTestReleaseRuntimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidTestReleaseRuntimeOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("androidTestReleaseRuntimeOnly", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'androidTestRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestRuntimeOnly`(dependencyNotation: Any): Dependency? =
        add("androidTestRuntimeOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'androidTestRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestRuntimeOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "androidTestRuntimeOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'androidTestRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestRuntimeOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidTestRuntimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestRuntimeOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidTestRuntimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestRuntimeOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`androidTestRuntimeOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "androidTestRuntimeOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestRuntimeOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`androidTestRuntimeOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("androidTestRuntimeOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'androidTestRuntimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidTestRuntimeOnly`(constraintNotation: Any): DependencyConstraint =
        add("androidTestRuntimeOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'androidTestRuntimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidTestRuntimeOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("androidTestRuntimeOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'androidTestRuntimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidTestRuntimeOnly`(artifactNotation: Any): PublishArtifact =
        add("androidTestRuntimeOnly", artifactNotation)


    /**
     * Adds an artifact to the 'androidTestRuntimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidTestRuntimeOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("androidTestRuntimeOnly", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'androidTestUtil' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestUtil`(dependencyNotation: Any): Dependency? =
        add("androidTestUtil", dependencyNotation)


    /**
     * Adds a dependency to the 'androidTestUtil' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestUtil`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "androidTestUtil", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'androidTestUtil' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestUtil`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidTestUtil", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestUtil' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`androidTestUtil`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "androidTestUtil", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestUtil' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`androidTestUtil`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "androidTestUtil", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'androidTestUtil' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`androidTestUtil`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("androidTestUtil", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'androidTestUtil' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidTestUtil`(constraintNotation: Any): DependencyConstraint =
        add("androidTestUtil", constraintNotation)


    /**
     * Adds a dependency constraint to the 'androidTestUtil' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`androidTestUtil`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("androidTestUtil", constraintNotation, block)


    /**
     * Adds an artifact to the 'androidTestUtil' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidTestUtil`(artifactNotation: Any): PublishArtifact =
        add("androidTestUtil", artifactNotation)


    /**
     * Adds an artifact to the 'androidTestUtil' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`androidTestUtil`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("androidTestUtil", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'annotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`annotationProcessor`(dependencyNotation: Any): Dependency? =
        add("annotationProcessor", dependencyNotation)


    /**
     * Adds a dependency to the 'annotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`annotationProcessor`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "annotationProcessor", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'annotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`annotationProcessor`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "annotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'annotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`annotationProcessor`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "annotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'annotationProcessor' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`annotationProcessor`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "annotationProcessor", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'annotationProcessor' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`annotationProcessor`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("annotationProcessor", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'annotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`annotationProcessor`(constraintNotation: Any): DependencyConstraint =
        add("annotationProcessor", constraintNotation)


    /**
     * Adds a dependency constraint to the 'annotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`annotationProcessor`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("annotationProcessor", constraintNotation, block)


    /**
     * Adds an artifact to the 'annotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`annotationProcessor`(artifactNotation: Any): PublishArtifact =
        add("annotationProcessor", artifactNotation)


    /**
     * Adds an artifact to the 'annotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`annotationProcessor`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("annotationProcessor", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'api' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`api`(dependencyNotation: Any): Dependency? =
        add("api", dependencyNotation)


    /**
     * Adds a dependency to the 'api' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`api`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "api", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'api' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`api`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "api", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'api' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`api`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "api", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'api' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`api`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "api", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'api' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`api`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("api", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'api' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`api`(constraintNotation: Any): DependencyConstraint =
        add("api", constraintNotation)


    /**
     * Adds a dependency constraint to the 'api' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`api`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("api", constraintNotation, block)


    /**
     * Adds an artifact to the 'api' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`api`(artifactNotation: Any): PublishArtifact =
        add("api", artifactNotation)


    /**
     * Adds an artifact to the 'api' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`api`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("api", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'archives' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`archives`(dependencyNotation: Any): Dependency? =
        add("archives", dependencyNotation)


    /**
     * Adds a dependency to the 'archives' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`archives`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "archives", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'archives' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`archives`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "archives", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'archives' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`archives`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "archives", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'archives' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`archives`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "archives", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'archives' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`archives`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("archives", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'archives' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`archives`(constraintNotation: Any): DependencyConstraint =
        add("archives", constraintNotation)


    /**
     * Adds a dependency constraint to the 'archives' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`archives`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("archives", constraintNotation, block)


    /**
     * Adds an artifact to the 'archives' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`archives`(artifactNotation: Any): PublishArtifact =
        add("archives", artifactNotation)


    /**
     * Adds an artifact to the 'archives' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`archives`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("archives", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'compileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`compileOnly`(dependencyNotation: Any): Dependency? =
        add("compileOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'compileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`compileOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "compileOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'compileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`compileOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "compileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'compileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`compileOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "compileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'compileOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`compileOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "compileOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'compileOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`compileOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("compileOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'compileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`compileOnly`(constraintNotation: Any): DependencyConstraint =
        add("compileOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'compileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`compileOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("compileOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'compileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`compileOnly`(artifactNotation: Any): PublishArtifact =
        add("compileOnly", artifactNotation)


    /**
     * Adds an artifact to the 'compileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`compileOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("compileOnly", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'compileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`compileOnlyApi`(dependencyNotation: Any): Dependency? =
        add("compileOnlyApi", dependencyNotation)


    /**
     * Adds a dependency to the 'compileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`compileOnlyApi`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "compileOnlyApi", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'compileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`compileOnlyApi`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "compileOnlyApi", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'compileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`compileOnlyApi`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "compileOnlyApi", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'compileOnlyApi' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`compileOnlyApi`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "compileOnlyApi", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'compileOnlyApi' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`compileOnlyApi`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("compileOnlyApi", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'compileOnlyApi' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`compileOnlyApi`(constraintNotation: Any): DependencyConstraint =
        add("compileOnlyApi", constraintNotation)


    /**
     * Adds a dependency constraint to the 'compileOnlyApi' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`compileOnlyApi`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("compileOnlyApi", constraintNotation, block)


    /**
     * Adds an artifact to the 'compileOnlyApi' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`compileOnlyApi`(artifactNotation: Any): PublishArtifact =
        add("compileOnlyApi", artifactNotation)


    /**
     * Adds an artifact to the 'compileOnlyApi' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`compileOnlyApi`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("compileOnlyApi", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'coreLibraryDesugaring' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`coreLibraryDesugaring`(dependencyNotation: Any): Dependency? =
        add("coreLibraryDesugaring", dependencyNotation)


    /**
     * Adds a dependency to the 'coreLibraryDesugaring' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`coreLibraryDesugaring`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "coreLibraryDesugaring", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'coreLibraryDesugaring' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`coreLibraryDesugaring`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "coreLibraryDesugaring", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'coreLibraryDesugaring' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`coreLibraryDesugaring`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "coreLibraryDesugaring", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'coreLibraryDesugaring' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`coreLibraryDesugaring`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "coreLibraryDesugaring", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'coreLibraryDesugaring' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`coreLibraryDesugaring`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("coreLibraryDesugaring", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'coreLibraryDesugaring' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`coreLibraryDesugaring`(constraintNotation: Any): DependencyConstraint =
        add("coreLibraryDesugaring", constraintNotation)


    /**
     * Adds a dependency constraint to the 'coreLibraryDesugaring' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`coreLibraryDesugaring`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("coreLibraryDesugaring", constraintNotation, block)


    /**
     * Adds an artifact to the 'coreLibraryDesugaring' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`coreLibraryDesugaring`(artifactNotation: Any): PublishArtifact =
        add("coreLibraryDesugaring", artifactNotation)


    /**
     * Adds an artifact to the 'coreLibraryDesugaring' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`coreLibraryDesugaring`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("coreLibraryDesugaring", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'debugAndroidTestAnnotationProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugAndroidTestAnnotationProcessorClasspath`(dependencyNotation: Any): Dependency? =
        add("debugAndroidTestAnnotationProcessorClasspath", dependencyNotation)


    /**
     * Adds a dependency to the 'debugAndroidTestAnnotationProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugAndroidTestAnnotationProcessorClasspath`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "debugAndroidTestAnnotationProcessorClasspath", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'debugAndroidTestAnnotationProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugAndroidTestAnnotationProcessorClasspath`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugAndroidTestAnnotationProcessorClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugAndroidTestAnnotationProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugAndroidTestAnnotationProcessorClasspath`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugAndroidTestAnnotationProcessorClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugAndroidTestAnnotationProcessorClasspath' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`debugAndroidTestAnnotationProcessorClasspath`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "debugAndroidTestAnnotationProcessorClasspath", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugAndroidTestAnnotationProcessorClasspath' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`debugAndroidTestAnnotationProcessorClasspath`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("debugAndroidTestAnnotationProcessorClasspath", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'debugAndroidTestAnnotationProcessorClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugAndroidTestAnnotationProcessorClasspath`(constraintNotation: Any): DependencyConstraint =
        add("debugAndroidTestAnnotationProcessorClasspath", constraintNotation)


    /**
     * Adds a dependency constraint to the 'debugAndroidTestAnnotationProcessorClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugAndroidTestAnnotationProcessorClasspath`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("debugAndroidTestAnnotationProcessorClasspath", constraintNotation, block)


    /**
     * Adds an artifact to the 'debugAndroidTestAnnotationProcessorClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugAndroidTestAnnotationProcessorClasspath`(artifactNotation: Any): PublishArtifact =
        add("debugAndroidTestAnnotationProcessorClasspath", artifactNotation)


    /**
     * Adds an artifact to the 'debugAndroidTestAnnotationProcessorClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugAndroidTestAnnotationProcessorClasspath`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("debugAndroidTestAnnotationProcessorClasspath", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'debugAndroidTestCompileClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugAndroidTestCompileClasspath`(dependencyNotation: Any): Dependency? =
        add("debugAndroidTestCompileClasspath", dependencyNotation)


    /**
     * Adds a dependency to the 'debugAndroidTestCompileClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugAndroidTestCompileClasspath`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "debugAndroidTestCompileClasspath", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'debugAndroidTestCompileClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugAndroidTestCompileClasspath`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugAndroidTestCompileClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugAndroidTestCompileClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugAndroidTestCompileClasspath`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugAndroidTestCompileClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugAndroidTestCompileClasspath' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`debugAndroidTestCompileClasspath`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "debugAndroidTestCompileClasspath", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugAndroidTestCompileClasspath' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`debugAndroidTestCompileClasspath`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("debugAndroidTestCompileClasspath", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'debugAndroidTestCompileClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugAndroidTestCompileClasspath`(constraintNotation: Any): DependencyConstraint =
        add("debugAndroidTestCompileClasspath", constraintNotation)


    /**
     * Adds a dependency constraint to the 'debugAndroidTestCompileClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugAndroidTestCompileClasspath`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("debugAndroidTestCompileClasspath", constraintNotation, block)


    /**
     * Adds an artifact to the 'debugAndroidTestCompileClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugAndroidTestCompileClasspath`(artifactNotation: Any): PublishArtifact =
        add("debugAndroidTestCompileClasspath", artifactNotation)


    /**
     * Adds an artifact to the 'debugAndroidTestCompileClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugAndroidTestCompileClasspath`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("debugAndroidTestCompileClasspath", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'debugAndroidTestRuntimeClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugAndroidTestRuntimeClasspath`(dependencyNotation: Any): Dependency? =
        add("debugAndroidTestRuntimeClasspath", dependencyNotation)


    /**
     * Adds a dependency to the 'debugAndroidTestRuntimeClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugAndroidTestRuntimeClasspath`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "debugAndroidTestRuntimeClasspath", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'debugAndroidTestRuntimeClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugAndroidTestRuntimeClasspath`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugAndroidTestRuntimeClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugAndroidTestRuntimeClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugAndroidTestRuntimeClasspath`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugAndroidTestRuntimeClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugAndroidTestRuntimeClasspath' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`debugAndroidTestRuntimeClasspath`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "debugAndroidTestRuntimeClasspath", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugAndroidTestRuntimeClasspath' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`debugAndroidTestRuntimeClasspath`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("debugAndroidTestRuntimeClasspath", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'debugAndroidTestRuntimeClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugAndroidTestRuntimeClasspath`(constraintNotation: Any): DependencyConstraint =
        add("debugAndroidTestRuntimeClasspath", constraintNotation)


    /**
     * Adds a dependency constraint to the 'debugAndroidTestRuntimeClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugAndroidTestRuntimeClasspath`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("debugAndroidTestRuntimeClasspath", constraintNotation, block)


    /**
     * Adds an artifact to the 'debugAndroidTestRuntimeClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugAndroidTestRuntimeClasspath`(artifactNotation: Any): PublishArtifact =
        add("debugAndroidTestRuntimeClasspath", artifactNotation)


    /**
     * Adds an artifact to the 'debugAndroidTestRuntimeClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugAndroidTestRuntimeClasspath`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("debugAndroidTestRuntimeClasspath", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'debugAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugAnnotationProcessor`(dependencyNotation: Any): Dependency? =
        add("debugAnnotationProcessor", dependencyNotation)


    /**
     * Adds a dependency to the 'debugAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugAnnotationProcessor`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "debugAnnotationProcessor", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'debugAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugAnnotationProcessor`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugAnnotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugAnnotationProcessor`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugAnnotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugAnnotationProcessor' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`debugAnnotationProcessor`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "debugAnnotationProcessor", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugAnnotationProcessor' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`debugAnnotationProcessor`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("debugAnnotationProcessor", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'debugAnnotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugAnnotationProcessor`(constraintNotation: Any): DependencyConstraint =
        add("debugAnnotationProcessor", constraintNotation)


    /**
     * Adds a dependency constraint to the 'debugAnnotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugAnnotationProcessor`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("debugAnnotationProcessor", constraintNotation, block)


    /**
     * Adds an artifact to the 'debugAnnotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugAnnotationProcessor`(artifactNotation: Any): PublishArtifact =
        add("debugAnnotationProcessor", artifactNotation)


    /**
     * Adds an artifact to the 'debugAnnotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugAnnotationProcessor`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("debugAnnotationProcessor", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'debugAnnotationProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugAnnotationProcessorClasspath`(dependencyNotation: Any): Dependency? =
        add("debugAnnotationProcessorClasspath", dependencyNotation)


    /**
     * Adds a dependency to the 'debugAnnotationProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugAnnotationProcessorClasspath`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "debugAnnotationProcessorClasspath", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'debugAnnotationProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugAnnotationProcessorClasspath`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugAnnotationProcessorClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugAnnotationProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugAnnotationProcessorClasspath`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugAnnotationProcessorClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugAnnotationProcessorClasspath' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`debugAnnotationProcessorClasspath`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "debugAnnotationProcessorClasspath", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugAnnotationProcessorClasspath' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`debugAnnotationProcessorClasspath`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("debugAnnotationProcessorClasspath", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'debugAnnotationProcessorClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugAnnotationProcessorClasspath`(constraintNotation: Any): DependencyConstraint =
        add("debugAnnotationProcessorClasspath", constraintNotation)


    /**
     * Adds a dependency constraint to the 'debugAnnotationProcessorClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugAnnotationProcessorClasspath`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("debugAnnotationProcessorClasspath", constraintNotation, block)


    /**
     * Adds an artifact to the 'debugAnnotationProcessorClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugAnnotationProcessorClasspath`(artifactNotation: Any): PublishArtifact =
        add("debugAnnotationProcessorClasspath", artifactNotation)


    /**
     * Adds an artifact to the 'debugAnnotationProcessorClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugAnnotationProcessorClasspath`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("debugAnnotationProcessorClasspath", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'debugApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugApi`(dependencyNotation: Any): Dependency? =
        add("debugApi", dependencyNotation)


    /**
     * Adds a dependency to the 'debugApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugApi`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "debugApi", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'debugApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugApi`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugApi", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugApi`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugApi", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugApi' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`debugApi`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "debugApi", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugApi' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`debugApi`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("debugApi", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'debugApi' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugApi`(constraintNotation: Any): DependencyConstraint =
        add("debugApi", constraintNotation)


    /**
     * Adds a dependency constraint to the 'debugApi' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugApi`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("debugApi", constraintNotation, block)


    /**
     * Adds an artifact to the 'debugApi' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugApi`(artifactNotation: Any): PublishArtifact =
        add("debugApi", artifactNotation)


    /**
     * Adds an artifact to the 'debugApi' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugApi`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("debugApi", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'debugApiElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugApiElements`(dependencyNotation: Any): Dependency? =
        add("debugApiElements", dependencyNotation)


    /**
     * Adds a dependency to the 'debugApiElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugApiElements`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "debugApiElements", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'debugApiElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugApiElements`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugApiElements", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugApiElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugApiElements`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugApiElements", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugApiElements' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`debugApiElements`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "debugApiElements", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugApiElements' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`debugApiElements`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("debugApiElements", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'debugApiElements' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugApiElements`(constraintNotation: Any): DependencyConstraint =
        add("debugApiElements", constraintNotation)


    /**
     * Adds a dependency constraint to the 'debugApiElements' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugApiElements`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("debugApiElements", constraintNotation, block)


    /**
     * Adds an artifact to the 'debugApiElements' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugApiElements`(artifactNotation: Any): PublishArtifact =
        add("debugApiElements", artifactNotation)


    /**
     * Adds an artifact to the 'debugApiElements' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugApiElements`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("debugApiElements", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'debugCompileClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugCompileClasspath`(dependencyNotation: Any): Dependency? =
        add("debugCompileClasspath", dependencyNotation)


    /**
     * Adds a dependency to the 'debugCompileClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugCompileClasspath`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "debugCompileClasspath", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'debugCompileClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugCompileClasspath`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugCompileClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugCompileClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugCompileClasspath`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugCompileClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugCompileClasspath' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`debugCompileClasspath`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "debugCompileClasspath", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugCompileClasspath' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`debugCompileClasspath`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("debugCompileClasspath", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'debugCompileClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugCompileClasspath`(constraintNotation: Any): DependencyConstraint =
        add("debugCompileClasspath", constraintNotation)


    /**
     * Adds a dependency constraint to the 'debugCompileClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugCompileClasspath`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("debugCompileClasspath", constraintNotation, block)


    /**
     * Adds an artifact to the 'debugCompileClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugCompileClasspath`(artifactNotation: Any): PublishArtifact =
        add("debugCompileClasspath", artifactNotation)


    /**
     * Adds an artifact to the 'debugCompileClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugCompileClasspath`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("debugCompileClasspath", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'debugCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugCompileOnly`(dependencyNotation: Any): Dependency? =
        add("debugCompileOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'debugCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugCompileOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "debugCompileOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'debugCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugCompileOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugCompileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugCompileOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugCompileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugCompileOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`debugCompileOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "debugCompileOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugCompileOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`debugCompileOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("debugCompileOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'debugCompileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugCompileOnly`(constraintNotation: Any): DependencyConstraint =
        add("debugCompileOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'debugCompileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugCompileOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("debugCompileOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'debugCompileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugCompileOnly`(artifactNotation: Any): PublishArtifact =
        add("debugCompileOnly", artifactNotation)


    /**
     * Adds an artifact to the 'debugCompileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugCompileOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("debugCompileOnly", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'debugCompileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugCompileOnlyApi`(dependencyNotation: Any): Dependency? =
        add("debugCompileOnlyApi", dependencyNotation)


    /**
     * Adds a dependency to the 'debugCompileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugCompileOnlyApi`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "debugCompileOnlyApi", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'debugCompileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugCompileOnlyApi`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugCompileOnlyApi", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugCompileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugCompileOnlyApi`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugCompileOnlyApi", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugCompileOnlyApi' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`debugCompileOnlyApi`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "debugCompileOnlyApi", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugCompileOnlyApi' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`debugCompileOnlyApi`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("debugCompileOnlyApi", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'debugCompileOnlyApi' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugCompileOnlyApi`(constraintNotation: Any): DependencyConstraint =
        add("debugCompileOnlyApi", constraintNotation)


    /**
     * Adds a dependency constraint to the 'debugCompileOnlyApi' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugCompileOnlyApi`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("debugCompileOnlyApi", constraintNotation, block)


    /**
     * Adds an artifact to the 'debugCompileOnlyApi' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugCompileOnlyApi`(artifactNotation: Any): PublishArtifact =
        add("debugCompileOnlyApi", artifactNotation)


    /**
     * Adds an artifact to the 'debugCompileOnlyApi' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugCompileOnlyApi`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("debugCompileOnlyApi", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'debugImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugImplementation`(dependencyNotation: Any): Dependency? =
        add("debugImplementation", dependencyNotation)


    /**
     * Adds a dependency to the 'debugImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugImplementation`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "debugImplementation", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'debugImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugImplementation`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugImplementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugImplementation`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugImplementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugImplementation' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`debugImplementation`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "debugImplementation", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugImplementation' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`debugImplementation`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("debugImplementation", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'debugImplementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugImplementation`(constraintNotation: Any): DependencyConstraint =
        add("debugImplementation", constraintNotation)


    /**
     * Adds a dependency constraint to the 'debugImplementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugImplementation`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("debugImplementation", constraintNotation, block)


    /**
     * Adds an artifact to the 'debugImplementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugImplementation`(artifactNotation: Any): PublishArtifact =
        add("debugImplementation", artifactNotation)


    /**
     * Adds an artifact to the 'debugImplementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugImplementation`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("debugImplementation", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'debugRuntimeClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugRuntimeClasspath`(dependencyNotation: Any): Dependency? =
        add("debugRuntimeClasspath", dependencyNotation)


    /**
     * Adds a dependency to the 'debugRuntimeClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugRuntimeClasspath`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "debugRuntimeClasspath", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'debugRuntimeClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugRuntimeClasspath`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugRuntimeClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugRuntimeClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugRuntimeClasspath`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugRuntimeClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugRuntimeClasspath' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`debugRuntimeClasspath`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "debugRuntimeClasspath", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugRuntimeClasspath' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`debugRuntimeClasspath`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("debugRuntimeClasspath", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'debugRuntimeClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugRuntimeClasspath`(constraintNotation: Any): DependencyConstraint =
        add("debugRuntimeClasspath", constraintNotation)


    /**
     * Adds a dependency constraint to the 'debugRuntimeClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugRuntimeClasspath`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("debugRuntimeClasspath", constraintNotation, block)


    /**
     * Adds an artifact to the 'debugRuntimeClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugRuntimeClasspath`(artifactNotation: Any): PublishArtifact =
        add("debugRuntimeClasspath", artifactNotation)


    /**
     * Adds an artifact to the 'debugRuntimeClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugRuntimeClasspath`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("debugRuntimeClasspath", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'debugRuntimeElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugRuntimeElements`(dependencyNotation: Any): Dependency? =
        add("debugRuntimeElements", dependencyNotation)


    /**
     * Adds a dependency to the 'debugRuntimeElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugRuntimeElements`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "debugRuntimeElements", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'debugRuntimeElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugRuntimeElements`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugRuntimeElements", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugRuntimeElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugRuntimeElements`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugRuntimeElements", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugRuntimeElements' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`debugRuntimeElements`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "debugRuntimeElements", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugRuntimeElements' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`debugRuntimeElements`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("debugRuntimeElements", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'debugRuntimeElements' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugRuntimeElements`(constraintNotation: Any): DependencyConstraint =
        add("debugRuntimeElements", constraintNotation)


    /**
     * Adds a dependency constraint to the 'debugRuntimeElements' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugRuntimeElements`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("debugRuntimeElements", constraintNotation, block)


    /**
     * Adds an artifact to the 'debugRuntimeElements' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugRuntimeElements`(artifactNotation: Any): PublishArtifact =
        add("debugRuntimeElements", artifactNotation)


    /**
     * Adds an artifact to the 'debugRuntimeElements' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugRuntimeElements`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("debugRuntimeElements", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'debugRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugRuntimeOnly`(dependencyNotation: Any): Dependency? =
        add("debugRuntimeOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'debugRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugRuntimeOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "debugRuntimeOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'debugRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugRuntimeOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugRuntimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugRuntimeOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugRuntimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugRuntimeOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`debugRuntimeOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "debugRuntimeOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugRuntimeOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`debugRuntimeOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("debugRuntimeOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'debugRuntimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugRuntimeOnly`(constraintNotation: Any): DependencyConstraint =
        add("debugRuntimeOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'debugRuntimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugRuntimeOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("debugRuntimeOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'debugRuntimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugRuntimeOnly`(artifactNotation: Any): PublishArtifact =
        add("debugRuntimeOnly", artifactNotation)


    /**
     * Adds an artifact to the 'debugRuntimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugRuntimeOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("debugRuntimeOnly", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'debugUnitTestAnnotationProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugUnitTestAnnotationProcessorClasspath`(dependencyNotation: Any): Dependency? =
        add("debugUnitTestAnnotationProcessorClasspath", dependencyNotation)


    /**
     * Adds a dependency to the 'debugUnitTestAnnotationProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugUnitTestAnnotationProcessorClasspath`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "debugUnitTestAnnotationProcessorClasspath", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'debugUnitTestAnnotationProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugUnitTestAnnotationProcessorClasspath`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugUnitTestAnnotationProcessorClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugUnitTestAnnotationProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugUnitTestAnnotationProcessorClasspath`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugUnitTestAnnotationProcessorClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugUnitTestAnnotationProcessorClasspath' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`debugUnitTestAnnotationProcessorClasspath`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "debugUnitTestAnnotationProcessorClasspath", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugUnitTestAnnotationProcessorClasspath' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`debugUnitTestAnnotationProcessorClasspath`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("debugUnitTestAnnotationProcessorClasspath", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'debugUnitTestAnnotationProcessorClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugUnitTestAnnotationProcessorClasspath`(constraintNotation: Any): DependencyConstraint =
        add("debugUnitTestAnnotationProcessorClasspath", constraintNotation)


    /**
     * Adds a dependency constraint to the 'debugUnitTestAnnotationProcessorClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugUnitTestAnnotationProcessorClasspath`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("debugUnitTestAnnotationProcessorClasspath", constraintNotation, block)


    /**
     * Adds an artifact to the 'debugUnitTestAnnotationProcessorClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugUnitTestAnnotationProcessorClasspath`(artifactNotation: Any): PublishArtifact =
        add("debugUnitTestAnnotationProcessorClasspath", artifactNotation)


    /**
     * Adds an artifact to the 'debugUnitTestAnnotationProcessorClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugUnitTestAnnotationProcessorClasspath`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("debugUnitTestAnnotationProcessorClasspath", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'debugUnitTestCompileClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugUnitTestCompileClasspath`(dependencyNotation: Any): Dependency? =
        add("debugUnitTestCompileClasspath", dependencyNotation)


    /**
     * Adds a dependency to the 'debugUnitTestCompileClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugUnitTestCompileClasspath`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "debugUnitTestCompileClasspath", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'debugUnitTestCompileClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugUnitTestCompileClasspath`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugUnitTestCompileClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugUnitTestCompileClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugUnitTestCompileClasspath`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugUnitTestCompileClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugUnitTestCompileClasspath' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`debugUnitTestCompileClasspath`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "debugUnitTestCompileClasspath", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugUnitTestCompileClasspath' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`debugUnitTestCompileClasspath`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("debugUnitTestCompileClasspath", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'debugUnitTestCompileClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugUnitTestCompileClasspath`(constraintNotation: Any): DependencyConstraint =
        add("debugUnitTestCompileClasspath", constraintNotation)


    /**
     * Adds a dependency constraint to the 'debugUnitTestCompileClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugUnitTestCompileClasspath`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("debugUnitTestCompileClasspath", constraintNotation, block)


    /**
     * Adds an artifact to the 'debugUnitTestCompileClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugUnitTestCompileClasspath`(artifactNotation: Any): PublishArtifact =
        add("debugUnitTestCompileClasspath", artifactNotation)


    /**
     * Adds an artifact to the 'debugUnitTestCompileClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugUnitTestCompileClasspath`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("debugUnitTestCompileClasspath", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'debugUnitTestRuntimeClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugUnitTestRuntimeClasspath`(dependencyNotation: Any): Dependency? =
        add("debugUnitTestRuntimeClasspath", dependencyNotation)


    /**
     * Adds a dependency to the 'debugUnitTestRuntimeClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugUnitTestRuntimeClasspath`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "debugUnitTestRuntimeClasspath", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'debugUnitTestRuntimeClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugUnitTestRuntimeClasspath`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugUnitTestRuntimeClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugUnitTestRuntimeClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`debugUnitTestRuntimeClasspath`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "debugUnitTestRuntimeClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugUnitTestRuntimeClasspath' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`debugUnitTestRuntimeClasspath`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "debugUnitTestRuntimeClasspath", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'debugUnitTestRuntimeClasspath' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`debugUnitTestRuntimeClasspath`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("debugUnitTestRuntimeClasspath", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'debugUnitTestRuntimeClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugUnitTestRuntimeClasspath`(constraintNotation: Any): DependencyConstraint =
        add("debugUnitTestRuntimeClasspath", constraintNotation)


    /**
     * Adds a dependency constraint to the 'debugUnitTestRuntimeClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`debugUnitTestRuntimeClasspath`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("debugUnitTestRuntimeClasspath", constraintNotation, block)


    /**
     * Adds an artifact to the 'debugUnitTestRuntimeClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugUnitTestRuntimeClasspath`(artifactNotation: Any): PublishArtifact =
        add("debugUnitTestRuntimeClasspath", artifactNotation)


    /**
     * Adds an artifact to the 'debugUnitTestRuntimeClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`debugUnitTestRuntimeClasspath`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("debugUnitTestRuntimeClasspath", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'default' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`default`(dependencyNotation: Any): Dependency? =
        add("default", dependencyNotation)


    /**
     * Adds a dependency to the 'default' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`default`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "default", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'default' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`default`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "default", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'default' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`default`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "default", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'default' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`default`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "default", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'default' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`default`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("default", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'default' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`default`(constraintNotation: Any): DependencyConstraint =
        add("default", constraintNotation)


    /**
     * Adds a dependency constraint to the 'default' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`default`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("default", constraintNotation, block)


    /**
     * Adds an artifact to the 'default' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`default`(artifactNotation: Any): PublishArtifact =
        add("default", artifactNotation)


    /**
     * Adds an artifact to the 'default' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`default`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("default", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'implementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`implementation`(dependencyNotation: Any): Dependency? =
        add("implementation", dependencyNotation)


    /**
     * Adds a dependency to the 'implementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`implementation`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "implementation", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'implementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`implementation`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "implementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'implementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`implementation`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "implementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'implementation' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`implementation`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "implementation", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'implementation' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`implementation`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("implementation", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'implementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`implementation`(constraintNotation: Any): DependencyConstraint =
        add("implementation", constraintNotation)


    /**
     * Adds a dependency constraint to the 'implementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`implementation`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("implementation", constraintNotation, block)


    /**
     * Adds an artifact to the 'implementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`implementation`(artifactNotation: Any): PublishArtifact =
        add("implementation", artifactNotation)


    /**
     * Adds an artifact to the 'implementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`implementation`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("implementation", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'ksp' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`ksp`(dependencyNotation: Any): Dependency? =
        add("ksp", dependencyNotation)


    /**
     * Adds a dependency to the 'ksp' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`ksp`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "ksp", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'ksp' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`ksp`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "ksp", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'ksp' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`ksp`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "ksp", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'ksp' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`ksp`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "ksp", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'ksp' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`ksp`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("ksp", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'ksp' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`ksp`(constraintNotation: Any): DependencyConstraint =
        add("ksp", constraintNotation)


    /**
     * Adds a dependency constraint to the 'ksp' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`ksp`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("ksp", constraintNotation, block)


    /**
     * Adds an artifact to the 'ksp' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`ksp`(artifactNotation: Any): PublishArtifact =
        add("ksp", artifactNotation)


    /**
     * Adds an artifact to the 'ksp' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`ksp`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("ksp", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'kspAndroidTest' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspAndroidTest`(dependencyNotation: Any): Dependency? =
        add("kspAndroidTest", dependencyNotation)


    /**
     * Adds a dependency to the 'kspAndroidTest' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspAndroidTest`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "kspAndroidTest", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'kspAndroidTest' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspAndroidTest`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspAndroidTest", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspAndroidTest' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspAndroidTest`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspAndroidTest", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspAndroidTest' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`kspAndroidTest`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "kspAndroidTest", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspAndroidTest' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`kspAndroidTest`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("kspAndroidTest", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'kspAndroidTest' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspAndroidTest`(constraintNotation: Any): DependencyConstraint =
        add("kspAndroidTest", constraintNotation)


    /**
     * Adds a dependency constraint to the 'kspAndroidTest' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspAndroidTest`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("kspAndroidTest", constraintNotation, block)


    /**
     * Adds an artifact to the 'kspAndroidTest' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspAndroidTest`(artifactNotation: Any): PublishArtifact =
        add("kspAndroidTest", artifactNotation)


    /**
     * Adds an artifact to the 'kspAndroidTest' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspAndroidTest`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("kspAndroidTest", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'kspAndroidTestDebug' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspAndroidTestDebug`(dependencyNotation: Any): Dependency? =
        add("kspAndroidTestDebug", dependencyNotation)


    /**
     * Adds a dependency to the 'kspAndroidTestDebug' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspAndroidTestDebug`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "kspAndroidTestDebug", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'kspAndroidTestDebug' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspAndroidTestDebug`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspAndroidTestDebug", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspAndroidTestDebug' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspAndroidTestDebug`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspAndroidTestDebug", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspAndroidTestDebug' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`kspAndroidTestDebug`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "kspAndroidTestDebug", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspAndroidTestDebug' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`kspAndroidTestDebug`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("kspAndroidTestDebug", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'kspAndroidTestDebug' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspAndroidTestDebug`(constraintNotation: Any): DependencyConstraint =
        add("kspAndroidTestDebug", constraintNotation)


    /**
     * Adds a dependency constraint to the 'kspAndroidTestDebug' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspAndroidTestDebug`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("kspAndroidTestDebug", constraintNotation, block)


    /**
     * Adds an artifact to the 'kspAndroidTestDebug' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspAndroidTestDebug`(artifactNotation: Any): PublishArtifact =
        add("kspAndroidTestDebug", artifactNotation)


    /**
     * Adds an artifact to the 'kspAndroidTestDebug' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspAndroidTestDebug`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("kspAndroidTestDebug", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'kspAndroidTestRelease' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspAndroidTestRelease`(dependencyNotation: Any): Dependency? =
        add("kspAndroidTestRelease", dependencyNotation)


    /**
     * Adds a dependency to the 'kspAndroidTestRelease' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspAndroidTestRelease`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "kspAndroidTestRelease", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'kspAndroidTestRelease' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspAndroidTestRelease`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspAndroidTestRelease", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspAndroidTestRelease' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspAndroidTestRelease`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspAndroidTestRelease", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspAndroidTestRelease' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`kspAndroidTestRelease`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "kspAndroidTestRelease", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspAndroidTestRelease' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`kspAndroidTestRelease`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("kspAndroidTestRelease", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'kspAndroidTestRelease' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspAndroidTestRelease`(constraintNotation: Any): DependencyConstraint =
        add("kspAndroidTestRelease", constraintNotation)


    /**
     * Adds a dependency constraint to the 'kspAndroidTestRelease' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspAndroidTestRelease`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("kspAndroidTestRelease", constraintNotation, block)


    /**
     * Adds an artifact to the 'kspAndroidTestRelease' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspAndroidTestRelease`(artifactNotation: Any): PublishArtifact =
        add("kspAndroidTestRelease", artifactNotation)


    /**
     * Adds an artifact to the 'kspAndroidTestRelease' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspAndroidTestRelease`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("kspAndroidTestRelease", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'kspDebug' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspDebug`(dependencyNotation: Any): Dependency? =
        add("kspDebug", dependencyNotation)


    /**
     * Adds a dependency to the 'kspDebug' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspDebug`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "kspDebug", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'kspDebug' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspDebug`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspDebug", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspDebug' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspDebug`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspDebug", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspDebug' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`kspDebug`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "kspDebug", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspDebug' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`kspDebug`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("kspDebug", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'kspDebug' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspDebug`(constraintNotation: Any): DependencyConstraint =
        add("kspDebug", constraintNotation)


    /**
     * Adds a dependency constraint to the 'kspDebug' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspDebug`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("kspDebug", constraintNotation, block)


    /**
     * Adds an artifact to the 'kspDebug' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspDebug`(artifactNotation: Any): PublishArtifact =
        add("kspDebug", artifactNotation)


    /**
     * Adds an artifact to the 'kspDebug' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspDebug`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("kspDebug", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'kspDebugAndroidTestKotlinProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspDebugAndroidTestKotlinProcessorClasspath`(dependencyNotation: Any): Dependency? =
        add("kspDebugAndroidTestKotlinProcessorClasspath", dependencyNotation)


    /**
     * Adds a dependency to the 'kspDebugAndroidTestKotlinProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspDebugAndroidTestKotlinProcessorClasspath`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "kspDebugAndroidTestKotlinProcessorClasspath", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'kspDebugAndroidTestKotlinProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspDebugAndroidTestKotlinProcessorClasspath`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspDebugAndroidTestKotlinProcessorClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspDebugAndroidTestKotlinProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspDebugAndroidTestKotlinProcessorClasspath`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspDebugAndroidTestKotlinProcessorClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspDebugAndroidTestKotlinProcessorClasspath' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`kspDebugAndroidTestKotlinProcessorClasspath`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "kspDebugAndroidTestKotlinProcessorClasspath", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspDebugAndroidTestKotlinProcessorClasspath' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`kspDebugAndroidTestKotlinProcessorClasspath`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("kspDebugAndroidTestKotlinProcessorClasspath", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'kspDebugAndroidTestKotlinProcessorClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspDebugAndroidTestKotlinProcessorClasspath`(constraintNotation: Any): DependencyConstraint =
        add("kspDebugAndroidTestKotlinProcessorClasspath", constraintNotation)


    /**
     * Adds a dependency constraint to the 'kspDebugAndroidTestKotlinProcessorClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspDebugAndroidTestKotlinProcessorClasspath`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("kspDebugAndroidTestKotlinProcessorClasspath", constraintNotation, block)


    /**
     * Adds an artifact to the 'kspDebugAndroidTestKotlinProcessorClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspDebugAndroidTestKotlinProcessorClasspath`(artifactNotation: Any): PublishArtifact =
        add("kspDebugAndroidTestKotlinProcessorClasspath", artifactNotation)


    /**
     * Adds an artifact to the 'kspDebugAndroidTestKotlinProcessorClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspDebugAndroidTestKotlinProcessorClasspath`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("kspDebugAndroidTestKotlinProcessorClasspath", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'kspDebugKotlinProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspDebugKotlinProcessorClasspath`(dependencyNotation: Any): Dependency? =
        add("kspDebugKotlinProcessorClasspath", dependencyNotation)


    /**
     * Adds a dependency to the 'kspDebugKotlinProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspDebugKotlinProcessorClasspath`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "kspDebugKotlinProcessorClasspath", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'kspDebugKotlinProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspDebugKotlinProcessorClasspath`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspDebugKotlinProcessorClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspDebugKotlinProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspDebugKotlinProcessorClasspath`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspDebugKotlinProcessorClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspDebugKotlinProcessorClasspath' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`kspDebugKotlinProcessorClasspath`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "kspDebugKotlinProcessorClasspath", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspDebugKotlinProcessorClasspath' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`kspDebugKotlinProcessorClasspath`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("kspDebugKotlinProcessorClasspath", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'kspDebugKotlinProcessorClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspDebugKotlinProcessorClasspath`(constraintNotation: Any): DependencyConstraint =
        add("kspDebugKotlinProcessorClasspath", constraintNotation)


    /**
     * Adds a dependency constraint to the 'kspDebugKotlinProcessorClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspDebugKotlinProcessorClasspath`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("kspDebugKotlinProcessorClasspath", constraintNotation, block)


    /**
     * Adds an artifact to the 'kspDebugKotlinProcessorClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspDebugKotlinProcessorClasspath`(artifactNotation: Any): PublishArtifact =
        add("kspDebugKotlinProcessorClasspath", artifactNotation)


    /**
     * Adds an artifact to the 'kspDebugKotlinProcessorClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspDebugKotlinProcessorClasspath`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("kspDebugKotlinProcessorClasspath", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'kspDebugUnitTestKotlinProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspDebugUnitTestKotlinProcessorClasspath`(dependencyNotation: Any): Dependency? =
        add("kspDebugUnitTestKotlinProcessorClasspath", dependencyNotation)


    /**
     * Adds a dependency to the 'kspDebugUnitTestKotlinProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspDebugUnitTestKotlinProcessorClasspath`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "kspDebugUnitTestKotlinProcessorClasspath", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'kspDebugUnitTestKotlinProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspDebugUnitTestKotlinProcessorClasspath`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspDebugUnitTestKotlinProcessorClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspDebugUnitTestKotlinProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspDebugUnitTestKotlinProcessorClasspath`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspDebugUnitTestKotlinProcessorClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspDebugUnitTestKotlinProcessorClasspath' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`kspDebugUnitTestKotlinProcessorClasspath`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "kspDebugUnitTestKotlinProcessorClasspath", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspDebugUnitTestKotlinProcessorClasspath' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`kspDebugUnitTestKotlinProcessorClasspath`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("kspDebugUnitTestKotlinProcessorClasspath", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'kspDebugUnitTestKotlinProcessorClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspDebugUnitTestKotlinProcessorClasspath`(constraintNotation: Any): DependencyConstraint =
        add("kspDebugUnitTestKotlinProcessorClasspath", constraintNotation)


    /**
     * Adds a dependency constraint to the 'kspDebugUnitTestKotlinProcessorClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspDebugUnitTestKotlinProcessorClasspath`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("kspDebugUnitTestKotlinProcessorClasspath", constraintNotation, block)


    /**
     * Adds an artifact to the 'kspDebugUnitTestKotlinProcessorClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspDebugUnitTestKotlinProcessorClasspath`(artifactNotation: Any): PublishArtifact =
        add("kspDebugUnitTestKotlinProcessorClasspath", artifactNotation)


    /**
     * Adds an artifact to the 'kspDebugUnitTestKotlinProcessorClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspDebugUnitTestKotlinProcessorClasspath`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("kspDebugUnitTestKotlinProcessorClasspath", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'kspRelease' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspRelease`(dependencyNotation: Any): Dependency? =
        add("kspRelease", dependencyNotation)


    /**
     * Adds a dependency to the 'kspRelease' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspRelease`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "kspRelease", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'kspRelease' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspRelease`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspRelease", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspRelease' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspRelease`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspRelease", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspRelease' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`kspRelease`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "kspRelease", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspRelease' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`kspRelease`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("kspRelease", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'kspRelease' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspRelease`(constraintNotation: Any): DependencyConstraint =
        add("kspRelease", constraintNotation)


    /**
     * Adds a dependency constraint to the 'kspRelease' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspRelease`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("kspRelease", constraintNotation, block)


    /**
     * Adds an artifact to the 'kspRelease' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspRelease`(artifactNotation: Any): PublishArtifact =
        add("kspRelease", artifactNotation)


    /**
     * Adds an artifact to the 'kspRelease' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspRelease`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("kspRelease", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'kspReleaseKotlinProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspReleaseKotlinProcessorClasspath`(dependencyNotation: Any): Dependency? =
        add("kspReleaseKotlinProcessorClasspath", dependencyNotation)


    /**
     * Adds a dependency to the 'kspReleaseKotlinProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspReleaseKotlinProcessorClasspath`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "kspReleaseKotlinProcessorClasspath", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'kspReleaseKotlinProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspReleaseKotlinProcessorClasspath`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspReleaseKotlinProcessorClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspReleaseKotlinProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspReleaseKotlinProcessorClasspath`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspReleaseKotlinProcessorClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspReleaseKotlinProcessorClasspath' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`kspReleaseKotlinProcessorClasspath`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "kspReleaseKotlinProcessorClasspath", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspReleaseKotlinProcessorClasspath' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`kspReleaseKotlinProcessorClasspath`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("kspReleaseKotlinProcessorClasspath", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'kspReleaseKotlinProcessorClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspReleaseKotlinProcessorClasspath`(constraintNotation: Any): DependencyConstraint =
        add("kspReleaseKotlinProcessorClasspath", constraintNotation)


    /**
     * Adds a dependency constraint to the 'kspReleaseKotlinProcessorClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspReleaseKotlinProcessorClasspath`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("kspReleaseKotlinProcessorClasspath", constraintNotation, block)


    /**
     * Adds an artifact to the 'kspReleaseKotlinProcessorClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspReleaseKotlinProcessorClasspath`(artifactNotation: Any): PublishArtifact =
        add("kspReleaseKotlinProcessorClasspath", artifactNotation)


    /**
     * Adds an artifact to the 'kspReleaseKotlinProcessorClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspReleaseKotlinProcessorClasspath`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("kspReleaseKotlinProcessorClasspath", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'kspTest' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspTest`(dependencyNotation: Any): Dependency? =
        add("kspTest", dependencyNotation)


    /**
     * Adds a dependency to the 'kspTest' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspTest`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "kspTest", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'kspTest' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspTest`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspTest", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspTest' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspTest`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspTest", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspTest' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`kspTest`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "kspTest", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspTest' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`kspTest`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("kspTest", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'kspTest' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspTest`(constraintNotation: Any): DependencyConstraint =
        add("kspTest", constraintNotation)


    /**
     * Adds a dependency constraint to the 'kspTest' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspTest`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("kspTest", constraintNotation, block)


    /**
     * Adds an artifact to the 'kspTest' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspTest`(artifactNotation: Any): PublishArtifact =
        add("kspTest", artifactNotation)


    /**
     * Adds an artifact to the 'kspTest' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspTest`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("kspTest", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'kspTestDebug' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspTestDebug`(dependencyNotation: Any): Dependency? =
        add("kspTestDebug", dependencyNotation)


    /**
     * Adds a dependency to the 'kspTestDebug' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspTestDebug`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "kspTestDebug", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'kspTestDebug' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspTestDebug`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspTestDebug", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspTestDebug' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspTestDebug`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspTestDebug", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspTestDebug' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`kspTestDebug`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "kspTestDebug", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspTestDebug' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`kspTestDebug`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("kspTestDebug", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'kspTestDebug' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspTestDebug`(constraintNotation: Any): DependencyConstraint =
        add("kspTestDebug", constraintNotation)


    /**
     * Adds a dependency constraint to the 'kspTestDebug' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspTestDebug`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("kspTestDebug", constraintNotation, block)


    /**
     * Adds an artifact to the 'kspTestDebug' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspTestDebug`(artifactNotation: Any): PublishArtifact =
        add("kspTestDebug", artifactNotation)


    /**
     * Adds an artifact to the 'kspTestDebug' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspTestDebug`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("kspTestDebug", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'kspTestFixtures' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspTestFixtures`(dependencyNotation: Any): Dependency? =
        add("kspTestFixtures", dependencyNotation)


    /**
     * Adds a dependency to the 'kspTestFixtures' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspTestFixtures`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "kspTestFixtures", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'kspTestFixtures' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspTestFixtures`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspTestFixtures", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspTestFixtures' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspTestFixtures`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspTestFixtures", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspTestFixtures' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`kspTestFixtures`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "kspTestFixtures", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspTestFixtures' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`kspTestFixtures`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("kspTestFixtures", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'kspTestFixtures' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspTestFixtures`(constraintNotation: Any): DependencyConstraint =
        add("kspTestFixtures", constraintNotation)


    /**
     * Adds a dependency constraint to the 'kspTestFixtures' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspTestFixtures`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("kspTestFixtures", constraintNotation, block)


    /**
     * Adds an artifact to the 'kspTestFixtures' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspTestFixtures`(artifactNotation: Any): PublishArtifact =
        add("kspTestFixtures", artifactNotation)


    /**
     * Adds an artifact to the 'kspTestFixtures' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspTestFixtures`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("kspTestFixtures", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'kspTestFixturesDebug' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspTestFixturesDebug`(dependencyNotation: Any): Dependency? =
        add("kspTestFixturesDebug", dependencyNotation)


    /**
     * Adds a dependency to the 'kspTestFixturesDebug' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspTestFixturesDebug`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "kspTestFixturesDebug", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'kspTestFixturesDebug' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspTestFixturesDebug`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspTestFixturesDebug", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspTestFixturesDebug' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspTestFixturesDebug`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspTestFixturesDebug", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspTestFixturesDebug' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`kspTestFixturesDebug`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "kspTestFixturesDebug", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspTestFixturesDebug' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`kspTestFixturesDebug`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("kspTestFixturesDebug", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'kspTestFixturesDebug' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspTestFixturesDebug`(constraintNotation: Any): DependencyConstraint =
        add("kspTestFixturesDebug", constraintNotation)


    /**
     * Adds a dependency constraint to the 'kspTestFixturesDebug' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspTestFixturesDebug`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("kspTestFixturesDebug", constraintNotation, block)


    /**
     * Adds an artifact to the 'kspTestFixturesDebug' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspTestFixturesDebug`(artifactNotation: Any): PublishArtifact =
        add("kspTestFixturesDebug", artifactNotation)


    /**
     * Adds an artifact to the 'kspTestFixturesDebug' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspTestFixturesDebug`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("kspTestFixturesDebug", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'kspTestFixturesRelease' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspTestFixturesRelease`(dependencyNotation: Any): Dependency? =
        add("kspTestFixturesRelease", dependencyNotation)


    /**
     * Adds a dependency to the 'kspTestFixturesRelease' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspTestFixturesRelease`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "kspTestFixturesRelease", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'kspTestFixturesRelease' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspTestFixturesRelease`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspTestFixturesRelease", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspTestFixturesRelease' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspTestFixturesRelease`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspTestFixturesRelease", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspTestFixturesRelease' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`kspTestFixturesRelease`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "kspTestFixturesRelease", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspTestFixturesRelease' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`kspTestFixturesRelease`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("kspTestFixturesRelease", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'kspTestFixturesRelease' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspTestFixturesRelease`(constraintNotation: Any): DependencyConstraint =
        add("kspTestFixturesRelease", constraintNotation)


    /**
     * Adds a dependency constraint to the 'kspTestFixturesRelease' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspTestFixturesRelease`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("kspTestFixturesRelease", constraintNotation, block)


    /**
     * Adds an artifact to the 'kspTestFixturesRelease' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspTestFixturesRelease`(artifactNotation: Any): PublishArtifact =
        add("kspTestFixturesRelease", artifactNotation)


    /**
     * Adds an artifact to the 'kspTestFixturesRelease' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspTestFixturesRelease`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("kspTestFixturesRelease", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'kspTestRelease' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspTestRelease`(dependencyNotation: Any): Dependency? =
        add("kspTestRelease", dependencyNotation)


    /**
     * Adds a dependency to the 'kspTestRelease' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspTestRelease`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "kspTestRelease", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'kspTestRelease' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspTestRelease`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspTestRelease", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspTestRelease' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kspTestRelease`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kspTestRelease", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspTestRelease' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`kspTestRelease`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "kspTestRelease", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kspTestRelease' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`kspTestRelease`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("kspTestRelease", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'kspTestRelease' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspTestRelease`(constraintNotation: Any): DependencyConstraint =
        add("kspTestRelease", constraintNotation)


    /**
     * Adds a dependency constraint to the 'kspTestRelease' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kspTestRelease`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("kspTestRelease", constraintNotation, block)


    /**
     * Adds an artifact to the 'kspTestRelease' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspTestRelease`(artifactNotation: Any): PublishArtifact =
        add("kspTestRelease", artifactNotation)


    /**
     * Adds an artifact to the 'kspTestRelease' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kspTestRelease`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("kspTestRelease", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'lintChecks' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`lintChecks`(dependencyNotation: Any): Dependency? =
        add("lintChecks", dependencyNotation)


    /**
     * Adds a dependency to the 'lintChecks' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`lintChecks`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "lintChecks", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'lintChecks' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`lintChecks`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "lintChecks", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'lintChecks' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`lintChecks`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "lintChecks", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'lintChecks' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`lintChecks`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "lintChecks", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'lintChecks' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`lintChecks`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("lintChecks", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'lintChecks' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`lintChecks`(constraintNotation: Any): DependencyConstraint =
        add("lintChecks", constraintNotation)


    /**
     * Adds a dependency constraint to the 'lintChecks' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`lintChecks`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("lintChecks", constraintNotation, block)


    /**
     * Adds an artifact to the 'lintChecks' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`lintChecks`(artifactNotation: Any): PublishArtifact =
        add("lintChecks", artifactNotation)


    /**
     * Adds an artifact to the 'lintChecks' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`lintChecks`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("lintChecks", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'lintPublish' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`lintPublish`(dependencyNotation: Any): Dependency? =
        add("lintPublish", dependencyNotation)


    /**
     * Adds a dependency to the 'lintPublish' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`lintPublish`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "lintPublish", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'lintPublish' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`lintPublish`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "lintPublish", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'lintPublish' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`lintPublish`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "lintPublish", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'lintPublish' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`lintPublish`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "lintPublish", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'lintPublish' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`lintPublish`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("lintPublish", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'lintPublish' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`lintPublish`(constraintNotation: Any): DependencyConstraint =
        add("lintPublish", constraintNotation)


    /**
     * Adds a dependency constraint to the 'lintPublish' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`lintPublish`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("lintPublish", constraintNotation, block)


    /**
     * Adds an artifact to the 'lintPublish' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`lintPublish`(artifactNotation: Any): PublishArtifact =
        add("lintPublish", artifactNotation)


    /**
     * Adds an artifact to the 'lintPublish' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`lintPublish`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("lintPublish", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'releaseAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseAnnotationProcessor`(dependencyNotation: Any): Dependency? =
        add("releaseAnnotationProcessor", dependencyNotation)


    /**
     * Adds a dependency to the 'releaseAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseAnnotationProcessor`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "releaseAnnotationProcessor", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'releaseAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseAnnotationProcessor`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "releaseAnnotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseAnnotationProcessor`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "releaseAnnotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseAnnotationProcessor' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`releaseAnnotationProcessor`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "releaseAnnotationProcessor", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseAnnotationProcessor' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`releaseAnnotationProcessor`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("releaseAnnotationProcessor", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'releaseAnnotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`releaseAnnotationProcessor`(constraintNotation: Any): DependencyConstraint =
        add("releaseAnnotationProcessor", constraintNotation)


    /**
     * Adds a dependency constraint to the 'releaseAnnotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`releaseAnnotationProcessor`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("releaseAnnotationProcessor", constraintNotation, block)


    /**
     * Adds an artifact to the 'releaseAnnotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`releaseAnnotationProcessor`(artifactNotation: Any): PublishArtifact =
        add("releaseAnnotationProcessor", artifactNotation)


    /**
     * Adds an artifact to the 'releaseAnnotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`releaseAnnotationProcessor`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("releaseAnnotationProcessor", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'releaseAnnotationProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseAnnotationProcessorClasspath`(dependencyNotation: Any): Dependency? =
        add("releaseAnnotationProcessorClasspath", dependencyNotation)


    /**
     * Adds a dependency to the 'releaseAnnotationProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseAnnotationProcessorClasspath`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "releaseAnnotationProcessorClasspath", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'releaseAnnotationProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseAnnotationProcessorClasspath`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "releaseAnnotationProcessorClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseAnnotationProcessorClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseAnnotationProcessorClasspath`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "releaseAnnotationProcessorClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseAnnotationProcessorClasspath' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`releaseAnnotationProcessorClasspath`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "releaseAnnotationProcessorClasspath", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseAnnotationProcessorClasspath' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`releaseAnnotationProcessorClasspath`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("releaseAnnotationProcessorClasspath", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'releaseAnnotationProcessorClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`releaseAnnotationProcessorClasspath`(constraintNotation: Any): DependencyConstraint =
        add("releaseAnnotationProcessorClasspath", constraintNotation)


    /**
     * Adds a dependency constraint to the 'releaseAnnotationProcessorClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`releaseAnnotationProcessorClasspath`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("releaseAnnotationProcessorClasspath", constraintNotation, block)


    /**
     * Adds an artifact to the 'releaseAnnotationProcessorClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`releaseAnnotationProcessorClasspath`(artifactNotation: Any): PublishArtifact =
        add("releaseAnnotationProcessorClasspath", artifactNotation)


    /**
     * Adds an artifact to the 'releaseAnnotationProcessorClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`releaseAnnotationProcessorClasspath`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("releaseAnnotationProcessorClasspath", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'releaseApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseApi`(dependencyNotation: Any): Dependency? =
        add("releaseApi", dependencyNotation)


    /**
     * Adds a dependency to the 'releaseApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseApi`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "releaseApi", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'releaseApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseApi`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "releaseApi", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseApi`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "releaseApi", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseApi' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`releaseApi`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "releaseApi", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseApi' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`releaseApi`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("releaseApi", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'releaseApi' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`releaseApi`(constraintNotation: Any): DependencyConstraint =
        add("releaseApi", constraintNotation)


    /**
     * Adds a dependency constraint to the 'releaseApi' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`releaseApi`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("releaseApi", constraintNotation, block)


    /**
     * Adds an artifact to the 'releaseApi' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`releaseApi`(artifactNotation: Any): PublishArtifact =
        add("releaseApi", artifactNotation)


    /**
     * Adds an artifact to the 'releaseApi' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`releaseApi`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("releaseApi", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'releaseApiElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseApiElements`(dependencyNotation: Any): Dependency? =
        add("releaseApiElements", dependencyNotation)


    /**
     * Adds a dependency to the 'releaseApiElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseApiElements`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "releaseApiElements", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'releaseApiElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseApiElements`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "releaseApiElements", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseApiElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseApiElements`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "releaseApiElements", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseApiElements' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`releaseApiElements`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "releaseApiElements", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseApiElements' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`releaseApiElements`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("releaseApiElements", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'releaseApiElements' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`releaseApiElements`(constraintNotation: Any): DependencyConstraint =
        add("releaseApiElements", constraintNotation)


    /**
     * Adds a dependency constraint to the 'releaseApiElements' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`releaseApiElements`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("releaseApiElements", constraintNotation, block)


    /**
     * Adds an artifact to the 'releaseApiElements' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`releaseApiElements`(artifactNotation: Any): PublishArtifact =
        add("releaseApiElements", artifactNotation)


    /**
     * Adds an artifact to the 'releaseApiElements' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`releaseApiElements`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("releaseApiElements", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'releaseCompileClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseCompileClasspath`(dependencyNotation: Any): Dependency? =
        add("releaseCompileClasspath", dependencyNotation)


    /**
     * Adds a dependency to the 'releaseCompileClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseCompileClasspath`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "releaseCompileClasspath", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'releaseCompileClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseCompileClasspath`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "releaseCompileClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseCompileClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseCompileClasspath`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "releaseCompileClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseCompileClasspath' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`releaseCompileClasspath`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "releaseCompileClasspath", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseCompileClasspath' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`releaseCompileClasspath`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("releaseCompileClasspath", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'releaseCompileClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`releaseCompileClasspath`(constraintNotation: Any): DependencyConstraint =
        add("releaseCompileClasspath", constraintNotation)


    /**
     * Adds a dependency constraint to the 'releaseCompileClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`releaseCompileClasspath`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("releaseCompileClasspath", constraintNotation, block)


    /**
     * Adds an artifact to the 'releaseCompileClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`releaseCompileClasspath`(artifactNotation: Any): PublishArtifact =
        add("releaseCompileClasspath", artifactNotation)


    /**
     * Adds an artifact to the 'releaseCompileClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`releaseCompileClasspath`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("releaseCompileClasspath", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'releaseCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseCompileOnly`(dependencyNotation: Any): Dependency? =
        add("releaseCompileOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'releaseCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseCompileOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "releaseCompileOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'releaseCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseCompileOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "releaseCompileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseCompileOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "releaseCompileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseCompileOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`releaseCompileOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "releaseCompileOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseCompileOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`releaseCompileOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("releaseCompileOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'releaseCompileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`releaseCompileOnly`(constraintNotation: Any): DependencyConstraint =
        add("releaseCompileOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'releaseCompileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`releaseCompileOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("releaseCompileOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'releaseCompileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`releaseCompileOnly`(artifactNotation: Any): PublishArtifact =
        add("releaseCompileOnly", artifactNotation)


    /**
     * Adds an artifact to the 'releaseCompileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`releaseCompileOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("releaseCompileOnly", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'releaseCompileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseCompileOnlyApi`(dependencyNotation: Any): Dependency? =
        add("releaseCompileOnlyApi", dependencyNotation)


    /**
     * Adds a dependency to the 'releaseCompileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseCompileOnlyApi`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "releaseCompileOnlyApi", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'releaseCompileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseCompileOnlyApi`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "releaseCompileOnlyApi", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseCompileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseCompileOnlyApi`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "releaseCompileOnlyApi", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseCompileOnlyApi' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`releaseCompileOnlyApi`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "releaseCompileOnlyApi", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseCompileOnlyApi' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`releaseCompileOnlyApi`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("releaseCompileOnlyApi", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'releaseCompileOnlyApi' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`releaseCompileOnlyApi`(constraintNotation: Any): DependencyConstraint =
        add("releaseCompileOnlyApi", constraintNotation)


    /**
     * Adds a dependency constraint to the 'releaseCompileOnlyApi' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`releaseCompileOnlyApi`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("releaseCompileOnlyApi", constraintNotation, block)


    /**
     * Adds an artifact to the 'releaseCompileOnlyApi' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`releaseCompileOnlyApi`(artifactNotation: Any): PublishArtifact =
        add("releaseCompileOnlyApi", artifactNotation)


    /**
     * Adds an artifact to the 'releaseCompileOnlyApi' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`releaseCompileOnlyApi`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("releaseCompileOnlyApi", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'releaseImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseImplementation`(dependencyNotation: Any): Dependency? =
        add("releaseImplementation", dependencyNotation)


    /**
     * Adds a dependency to the 'releaseImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseImplementation`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "releaseImplementation", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'releaseImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseImplementation`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "releaseImplementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseImplementation`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "releaseImplementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseImplementation' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`releaseImplementation`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "releaseImplementation", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseImplementation' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`releaseImplementation`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("releaseImplementation", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'releaseImplementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`releaseImplementation`(constraintNotation: Any): DependencyConstraint =
        add("releaseImplementation", constraintNotation)


    /**
     * Adds a dependency constraint to the 'releaseImplementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`releaseImplementation`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("releaseImplementation", constraintNotation, block)


    /**
     * Adds an artifact to the 'releaseImplementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`releaseImplementation`(artifactNotation: Any): PublishArtifact =
        add("releaseImplementation", artifactNotation)


    /**
     * Adds an artifact to the 'releaseImplementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`releaseImplementation`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("releaseImplementation", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'releaseRuntimeClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseRuntimeClasspath`(dependencyNotation: Any): Dependency? =
        add("releaseRuntimeClasspath", dependencyNotation)


    /**
     * Adds a dependency to the 'releaseRuntimeClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseRuntimeClasspath`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "releaseRuntimeClasspath", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'releaseRuntimeClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseRuntimeClasspath`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "releaseRuntimeClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseRuntimeClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseRuntimeClasspath`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "releaseRuntimeClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseRuntimeClasspath' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`releaseRuntimeClasspath`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "releaseRuntimeClasspath", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseRuntimeClasspath' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`releaseRuntimeClasspath`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("releaseRuntimeClasspath", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'releaseRuntimeClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`releaseRuntimeClasspath`(constraintNotation: Any): DependencyConstraint =
        add("releaseRuntimeClasspath", constraintNotation)


    /**
     * Adds a dependency constraint to the 'releaseRuntimeClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`releaseRuntimeClasspath`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("releaseRuntimeClasspath", constraintNotation, block)


    /**
     * Adds an artifact to the 'releaseRuntimeClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`releaseRuntimeClasspath`(artifactNotation: Any): PublishArtifact =
        add("releaseRuntimeClasspath", artifactNotation)


    /**
     * Adds an artifact to the 'releaseRuntimeClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`releaseRuntimeClasspath`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("releaseRuntimeClasspath", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'releaseRuntimeElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseRuntimeElements`(dependencyNotation: Any): Dependency? =
        add("releaseRuntimeElements", dependencyNotation)


    /**
     * Adds a dependency to the 'releaseRuntimeElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseRuntimeElements`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "releaseRuntimeElements", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'releaseRuntimeElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseRuntimeElements`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "releaseRuntimeElements", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseRuntimeElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseRuntimeElements`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "releaseRuntimeElements", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseRuntimeElements' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`releaseRuntimeElements`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "releaseRuntimeElements", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseRuntimeElements' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`releaseRuntimeElements`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("releaseRuntimeElements", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'releaseRuntimeElements' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`releaseRuntimeElements`(constraintNotation: Any): DependencyConstraint =
        add("releaseRuntimeElements", constraintNotation)


    /**
     * Adds a dependency constraint to the 'releaseRuntimeElements' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`releaseRuntimeElements`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("releaseRuntimeElements", constraintNotation, block)


    /**
     * Adds an artifact to the 'releaseRuntimeElements' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`releaseRuntimeElements`(artifactNotation: Any): PublishArtifact =
        add("releaseRuntimeElements", artifactNotation)


    /**
     * Adds an artifact to the 'releaseRuntimeElements' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`releaseRuntimeElements`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("releaseRuntimeElements", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'releaseRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseRuntimeOnly`(dependencyNotation: Any): Dependency? =
        add("releaseRuntimeOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'releaseRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseRuntimeOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "releaseRuntimeOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'releaseRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseRuntimeOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "releaseRuntimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`releaseRuntimeOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "releaseRuntimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseRuntimeOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`releaseRuntimeOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "releaseRuntimeOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'releaseRuntimeOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`releaseRuntimeOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("releaseRuntimeOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'releaseRuntimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`releaseRuntimeOnly`(constraintNotation: Any): DependencyConstraint =
        add("releaseRuntimeOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'releaseRuntimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`releaseRuntimeOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("releaseRuntimeOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'releaseRuntimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`releaseRuntimeOnly`(artifactNotation: Any): PublishArtifact =
        add("releaseRuntimeOnly", artifactNotation)


    /**
     * Adds an artifact to the 'releaseRuntimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`releaseRuntimeOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("releaseRuntimeOnly", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'runtimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`runtimeOnly`(dependencyNotation: Any): Dependency? =
        add("runtimeOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'runtimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`runtimeOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "runtimeOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'runtimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`runtimeOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "runtimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'runtimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`runtimeOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "runtimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'runtimeOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`runtimeOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "runtimeOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'runtimeOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`runtimeOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("runtimeOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'runtimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`runtimeOnly`(constraintNotation: Any): DependencyConstraint =
        add("runtimeOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'runtimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`runtimeOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("runtimeOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'runtimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`runtimeOnly`(artifactNotation: Any): PublishArtifact =
        add("runtimeOnly", artifactNotation)


    /**
     * Adds an artifact to the 'runtimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`runtimeOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("runtimeOnly", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testAnnotationProcessor`(dependencyNotation: Any): Dependency? =
        add("testAnnotationProcessor", dependencyNotation)


    /**
     * Adds a dependency to the 'testAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testAnnotationProcessor`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testAnnotationProcessor", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testAnnotationProcessor`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testAnnotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testAnnotationProcessor`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testAnnotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testAnnotationProcessor' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testAnnotationProcessor`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testAnnotationProcessor", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testAnnotationProcessor' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testAnnotationProcessor`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testAnnotationProcessor", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testAnnotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testAnnotationProcessor`(constraintNotation: Any): DependencyConstraint =
        add("testAnnotationProcessor", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testAnnotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testAnnotationProcessor`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testAnnotationProcessor", constraintNotation, block)


    /**
     * Adds an artifact to the 'testAnnotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testAnnotationProcessor`(artifactNotation: Any): PublishArtifact =
        add("testAnnotationProcessor", artifactNotation)


    /**
     * Adds an artifact to the 'testAnnotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testAnnotationProcessor`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testAnnotationProcessor", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testCompileOnly`(dependencyNotation: Any): Dependency? =
        add("testCompileOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'testCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testCompileOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testCompileOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testCompileOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testCompileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testCompileOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testCompileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testCompileOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testCompileOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testCompileOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testCompileOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testCompileOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testCompileOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testCompileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testCompileOnly`(constraintNotation: Any): DependencyConstraint =
        add("testCompileOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testCompileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testCompileOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testCompileOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'testCompileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testCompileOnly`(artifactNotation: Any): PublishArtifact =
        add("testCompileOnly", artifactNotation)


    /**
     * Adds an artifact to the 'testCompileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testCompileOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testCompileOnly", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testDebugAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testDebugAnnotationProcessor`(dependencyNotation: Any): Dependency? =
        add("testDebugAnnotationProcessor", dependencyNotation)


    /**
     * Adds a dependency to the 'testDebugAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testDebugAnnotationProcessor`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testDebugAnnotationProcessor", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testDebugAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testDebugAnnotationProcessor`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testDebugAnnotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testDebugAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testDebugAnnotationProcessor`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testDebugAnnotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testDebugAnnotationProcessor' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testDebugAnnotationProcessor`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testDebugAnnotationProcessor", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testDebugAnnotationProcessor' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testDebugAnnotationProcessor`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testDebugAnnotationProcessor", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testDebugAnnotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testDebugAnnotationProcessor`(constraintNotation: Any): DependencyConstraint =
        add("testDebugAnnotationProcessor", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testDebugAnnotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testDebugAnnotationProcessor`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testDebugAnnotationProcessor", constraintNotation, block)


    /**
     * Adds an artifact to the 'testDebugAnnotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testDebugAnnotationProcessor`(artifactNotation: Any): PublishArtifact =
        add("testDebugAnnotationProcessor", artifactNotation)


    /**
     * Adds an artifact to the 'testDebugAnnotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testDebugAnnotationProcessor`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testDebugAnnotationProcessor", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testDebugCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testDebugCompileOnly`(dependencyNotation: Any): Dependency? =
        add("testDebugCompileOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'testDebugCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testDebugCompileOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testDebugCompileOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testDebugCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testDebugCompileOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testDebugCompileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testDebugCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testDebugCompileOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testDebugCompileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testDebugCompileOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testDebugCompileOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testDebugCompileOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testDebugCompileOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testDebugCompileOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testDebugCompileOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testDebugCompileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testDebugCompileOnly`(constraintNotation: Any): DependencyConstraint =
        add("testDebugCompileOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testDebugCompileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testDebugCompileOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testDebugCompileOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'testDebugCompileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testDebugCompileOnly`(artifactNotation: Any): PublishArtifact =
        add("testDebugCompileOnly", artifactNotation)


    /**
     * Adds an artifact to the 'testDebugCompileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testDebugCompileOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testDebugCompileOnly", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testDebugImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testDebugImplementation`(dependencyNotation: Any): Dependency? =
        add("testDebugImplementation", dependencyNotation)


    /**
     * Adds a dependency to the 'testDebugImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testDebugImplementation`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testDebugImplementation", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testDebugImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testDebugImplementation`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testDebugImplementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testDebugImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testDebugImplementation`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testDebugImplementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testDebugImplementation' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testDebugImplementation`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testDebugImplementation", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testDebugImplementation' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testDebugImplementation`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testDebugImplementation", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testDebugImplementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testDebugImplementation`(constraintNotation: Any): DependencyConstraint =
        add("testDebugImplementation", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testDebugImplementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testDebugImplementation`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testDebugImplementation", constraintNotation, block)


    /**
     * Adds an artifact to the 'testDebugImplementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testDebugImplementation`(artifactNotation: Any): PublishArtifact =
        add("testDebugImplementation", artifactNotation)


    /**
     * Adds an artifact to the 'testDebugImplementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testDebugImplementation`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testDebugImplementation", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testDebugRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testDebugRuntimeOnly`(dependencyNotation: Any): Dependency? =
        add("testDebugRuntimeOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'testDebugRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testDebugRuntimeOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testDebugRuntimeOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testDebugRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testDebugRuntimeOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testDebugRuntimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testDebugRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testDebugRuntimeOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testDebugRuntimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testDebugRuntimeOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testDebugRuntimeOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testDebugRuntimeOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testDebugRuntimeOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testDebugRuntimeOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testDebugRuntimeOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testDebugRuntimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testDebugRuntimeOnly`(constraintNotation: Any): DependencyConstraint =
        add("testDebugRuntimeOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testDebugRuntimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testDebugRuntimeOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testDebugRuntimeOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'testDebugRuntimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testDebugRuntimeOnly`(artifactNotation: Any): PublishArtifact =
        add("testDebugRuntimeOnly", artifactNotation)


    /**
     * Adds an artifact to the 'testDebugRuntimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testDebugRuntimeOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testDebugRuntimeOnly", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testFixturesAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesAnnotationProcessor`(dependencyNotation: Any): Dependency? =
        add("testFixturesAnnotationProcessor", dependencyNotation)


    /**
     * Adds a dependency to the 'testFixturesAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesAnnotationProcessor`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testFixturesAnnotationProcessor", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testFixturesAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesAnnotationProcessor`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesAnnotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesAnnotationProcessor`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesAnnotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesAnnotationProcessor' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testFixturesAnnotationProcessor`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testFixturesAnnotationProcessor", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesAnnotationProcessor' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testFixturesAnnotationProcessor`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testFixturesAnnotationProcessor", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testFixturesAnnotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesAnnotationProcessor`(constraintNotation: Any): DependencyConstraint =
        add("testFixturesAnnotationProcessor", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testFixturesAnnotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesAnnotationProcessor`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testFixturesAnnotationProcessor", constraintNotation, block)


    /**
     * Adds an artifact to the 'testFixturesAnnotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesAnnotationProcessor`(artifactNotation: Any): PublishArtifact =
        add("testFixturesAnnotationProcessor", artifactNotation)


    /**
     * Adds an artifact to the 'testFixturesAnnotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesAnnotationProcessor`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testFixturesAnnotationProcessor", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testFixturesApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesApi`(dependencyNotation: Any): Dependency? =
        add("testFixturesApi", dependencyNotation)


    /**
     * Adds a dependency to the 'testFixturesApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesApi`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testFixturesApi", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testFixturesApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesApi`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesApi", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesApi`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesApi", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesApi' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testFixturesApi`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testFixturesApi", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesApi' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testFixturesApi`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testFixturesApi", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testFixturesApi' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesApi`(constraintNotation: Any): DependencyConstraint =
        add("testFixturesApi", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testFixturesApi' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesApi`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testFixturesApi", constraintNotation, block)


    /**
     * Adds an artifact to the 'testFixturesApi' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesApi`(artifactNotation: Any): PublishArtifact =
        add("testFixturesApi", artifactNotation)


    /**
     * Adds an artifact to the 'testFixturesApi' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesApi`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testFixturesApi", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testFixturesCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesCompileOnly`(dependencyNotation: Any): Dependency? =
        add("testFixturesCompileOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'testFixturesCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesCompileOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testFixturesCompileOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testFixturesCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesCompileOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesCompileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesCompileOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesCompileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesCompileOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testFixturesCompileOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testFixturesCompileOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesCompileOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testFixturesCompileOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testFixturesCompileOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testFixturesCompileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesCompileOnly`(constraintNotation: Any): DependencyConstraint =
        add("testFixturesCompileOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testFixturesCompileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesCompileOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testFixturesCompileOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'testFixturesCompileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesCompileOnly`(artifactNotation: Any): PublishArtifact =
        add("testFixturesCompileOnly", artifactNotation)


    /**
     * Adds an artifact to the 'testFixturesCompileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesCompileOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testFixturesCompileOnly", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testFixturesCompileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesCompileOnlyApi`(dependencyNotation: Any): Dependency? =
        add("testFixturesCompileOnlyApi", dependencyNotation)


    /**
     * Adds a dependency to the 'testFixturesCompileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesCompileOnlyApi`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testFixturesCompileOnlyApi", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testFixturesCompileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesCompileOnlyApi`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesCompileOnlyApi", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesCompileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesCompileOnlyApi`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesCompileOnlyApi", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesCompileOnlyApi' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testFixturesCompileOnlyApi`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testFixturesCompileOnlyApi", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesCompileOnlyApi' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testFixturesCompileOnlyApi`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testFixturesCompileOnlyApi", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testFixturesCompileOnlyApi' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesCompileOnlyApi`(constraintNotation: Any): DependencyConstraint =
        add("testFixturesCompileOnlyApi", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testFixturesCompileOnlyApi' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesCompileOnlyApi`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testFixturesCompileOnlyApi", constraintNotation, block)


    /**
     * Adds an artifact to the 'testFixturesCompileOnlyApi' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesCompileOnlyApi`(artifactNotation: Any): PublishArtifact =
        add("testFixturesCompileOnlyApi", artifactNotation)


    /**
     * Adds an artifact to the 'testFixturesCompileOnlyApi' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesCompileOnlyApi`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testFixturesCompileOnlyApi", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testFixturesDebugAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesDebugAnnotationProcessor`(dependencyNotation: Any): Dependency? =
        add("testFixturesDebugAnnotationProcessor", dependencyNotation)


    /**
     * Adds a dependency to the 'testFixturesDebugAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesDebugAnnotationProcessor`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testFixturesDebugAnnotationProcessor", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testFixturesDebugAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesDebugAnnotationProcessor`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesDebugAnnotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesDebugAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesDebugAnnotationProcessor`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesDebugAnnotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesDebugAnnotationProcessor' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testFixturesDebugAnnotationProcessor`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testFixturesDebugAnnotationProcessor", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesDebugAnnotationProcessor' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testFixturesDebugAnnotationProcessor`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testFixturesDebugAnnotationProcessor", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testFixturesDebugAnnotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesDebugAnnotationProcessor`(constraintNotation: Any): DependencyConstraint =
        add("testFixturesDebugAnnotationProcessor", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testFixturesDebugAnnotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesDebugAnnotationProcessor`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testFixturesDebugAnnotationProcessor", constraintNotation, block)


    /**
     * Adds an artifact to the 'testFixturesDebugAnnotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesDebugAnnotationProcessor`(artifactNotation: Any): PublishArtifact =
        add("testFixturesDebugAnnotationProcessor", artifactNotation)


    /**
     * Adds an artifact to the 'testFixturesDebugAnnotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesDebugAnnotationProcessor`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testFixturesDebugAnnotationProcessor", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testFixturesDebugApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesDebugApi`(dependencyNotation: Any): Dependency? =
        add("testFixturesDebugApi", dependencyNotation)


    /**
     * Adds a dependency to the 'testFixturesDebugApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesDebugApi`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testFixturesDebugApi", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testFixturesDebugApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesDebugApi`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesDebugApi", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesDebugApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesDebugApi`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesDebugApi", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesDebugApi' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testFixturesDebugApi`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testFixturesDebugApi", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesDebugApi' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testFixturesDebugApi`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testFixturesDebugApi", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testFixturesDebugApi' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesDebugApi`(constraintNotation: Any): DependencyConstraint =
        add("testFixturesDebugApi", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testFixturesDebugApi' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesDebugApi`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testFixturesDebugApi", constraintNotation, block)


    /**
     * Adds an artifact to the 'testFixturesDebugApi' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesDebugApi`(artifactNotation: Any): PublishArtifact =
        add("testFixturesDebugApi", artifactNotation)


    /**
     * Adds an artifact to the 'testFixturesDebugApi' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesDebugApi`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testFixturesDebugApi", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testFixturesDebugCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesDebugCompileOnly`(dependencyNotation: Any): Dependency? =
        add("testFixturesDebugCompileOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'testFixturesDebugCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesDebugCompileOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testFixturesDebugCompileOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testFixturesDebugCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesDebugCompileOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesDebugCompileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesDebugCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesDebugCompileOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesDebugCompileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesDebugCompileOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testFixturesDebugCompileOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testFixturesDebugCompileOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesDebugCompileOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testFixturesDebugCompileOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testFixturesDebugCompileOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testFixturesDebugCompileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesDebugCompileOnly`(constraintNotation: Any): DependencyConstraint =
        add("testFixturesDebugCompileOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testFixturesDebugCompileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesDebugCompileOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testFixturesDebugCompileOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'testFixturesDebugCompileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesDebugCompileOnly`(artifactNotation: Any): PublishArtifact =
        add("testFixturesDebugCompileOnly", artifactNotation)


    /**
     * Adds an artifact to the 'testFixturesDebugCompileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesDebugCompileOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testFixturesDebugCompileOnly", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testFixturesDebugCompileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesDebugCompileOnlyApi`(dependencyNotation: Any): Dependency? =
        add("testFixturesDebugCompileOnlyApi", dependencyNotation)


    /**
     * Adds a dependency to the 'testFixturesDebugCompileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesDebugCompileOnlyApi`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testFixturesDebugCompileOnlyApi", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testFixturesDebugCompileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesDebugCompileOnlyApi`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesDebugCompileOnlyApi", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesDebugCompileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesDebugCompileOnlyApi`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesDebugCompileOnlyApi", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesDebugCompileOnlyApi' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testFixturesDebugCompileOnlyApi`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testFixturesDebugCompileOnlyApi", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesDebugCompileOnlyApi' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testFixturesDebugCompileOnlyApi`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testFixturesDebugCompileOnlyApi", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testFixturesDebugCompileOnlyApi' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesDebugCompileOnlyApi`(constraintNotation: Any): DependencyConstraint =
        add("testFixturesDebugCompileOnlyApi", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testFixturesDebugCompileOnlyApi' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesDebugCompileOnlyApi`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testFixturesDebugCompileOnlyApi", constraintNotation, block)


    /**
     * Adds an artifact to the 'testFixturesDebugCompileOnlyApi' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesDebugCompileOnlyApi`(artifactNotation: Any): PublishArtifact =
        add("testFixturesDebugCompileOnlyApi", artifactNotation)


    /**
     * Adds an artifact to the 'testFixturesDebugCompileOnlyApi' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesDebugCompileOnlyApi`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testFixturesDebugCompileOnlyApi", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testFixturesDebugImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesDebugImplementation`(dependencyNotation: Any): Dependency? =
        add("testFixturesDebugImplementation", dependencyNotation)


    /**
     * Adds a dependency to the 'testFixturesDebugImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesDebugImplementation`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testFixturesDebugImplementation", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testFixturesDebugImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesDebugImplementation`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesDebugImplementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesDebugImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesDebugImplementation`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesDebugImplementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesDebugImplementation' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testFixturesDebugImplementation`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testFixturesDebugImplementation", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesDebugImplementation' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testFixturesDebugImplementation`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testFixturesDebugImplementation", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testFixturesDebugImplementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesDebugImplementation`(constraintNotation: Any): DependencyConstraint =
        add("testFixturesDebugImplementation", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testFixturesDebugImplementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesDebugImplementation`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testFixturesDebugImplementation", constraintNotation, block)


    /**
     * Adds an artifact to the 'testFixturesDebugImplementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesDebugImplementation`(artifactNotation: Any): PublishArtifact =
        add("testFixturesDebugImplementation", artifactNotation)


    /**
     * Adds an artifact to the 'testFixturesDebugImplementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesDebugImplementation`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testFixturesDebugImplementation", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testFixturesDebugRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesDebugRuntimeOnly`(dependencyNotation: Any): Dependency? =
        add("testFixturesDebugRuntimeOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'testFixturesDebugRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesDebugRuntimeOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testFixturesDebugRuntimeOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testFixturesDebugRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesDebugRuntimeOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesDebugRuntimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesDebugRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesDebugRuntimeOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesDebugRuntimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesDebugRuntimeOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testFixturesDebugRuntimeOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testFixturesDebugRuntimeOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesDebugRuntimeOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testFixturesDebugRuntimeOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testFixturesDebugRuntimeOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testFixturesDebugRuntimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesDebugRuntimeOnly`(constraintNotation: Any): DependencyConstraint =
        add("testFixturesDebugRuntimeOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testFixturesDebugRuntimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesDebugRuntimeOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testFixturesDebugRuntimeOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'testFixturesDebugRuntimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesDebugRuntimeOnly`(artifactNotation: Any): PublishArtifact =
        add("testFixturesDebugRuntimeOnly", artifactNotation)


    /**
     * Adds an artifact to the 'testFixturesDebugRuntimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesDebugRuntimeOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testFixturesDebugRuntimeOnly", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testFixturesImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesImplementation`(dependencyNotation: Any): Dependency? =
        add("testFixturesImplementation", dependencyNotation)


    /**
     * Adds a dependency to the 'testFixturesImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesImplementation`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testFixturesImplementation", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testFixturesImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesImplementation`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesImplementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesImplementation`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesImplementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesImplementation' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testFixturesImplementation`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testFixturesImplementation", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesImplementation' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testFixturesImplementation`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testFixturesImplementation", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testFixturesImplementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesImplementation`(constraintNotation: Any): DependencyConstraint =
        add("testFixturesImplementation", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testFixturesImplementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesImplementation`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testFixturesImplementation", constraintNotation, block)


    /**
     * Adds an artifact to the 'testFixturesImplementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesImplementation`(artifactNotation: Any): PublishArtifact =
        add("testFixturesImplementation", artifactNotation)


    /**
     * Adds an artifact to the 'testFixturesImplementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesImplementation`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testFixturesImplementation", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testFixturesReleaseAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesReleaseAnnotationProcessor`(dependencyNotation: Any): Dependency? =
        add("testFixturesReleaseAnnotationProcessor", dependencyNotation)


    /**
     * Adds a dependency to the 'testFixturesReleaseAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesReleaseAnnotationProcessor`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testFixturesReleaseAnnotationProcessor", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testFixturesReleaseAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesReleaseAnnotationProcessor`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesReleaseAnnotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesReleaseAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesReleaseAnnotationProcessor`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesReleaseAnnotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesReleaseAnnotationProcessor' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testFixturesReleaseAnnotationProcessor`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testFixturesReleaseAnnotationProcessor", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesReleaseAnnotationProcessor' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testFixturesReleaseAnnotationProcessor`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testFixturesReleaseAnnotationProcessor", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testFixturesReleaseAnnotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesReleaseAnnotationProcessor`(constraintNotation: Any): DependencyConstraint =
        add("testFixturesReleaseAnnotationProcessor", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testFixturesReleaseAnnotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesReleaseAnnotationProcessor`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testFixturesReleaseAnnotationProcessor", constraintNotation, block)


    /**
     * Adds an artifact to the 'testFixturesReleaseAnnotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesReleaseAnnotationProcessor`(artifactNotation: Any): PublishArtifact =
        add("testFixturesReleaseAnnotationProcessor", artifactNotation)


    /**
     * Adds an artifact to the 'testFixturesReleaseAnnotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesReleaseAnnotationProcessor`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testFixturesReleaseAnnotationProcessor", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testFixturesReleaseApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesReleaseApi`(dependencyNotation: Any): Dependency? =
        add("testFixturesReleaseApi", dependencyNotation)


    /**
     * Adds a dependency to the 'testFixturesReleaseApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesReleaseApi`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testFixturesReleaseApi", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testFixturesReleaseApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesReleaseApi`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesReleaseApi", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesReleaseApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesReleaseApi`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesReleaseApi", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesReleaseApi' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testFixturesReleaseApi`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testFixturesReleaseApi", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesReleaseApi' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testFixturesReleaseApi`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testFixturesReleaseApi", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testFixturesReleaseApi' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesReleaseApi`(constraintNotation: Any): DependencyConstraint =
        add("testFixturesReleaseApi", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testFixturesReleaseApi' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesReleaseApi`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testFixturesReleaseApi", constraintNotation, block)


    /**
     * Adds an artifact to the 'testFixturesReleaseApi' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesReleaseApi`(artifactNotation: Any): PublishArtifact =
        add("testFixturesReleaseApi", artifactNotation)


    /**
     * Adds an artifact to the 'testFixturesReleaseApi' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesReleaseApi`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testFixturesReleaseApi", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testFixturesReleaseCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesReleaseCompileOnly`(dependencyNotation: Any): Dependency? =
        add("testFixturesReleaseCompileOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'testFixturesReleaseCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesReleaseCompileOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testFixturesReleaseCompileOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testFixturesReleaseCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesReleaseCompileOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesReleaseCompileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesReleaseCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesReleaseCompileOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesReleaseCompileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesReleaseCompileOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testFixturesReleaseCompileOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testFixturesReleaseCompileOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesReleaseCompileOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testFixturesReleaseCompileOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testFixturesReleaseCompileOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testFixturesReleaseCompileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesReleaseCompileOnly`(constraintNotation: Any): DependencyConstraint =
        add("testFixturesReleaseCompileOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testFixturesReleaseCompileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesReleaseCompileOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testFixturesReleaseCompileOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'testFixturesReleaseCompileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesReleaseCompileOnly`(artifactNotation: Any): PublishArtifact =
        add("testFixturesReleaseCompileOnly", artifactNotation)


    /**
     * Adds an artifact to the 'testFixturesReleaseCompileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesReleaseCompileOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testFixturesReleaseCompileOnly", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testFixturesReleaseCompileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesReleaseCompileOnlyApi`(dependencyNotation: Any): Dependency? =
        add("testFixturesReleaseCompileOnlyApi", dependencyNotation)


    /**
     * Adds a dependency to the 'testFixturesReleaseCompileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesReleaseCompileOnlyApi`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testFixturesReleaseCompileOnlyApi", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testFixturesReleaseCompileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesReleaseCompileOnlyApi`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesReleaseCompileOnlyApi", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesReleaseCompileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesReleaseCompileOnlyApi`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesReleaseCompileOnlyApi", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesReleaseCompileOnlyApi' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testFixturesReleaseCompileOnlyApi`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testFixturesReleaseCompileOnlyApi", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesReleaseCompileOnlyApi' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testFixturesReleaseCompileOnlyApi`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testFixturesReleaseCompileOnlyApi", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testFixturesReleaseCompileOnlyApi' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesReleaseCompileOnlyApi`(constraintNotation: Any): DependencyConstraint =
        add("testFixturesReleaseCompileOnlyApi", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testFixturesReleaseCompileOnlyApi' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesReleaseCompileOnlyApi`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testFixturesReleaseCompileOnlyApi", constraintNotation, block)


    /**
     * Adds an artifact to the 'testFixturesReleaseCompileOnlyApi' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesReleaseCompileOnlyApi`(artifactNotation: Any): PublishArtifact =
        add("testFixturesReleaseCompileOnlyApi", artifactNotation)


    /**
     * Adds an artifact to the 'testFixturesReleaseCompileOnlyApi' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesReleaseCompileOnlyApi`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testFixturesReleaseCompileOnlyApi", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testFixturesReleaseImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesReleaseImplementation`(dependencyNotation: Any): Dependency? =
        add("testFixturesReleaseImplementation", dependencyNotation)


    /**
     * Adds a dependency to the 'testFixturesReleaseImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesReleaseImplementation`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testFixturesReleaseImplementation", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testFixturesReleaseImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesReleaseImplementation`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesReleaseImplementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesReleaseImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesReleaseImplementation`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesReleaseImplementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesReleaseImplementation' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testFixturesReleaseImplementation`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testFixturesReleaseImplementation", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesReleaseImplementation' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testFixturesReleaseImplementation`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testFixturesReleaseImplementation", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testFixturesReleaseImplementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesReleaseImplementation`(constraintNotation: Any): DependencyConstraint =
        add("testFixturesReleaseImplementation", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testFixturesReleaseImplementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesReleaseImplementation`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testFixturesReleaseImplementation", constraintNotation, block)


    /**
     * Adds an artifact to the 'testFixturesReleaseImplementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesReleaseImplementation`(artifactNotation: Any): PublishArtifact =
        add("testFixturesReleaseImplementation", artifactNotation)


    /**
     * Adds an artifact to the 'testFixturesReleaseImplementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesReleaseImplementation`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testFixturesReleaseImplementation", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testFixturesReleaseRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesReleaseRuntimeOnly`(dependencyNotation: Any): Dependency? =
        add("testFixturesReleaseRuntimeOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'testFixturesReleaseRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesReleaseRuntimeOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testFixturesReleaseRuntimeOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testFixturesReleaseRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesReleaseRuntimeOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesReleaseRuntimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesReleaseRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesReleaseRuntimeOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesReleaseRuntimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesReleaseRuntimeOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testFixturesReleaseRuntimeOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testFixturesReleaseRuntimeOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesReleaseRuntimeOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testFixturesReleaseRuntimeOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testFixturesReleaseRuntimeOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testFixturesReleaseRuntimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesReleaseRuntimeOnly`(constraintNotation: Any): DependencyConstraint =
        add("testFixturesReleaseRuntimeOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testFixturesReleaseRuntimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesReleaseRuntimeOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testFixturesReleaseRuntimeOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'testFixturesReleaseRuntimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesReleaseRuntimeOnly`(artifactNotation: Any): PublishArtifact =
        add("testFixturesReleaseRuntimeOnly", artifactNotation)


    /**
     * Adds an artifact to the 'testFixturesReleaseRuntimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesReleaseRuntimeOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testFixturesReleaseRuntimeOnly", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testFixturesRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesRuntimeOnly`(dependencyNotation: Any): Dependency? =
        add("testFixturesRuntimeOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'testFixturesRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesRuntimeOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testFixturesRuntimeOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testFixturesRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesRuntimeOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesRuntimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testFixturesRuntimeOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testFixturesRuntimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesRuntimeOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testFixturesRuntimeOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testFixturesRuntimeOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testFixturesRuntimeOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testFixturesRuntimeOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testFixturesRuntimeOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testFixturesRuntimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesRuntimeOnly`(constraintNotation: Any): DependencyConstraint =
        add("testFixturesRuntimeOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testFixturesRuntimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testFixturesRuntimeOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testFixturesRuntimeOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'testFixturesRuntimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesRuntimeOnly`(artifactNotation: Any): PublishArtifact =
        add("testFixturesRuntimeOnly", artifactNotation)


    /**
     * Adds an artifact to the 'testFixturesRuntimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testFixturesRuntimeOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testFixturesRuntimeOnly", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testImplementation`(dependencyNotation: Any): Dependency? =
        add("testImplementation", dependencyNotation)


    /**
     * Adds a dependency to the 'testImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testImplementation`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testImplementation", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testImplementation`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testImplementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testImplementation`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testImplementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testImplementation' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testImplementation`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testImplementation", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testImplementation' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testImplementation`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testImplementation", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testImplementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testImplementation`(constraintNotation: Any): DependencyConstraint =
        add("testImplementation", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testImplementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testImplementation`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testImplementation", constraintNotation, block)


    /**
     * Adds an artifact to the 'testImplementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testImplementation`(artifactNotation: Any): PublishArtifact =
        add("testImplementation", artifactNotation)


    /**
     * Adds an artifact to the 'testImplementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testImplementation`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testImplementation", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testReleaseAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testReleaseAnnotationProcessor`(dependencyNotation: Any): Dependency? =
        add("testReleaseAnnotationProcessor", dependencyNotation)


    /**
     * Adds a dependency to the 'testReleaseAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testReleaseAnnotationProcessor`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testReleaseAnnotationProcessor", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testReleaseAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testReleaseAnnotationProcessor`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testReleaseAnnotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testReleaseAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testReleaseAnnotationProcessor`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testReleaseAnnotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testReleaseAnnotationProcessor' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testReleaseAnnotationProcessor`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testReleaseAnnotationProcessor", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testReleaseAnnotationProcessor' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testReleaseAnnotationProcessor`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testReleaseAnnotationProcessor", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testReleaseAnnotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testReleaseAnnotationProcessor`(constraintNotation: Any): DependencyConstraint =
        add("testReleaseAnnotationProcessor", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testReleaseAnnotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testReleaseAnnotationProcessor`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testReleaseAnnotationProcessor", constraintNotation, block)


    /**
     * Adds an artifact to the 'testReleaseAnnotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testReleaseAnnotationProcessor`(artifactNotation: Any): PublishArtifact =
        add("testReleaseAnnotationProcessor", artifactNotation)


    /**
     * Adds an artifact to the 'testReleaseAnnotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testReleaseAnnotationProcessor`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testReleaseAnnotationProcessor", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testReleaseCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testReleaseCompileOnly`(dependencyNotation: Any): Dependency? =
        add("testReleaseCompileOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'testReleaseCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testReleaseCompileOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testReleaseCompileOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testReleaseCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testReleaseCompileOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testReleaseCompileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testReleaseCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testReleaseCompileOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testReleaseCompileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testReleaseCompileOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testReleaseCompileOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testReleaseCompileOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testReleaseCompileOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testReleaseCompileOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testReleaseCompileOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testReleaseCompileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testReleaseCompileOnly`(constraintNotation: Any): DependencyConstraint =
        add("testReleaseCompileOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testReleaseCompileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testReleaseCompileOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testReleaseCompileOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'testReleaseCompileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testReleaseCompileOnly`(artifactNotation: Any): PublishArtifact =
        add("testReleaseCompileOnly", artifactNotation)


    /**
     * Adds an artifact to the 'testReleaseCompileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testReleaseCompileOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testReleaseCompileOnly", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testReleaseImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testReleaseImplementation`(dependencyNotation: Any): Dependency? =
        add("testReleaseImplementation", dependencyNotation)


    /**
     * Adds a dependency to the 'testReleaseImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testReleaseImplementation`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testReleaseImplementation", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testReleaseImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testReleaseImplementation`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testReleaseImplementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testReleaseImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testReleaseImplementation`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testReleaseImplementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testReleaseImplementation' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testReleaseImplementation`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testReleaseImplementation", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testReleaseImplementation' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testReleaseImplementation`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testReleaseImplementation", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testReleaseImplementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testReleaseImplementation`(constraintNotation: Any): DependencyConstraint =
        add("testReleaseImplementation", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testReleaseImplementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testReleaseImplementation`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testReleaseImplementation", constraintNotation, block)


    /**
     * Adds an artifact to the 'testReleaseImplementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testReleaseImplementation`(artifactNotation: Any): PublishArtifact =
        add("testReleaseImplementation", artifactNotation)


    /**
     * Adds an artifact to the 'testReleaseImplementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testReleaseImplementation`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testReleaseImplementation", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testReleaseRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testReleaseRuntimeOnly`(dependencyNotation: Any): Dependency? =
        add("testReleaseRuntimeOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'testReleaseRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testReleaseRuntimeOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testReleaseRuntimeOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testReleaseRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testReleaseRuntimeOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testReleaseRuntimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testReleaseRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testReleaseRuntimeOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testReleaseRuntimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testReleaseRuntimeOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testReleaseRuntimeOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testReleaseRuntimeOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testReleaseRuntimeOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testReleaseRuntimeOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testReleaseRuntimeOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testReleaseRuntimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testReleaseRuntimeOnly`(constraintNotation: Any): DependencyConstraint =
        add("testReleaseRuntimeOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testReleaseRuntimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testReleaseRuntimeOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testReleaseRuntimeOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'testReleaseRuntimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testReleaseRuntimeOnly`(artifactNotation: Any): PublishArtifact =
        add("testReleaseRuntimeOnly", artifactNotation)


    /**
     * Adds an artifact to the 'testReleaseRuntimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testReleaseRuntimeOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testReleaseRuntimeOnly", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testRuntimeOnly`(dependencyNotation: Any): Dependency? =
        add("testRuntimeOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'testRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testRuntimeOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testRuntimeOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testRuntimeOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testRuntimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testRuntimeOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testRuntimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testRuntimeOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testRuntimeOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testRuntimeOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testRuntimeOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testRuntimeOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testRuntimeOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testRuntimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testRuntimeOnly`(constraintNotation: Any): DependencyConstraint =
        add("testRuntimeOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testRuntimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testRuntimeOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testRuntimeOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'testRuntimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testRuntimeOnly`(artifactNotation: Any): PublishArtifact =
        add("testRuntimeOnly", artifactNotation)


    /**
     * Adds an artifact to the 'testRuntimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testRuntimeOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testRuntimeOnly", artifactNotation, configureAction)



> Task :data:api:kotlinDslAccessorsReport

    /**
     * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    val org.gradle.api.Project.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension
    
    /**
     * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    fun org.gradle.api.Project.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)


    /**
     * Retrieves the [libs][org.gradle.accessors.dm.LibrariesForLibs] extension.
     */
    val org.gradle.api.Project.`libs`: org.gradle.accessors.dm.LibrariesForLibs get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("libs") as org.gradle.accessors.dm.LibrariesForLibs
    
    /**
     * Configures the [libs][org.gradle.accessors.dm.LibrariesForLibs] extension.
     */
    fun org.gradle.api.Project.`libs`(configure: Action<org.gradle.accessors.dm.LibrariesForLibs>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("libs", configure)


    /**
     * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    val org.gradle.accessors.dm.LibrariesForLibs.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension
    
    /**
     * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    fun org.gradle.accessors.dm.LibrariesForLibs.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)


    /**
     * Retrieves the [versionCatalogs][org.gradle.api.artifacts.VersionCatalogsExtension] extension.
     */
    val org.gradle.api.Project.`versionCatalogs`: org.gradle.api.artifacts.VersionCatalogsExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("versionCatalogs") as org.gradle.api.artifacts.VersionCatalogsExtension
    
    /**
     * Configures the [versionCatalogs][org.gradle.api.artifacts.VersionCatalogsExtension] extension.
     */
    fun org.gradle.api.Project.`versionCatalogs`(configure: Action<org.gradle.api.artifacts.VersionCatalogsExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("versionCatalogs", configure)


    /**
     * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    val org.gradle.api.artifacts.VersionCatalogsExtension.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension
    
    /**
     * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    fun org.gradle.api.artifacts.VersionCatalogsExtension.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)


    /**
     * Retrieves the [projects][org.gradle.accessors.dm.RootProjectAccessor] extension.
     */
    val org.gradle.api.Project.`projects`: org.gradle.accessors.dm.RootProjectAccessor get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("projects") as org.gradle.accessors.dm.RootProjectAccessor
    
    /**
     * Configures the [projects][org.gradle.accessors.dm.RootProjectAccessor] extension.
     */
    fun org.gradle.api.Project.`projects`(configure: Action<org.gradle.accessors.dm.RootProjectAccessor>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("projects", configure)


    /**
     * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    val org.gradle.accessors.dm.RootProjectAccessor.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension
    
    /**
     * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    fun org.gradle.accessors.dm.RootProjectAccessor.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)


    /**
     * Retrieves the [openApiMeta][org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorMetaExtension] extension.
     */
    val org.gradle.api.Project.`openApiMeta`: org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorMetaExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("openApiMeta") as org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorMetaExtension
    
    /**
     * Configures the [openApiMeta][org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorMetaExtension] extension.
     */
    fun org.gradle.api.Project.`openApiMeta`(configure: Action<org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorMetaExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("openApiMeta", configure)


    /**
     * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    val org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorMetaExtension.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension
    
    /**
     * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    fun org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorMetaExtension.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)


    /**
     * Retrieves the [openApiValidate][org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorValidateExtension] extension.
     */
    val org.gradle.api.Project.`openApiValidate`: org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorValidateExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("openApiValidate") as org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorValidateExtension
    
    /**
     * Configures the [openApiValidate][org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorValidateExtension] extension.
     */
    fun org.gradle.api.Project.`openApiValidate`(configure: Action<org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorValidateExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("openApiValidate", configure)


    /**
     * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    val org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorValidateExtension.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension
    
    /**
     * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    fun org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorValidateExtension.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)


    /**
     * Retrieves the [openApiGenerate][org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorGenerateExtension] extension.
     */
    val org.gradle.api.Project.`openApiGenerate`: org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorGenerateExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("openApiGenerate") as org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorGenerateExtension
    
    /**
     * Configures the [openApiGenerate][org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorGenerateExtension] extension.
     */
    fun org.gradle.api.Project.`openApiGenerate`(configure: Action<org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorGenerateExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("openApiGenerate", configure)


    /**
     * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    val org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorGenerateExtension.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension
    
    /**
     * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    fun org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorGenerateExtension.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)


    /**
     * Retrieves the [openApiGenerators][org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorGeneratorsExtension] extension.
     */
    val org.gradle.api.Project.`openApiGenerators`: org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorGeneratorsExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("openApiGenerators") as org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorGeneratorsExtension
    
    /**
     * Configures the [openApiGenerators][org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorGeneratorsExtension] extension.
     */
    fun org.gradle.api.Project.`openApiGenerators`(configure: Action<org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorGeneratorsExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("openApiGenerators", configure)


    /**
     * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    val org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorGeneratorsExtension.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension
    
    /**
     * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    fun org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorGeneratorsExtension.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)


    /**
     * Retrieves the [kotlin][org.jetbrains.kotlin.gradle.dsl.KotlinJvmProjectExtension] extension.
     */
    val org.gradle.api.Project.`kotlin`: org.jetbrains.kotlin.gradle.dsl.KotlinJvmProjectExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("kotlin") as org.jetbrains.kotlin.gradle.dsl.KotlinJvmProjectExtension
    
    /**
     * Configures the [kotlin][org.jetbrains.kotlin.gradle.dsl.KotlinJvmProjectExtension] extension.
     */
    fun org.gradle.api.Project.`kotlin`(configure: Action<org.jetbrains.kotlin.gradle.dsl.KotlinJvmProjectExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("kotlin", configure)


    /**
     * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    val org.jetbrains.kotlin.gradle.dsl.KotlinJvmProjectExtension.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension
    
    /**
     * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    fun org.jetbrains.kotlin.gradle.dsl.KotlinJvmProjectExtension.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)


    /**
     * Retrieves the [sourceSets][org.gradle.api.NamedDomainObjectContainer<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet>] extension.
     */
    val org.jetbrains.kotlin.gradle.dsl.KotlinJvmProjectExtension.`sourceSets`: org.gradle.api.NamedDomainObjectContainer<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet> get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("sourceSets") as org.gradle.api.NamedDomainObjectContainer<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet>
    
    /**
     * Configures the [sourceSets][org.gradle.api.NamedDomainObjectContainer<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet>] extension.
     */
    fun org.jetbrains.kotlin.gradle.dsl.KotlinJvmProjectExtension.`sourceSets`(configure: Action<org.gradle.api.NamedDomainObjectContainer<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet>>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("sourceSets", configure)


    /**
     * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet>.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension
    
    /**
     * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    fun org.gradle.api.NamedDomainObjectContainer<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet>.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)


    /**
     * Retrieves the [abiValidation][org.jetbrains.kotlin.gradle.dsl.abi.AbiValidationExtension] extension.
     */
    val org.jetbrains.kotlin.gradle.dsl.KotlinJvmProjectExtension.`abiValidation`: org.jetbrains.kotlin.gradle.dsl.abi.AbiValidationExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("abiValidation") as org.jetbrains.kotlin.gradle.dsl.abi.AbiValidationExtension
    
    /**
     * Configures the [abiValidation][org.jetbrains.kotlin.gradle.dsl.abi.AbiValidationExtension] extension.
     */
    fun org.jetbrains.kotlin.gradle.dsl.KotlinJvmProjectExtension.`abiValidation`(configure: Action<org.jetbrains.kotlin.gradle.dsl.abi.AbiValidationExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("abiValidation", configure)


    /**
     * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    val org.jetbrains.kotlin.gradle.dsl.abi.AbiValidationExtension.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension
    
    /**
     * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    fun org.jetbrains.kotlin.gradle.dsl.abi.AbiValidationExtension.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)


    /**
     * Retrieves the [kotlinTestRegistry][org.jetbrains.kotlin.gradle.testing.internal.KotlinTestsRegistry] extension.
     */
    val org.gradle.api.Project.`kotlinTestRegistry`: org.jetbrains.kotlin.gradle.testing.internal.KotlinTestsRegistry get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("kotlinTestRegistry") as org.jetbrains.kotlin.gradle.testing.internal.KotlinTestsRegistry
    
    /**
     * Configures the [kotlinTestRegistry][org.jetbrains.kotlin.gradle.testing.internal.KotlinTestsRegistry] extension.
     */
    fun org.gradle.api.Project.`kotlinTestRegistry`(configure: Action<org.jetbrains.kotlin.gradle.testing.internal.KotlinTestsRegistry>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("kotlinTestRegistry", configure)


    /**
     * Retrieves the [base][org.gradle.api.plugins.BasePluginExtension] extension.
     */
    val org.gradle.api.Project.`base`: org.gradle.api.plugins.BasePluginExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("base") as org.gradle.api.plugins.BasePluginExtension
    
    /**
     * Configures the [base][org.gradle.api.plugins.BasePluginExtension] extension.
     */
    fun org.gradle.api.Project.`base`(configure: Action<org.gradle.api.plugins.BasePluginExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("base", configure)


    /**
     * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    val org.gradle.api.plugins.BasePluginExtension.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension
    
    /**
     * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    fun org.gradle.api.plugins.BasePluginExtension.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)


    /**
     * Retrieves the [sourceSets][org.gradle.api.tasks.SourceSetContainer] extension.
     */
    val org.gradle.api.Project.`sourceSets`: org.gradle.api.tasks.SourceSetContainer get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("sourceSets") as org.gradle.api.tasks.SourceSetContainer
    
    /**
     * Configures the [sourceSets][org.gradle.api.tasks.SourceSetContainer] extension.
     */
    fun org.gradle.api.Project.`sourceSets`(configure: Action<org.gradle.api.tasks.SourceSetContainer>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("sourceSets", configure)


    /**
     * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    val org.gradle.api.tasks.SourceSetContainer.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension
    
    /**
     * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    fun org.gradle.api.tasks.SourceSetContainer.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)


    /**
     * Retrieves the [reporting][org.gradle.api.reporting.ReportingExtension] extension.
     */
    val org.gradle.api.Project.`reporting`: org.gradle.api.reporting.ReportingExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("reporting") as org.gradle.api.reporting.ReportingExtension
    
    /**
     * Configures the [reporting][org.gradle.api.reporting.ReportingExtension] extension.
     */
    fun org.gradle.api.Project.`reporting`(configure: Action<org.gradle.api.reporting.ReportingExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("reporting", configure)


    /**
     * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    val org.gradle.api.reporting.ReportingExtension.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension
    
    /**
     * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    fun org.gradle.api.reporting.ReportingExtension.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)


    /**
     * Retrieves the [javaToolchains][org.gradle.jvm.toolchain.JavaToolchainService] extension.
     */
    val org.gradle.api.Project.`javaToolchains`: org.gradle.jvm.toolchain.JavaToolchainService get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("javaToolchains") as org.gradle.jvm.toolchain.JavaToolchainService
    
    /**
     * Configures the [javaToolchains][org.gradle.jvm.toolchain.JavaToolchainService] extension.
     */
    fun org.gradle.api.Project.`javaToolchains`(configure: Action<org.gradle.jvm.toolchain.JavaToolchainService>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("javaToolchains", configure)


    /**
     * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    val org.gradle.jvm.toolchain.JavaToolchainService.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension
    
    /**
     * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    fun org.gradle.jvm.toolchain.JavaToolchainService.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)


    /**
     * Retrieves the [java][org.gradle.api.plugins.JavaPluginExtension] extension.
     */
    val org.gradle.api.Project.`java`: org.gradle.api.plugins.JavaPluginExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("java") as org.gradle.api.plugins.JavaPluginExtension
    
    /**
     * Configures the [java][org.gradle.api.plugins.JavaPluginExtension] extension.
     */
    fun org.gradle.api.Project.`java`(configure: Action<org.gradle.api.plugins.JavaPluginExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("java", configure)


    /**
     * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    val org.gradle.api.plugins.JavaPluginExtension.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension
    
    /**
     * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    fun org.gradle.api.plugins.JavaPluginExtension.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)


    /**
     * Retrieves the [testing][org.gradle.testing.base.TestingExtension] extension.
     */
    val org.gradle.api.Project.`testing`: org.gradle.testing.base.TestingExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("testing") as org.gradle.testing.base.TestingExtension
    
    /**
     * Configures the [testing][org.gradle.testing.base.TestingExtension] extension.
     */
    fun org.gradle.api.Project.`testing`(configure: Action<org.gradle.testing.base.TestingExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("testing", configure)


    /**
     * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    val org.gradle.testing.base.TestingExtension.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension
    
    /**
     * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    fun org.gradle.testing.base.TestingExtension.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)


    /**
     * Retrieves the [kotlinScripting][org.jetbrains.kotlin.gradle.scripting.ScriptingExtension] extension.
     */
    val org.gradle.api.Project.`kotlinScripting`: org.jetbrains.kotlin.gradle.scripting.ScriptingExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("kotlinScripting") as org.jetbrains.kotlin.gradle.scripting.ScriptingExtension
    
    /**
     * Configures the [kotlinScripting][org.jetbrains.kotlin.gradle.scripting.ScriptingExtension] extension.
     */
    fun org.gradle.api.Project.`kotlinScripting`(configure: Action<org.jetbrains.kotlin.gradle.scripting.ScriptingExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("kotlinScripting", configure)


    /**
     * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    val org.jetbrains.kotlin.gradle.scripting.ScriptingExtension.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension
    
    /**
     * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    fun org.jetbrains.kotlin.gradle.scripting.ScriptingExtension.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)


    /**
     * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    val org.gradle.api.artifacts.dsl.DependencyHandler.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension
    
    /**
     * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    fun org.gradle.api.artifacts.dsl.DependencyHandler.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)


    /**
     * Retrieves the [npm][org.jetbrains.kotlin.gradle.targets.js.npm.NpmDependencyExtension] extension.
     */
    val org.gradle.api.artifacts.dsl.DependencyHandler.`npm`: org.jetbrains.kotlin.gradle.targets.js.npm.NpmDependencyExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("npm") as org.jetbrains.kotlin.gradle.targets.js.npm.NpmDependencyExtension
    
    /**
     * Configures the [npm][org.jetbrains.kotlin.gradle.targets.js.npm.NpmDependencyExtension] extension.
     */
    fun org.gradle.api.artifacts.dsl.DependencyHandler.`npm`(configure: Action<org.jetbrains.kotlin.gradle.targets.js.npm.NpmDependencyExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("npm", configure)


    /**
     * Retrieves the [devNpm][org.jetbrains.kotlin.gradle.targets.js.npm.DevNpmDependencyExtension] extension.
     */
    val org.gradle.api.artifacts.dsl.DependencyHandler.`devNpm`: org.jetbrains.kotlin.gradle.targets.js.npm.DevNpmDependencyExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("devNpm") as org.jetbrains.kotlin.gradle.targets.js.npm.DevNpmDependencyExtension
    
    /**
     * Configures the [devNpm][org.jetbrains.kotlin.gradle.targets.js.npm.DevNpmDependencyExtension] extension.
     */
    fun org.gradle.api.artifacts.dsl.DependencyHandler.`devNpm`(configure: Action<org.jetbrains.kotlin.gradle.targets.js.npm.DevNpmDependencyExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("devNpm", configure)


    /**
     * Retrieves the [optionalNpm][org.jetbrains.kotlin.gradle.targets.js.npm.NpmDependencyExtension] extension.
     */
    val org.gradle.api.artifacts.dsl.DependencyHandler.`optionalNpm`: org.jetbrains.kotlin.gradle.targets.js.npm.NpmDependencyExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("optionalNpm") as org.jetbrains.kotlin.gradle.targets.js.npm.NpmDependencyExtension
    
    /**
     * Configures the [optionalNpm][org.jetbrains.kotlin.gradle.targets.js.npm.NpmDependencyExtension] extension.
     */
    fun org.gradle.api.artifacts.dsl.DependencyHandler.`optionalNpm`(configure: Action<org.jetbrains.kotlin.gradle.targets.js.npm.NpmDependencyExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("optionalNpm", configure)


    /**
     * Retrieves the [peerNpm][org.jetbrains.kotlin.gradle.targets.js.npm.PeerNpmDependencyExtension] extension.
     */
    val org.gradle.api.artifacts.dsl.DependencyHandler.`peerNpm`: org.jetbrains.kotlin.gradle.targets.js.npm.PeerNpmDependencyExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("peerNpm") as org.jetbrains.kotlin.gradle.targets.js.npm.PeerNpmDependencyExtension
    
    /**
     * Configures the [peerNpm][org.jetbrains.kotlin.gradle.targets.js.npm.PeerNpmDependencyExtension] extension.
     */
    fun org.gradle.api.artifacts.dsl.DependencyHandler.`peerNpm`(configure: Action<org.jetbrains.kotlin.gradle.targets.js.npm.PeerNpmDependencyExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("peerNpm", configure)


    /**
     * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    val org.gradle.api.artifacts.dsl.RepositoryHandler.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension
    
    /**
     * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    fun org.gradle.api.artifacts.dsl.RepositoryHandler.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)


    /**
     * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    val org.gradle.api.tasks.SourceSet.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension
    
    /**
     * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    fun org.gradle.api.tasks.SourceSet.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)


    /**
     * Retrieves the [kotlin][org.gradle.api.file.SourceDirectorySet] extension.
     */
    val org.gradle.api.tasks.SourceSet.`kotlin`: org.gradle.api.file.SourceDirectorySet get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("kotlin") as org.gradle.api.file.SourceDirectorySet
    
    /**
     * Configures the [kotlin][org.gradle.api.file.SourceDirectorySet] extension.
     */
    fun org.gradle.api.tasks.SourceSet.`kotlin`(configure: Action<org.gradle.api.file.SourceDirectorySet>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("kotlin", configure)


    /**
     * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    val org.gradle.api.file.SourceDirectorySet.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension
    
    /**
     * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
     */
    fun org.gradle.api.file.SourceDirectorySet.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
        (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)


    /**
     * Provides the existing [clean][org.gradle.api.tasks.Delete] task.
     */
    val TaskContainer.`clean`: TaskProvider<org.gradle.api.tasks.Delete>
        get() = named<org.gradle.api.tasks.Delete>("clean")
    


    /**
     * Provides the existing [kotlinDslAccessorsReport][org.gradle.kotlin.dsl.accessors.tasks.PrintAccessors] task.
     */
    val TaskContainer.`kotlinDslAccessorsReport`: TaskProvider<org.gradle.kotlin.dsl.accessors.tasks.PrintAccessors>
        get() = named<org.gradle.kotlin.dsl.accessors.tasks.PrintAccessors>("kotlinDslAccessorsReport")
    


    /**
     * Provides the existing [test][org.gradle.api.tasks.testing.Test] task.
     */
    val TaskContainer.`test`: TaskProvider<org.gradle.api.tasks.testing.Test>
        get() = named<org.gradle.api.tasks.testing.Test>("test")
    


    /**
     * Provides the existing [help][org.gradle.configuration.Help] task.
     */
    val TaskContainer.`help`: TaskProvider<org.gradle.configuration.Help>
        get() = named<org.gradle.configuration.Help>("help")
    


    /**
     * Provides the existing [projects][org.gradle.api.tasks.diagnostics.ProjectReportTask] task.
     */
    val TaskContainer.`projects`: TaskProvider<org.gradle.api.tasks.diagnostics.ProjectReportTask>
        get() = named<org.gradle.api.tasks.diagnostics.ProjectReportTask>("projects")
    


    /**
     * Provides the existing [tasks][org.gradle.api.tasks.diagnostics.TaskReportTask] task.
     */
    val TaskContainer.`tasks`: TaskProvider<org.gradle.api.tasks.diagnostics.TaskReportTask>
        get() = named<org.gradle.api.tasks.diagnostics.TaskReportTask>("tasks")
    


    /**
     * Provides the existing [properties][org.gradle.api.tasks.diagnostics.PropertyReportTask] task.
     */
    val TaskContainer.`properties`: TaskProvider<org.gradle.api.tasks.diagnostics.PropertyReportTask>
        get() = named<org.gradle.api.tasks.diagnostics.PropertyReportTask>("properties")
    


    /**
     * Provides the existing [dependencyInsight][org.gradle.api.tasks.diagnostics.DependencyInsightReportTask] task.
     */
    val TaskContainer.`dependencyInsight`: TaskProvider<org.gradle.api.tasks.diagnostics.DependencyInsightReportTask>
        get() = named<org.gradle.api.tasks.diagnostics.DependencyInsightReportTask>("dependencyInsight")
    


    /**
     * Provides the existing [dependencies][org.gradle.api.tasks.diagnostics.DependencyReportTask] task.
     */
    val TaskContainer.`dependencies`: TaskProvider<org.gradle.api.tasks.diagnostics.DependencyReportTask>
        get() = named<org.gradle.api.tasks.diagnostics.DependencyReportTask>("dependencies")
    


    /**
     * Provides the existing [buildEnvironment][org.gradle.api.tasks.diagnostics.BuildEnvironmentReportTask] task.
     */
    val TaskContainer.`buildEnvironment`: TaskProvider<org.gradle.api.tasks.diagnostics.BuildEnvironmentReportTask>
        get() = named<org.gradle.api.tasks.diagnostics.BuildEnvironmentReportTask>("buildEnvironment")
    


    /**
     * Provides the existing [outgoingVariants][org.gradle.api.tasks.diagnostics.OutgoingVariantsReportTask] task.
     */
    val TaskContainer.`outgoingVariants`: TaskProvider<org.gradle.api.tasks.diagnostics.OutgoingVariantsReportTask>
        get() = named<org.gradle.api.tasks.diagnostics.OutgoingVariantsReportTask>("outgoingVariants")
    


    /**
     * Provides the existing [resolvableConfigurations][org.gradle.api.tasks.diagnostics.ResolvableConfigurationsReportTask] task.
     */
    val TaskContainer.`resolvableConfigurations`: TaskProvider<org.gradle.api.tasks.diagnostics.ResolvableConfigurationsReportTask>
        get() = named<org.gradle.api.tasks.diagnostics.ResolvableConfigurationsReportTask>("resolvableConfigurations")
    


    /**
     * Provides the existing [artifactTransforms][org.gradle.api.tasks.diagnostics.ArtifactTransformsReportTask] task.
     */
    val TaskContainer.`artifactTransforms`: TaskProvider<org.gradle.api.tasks.diagnostics.ArtifactTransformsReportTask>
        get() = named<org.gradle.api.tasks.diagnostics.ArtifactTransformsReportTask>("artifactTransforms")
    


    /**
     * Provides the existing [javaToolchains][org.gradle.jvm.toolchain.internal.task.ShowToolchainsTask] task.
     */
    val TaskContainer.`javaToolchains`: TaskProvider<org.gradle.jvm.toolchain.internal.task.ShowToolchainsTask>
        get() = named<org.gradle.jvm.toolchain.internal.task.ShowToolchainsTask>("javaToolchains")
    


    /**
     * Provides the existing [openApiGenerators][org.openapitools.generator.gradle.plugin.tasks.GeneratorsTask] task.
     */
    val TaskContainer.`openApiGenerators`: TaskProvider<org.openapitools.generator.gradle.plugin.tasks.GeneratorsTask>
        get() = named<org.openapitools.generator.gradle.plugin.tasks.GeneratorsTask>("openApiGenerators")
    


    /**
     * Provides the existing [openApiMeta][org.openapitools.generator.gradle.plugin.tasks.MetaTask] task.
     */
    val TaskContainer.`openApiMeta`: TaskProvider<org.openapitools.generator.gradle.plugin.tasks.MetaTask>
        get() = named<org.openapitools.generator.gradle.plugin.tasks.MetaTask>("openApiMeta")
    


    /**
     * Provides the existing [openApiValidate][org.openapitools.generator.gradle.plugin.tasks.ValidateTask] task.
     */
    val TaskContainer.`openApiValidate`: TaskProvider<org.openapitools.generator.gradle.plugin.tasks.ValidateTask>
        get() = named<org.openapitools.generator.gradle.plugin.tasks.ValidateTask>("openApiValidate")
    


    /**
     * Provides the existing [openApiGenerate][org.openapitools.generator.gradle.plugin.tasks.GenerateTask] task.
     */
    val TaskContainer.`openApiGenerate`: TaskProvider<org.openapitools.generator.gradle.plugin.tasks.GenerateTask>
        get() = named<org.openapitools.generator.gradle.plugin.tasks.GenerateTask>("openApiGenerate")
    


    /**
     * Provides the existing [generatePgpKeys][org.jetbrains.kotlin.gradle.tasks.publishing.GeneratePgpKeys] task.
     */
    val TaskContainer.`generatePgpKeys`: TaskProvider<org.jetbrains.kotlin.gradle.tasks.publishing.GeneratePgpKeys>
        get() = named<org.jetbrains.kotlin.gradle.tasks.publishing.GeneratePgpKeys>("generatePgpKeys")
    


    /**
     * Provides the existing [uploadPublicPgpKey][org.jetbrains.kotlin.gradle.tasks.publishing.UploadPgpKeyTask] task.
     */
    val TaskContainer.`uploadPublicPgpKey`: TaskProvider<org.jetbrains.kotlin.gradle.tasks.publishing.UploadPgpKeyTask>
        get() = named<org.jetbrains.kotlin.gradle.tasks.publishing.UploadPgpKeyTask>("uploadPublicPgpKey")
    


    /**
     * Provides the existing [checkSigningConfiguration][org.jetbrains.kotlin.gradle.tasks.publishing.CheckSigningTask] task.
     */
    val TaskContainer.`checkSigningConfiguration`: TaskProvider<org.jetbrains.kotlin.gradle.tasks.publishing.CheckSigningTask>
        get() = named<org.jetbrains.kotlin.gradle.tasks.publishing.CheckSigningTask>("checkSigningConfiguration")
    


    /**
     * Provides the existing [assemble][org.gradle.api.DefaultTask] task.
     */
    val TaskContainer.`assemble`: TaskProvider<org.gradle.api.DefaultTask>
        get() = named<org.gradle.api.DefaultTask>("assemble")
    


    /**
     * Provides the existing [check][org.gradle.api.DefaultTask] task.
     */
    val TaskContainer.`check`: TaskProvider<org.gradle.api.DefaultTask>
        get() = named<org.gradle.api.DefaultTask>("check")
    


    /**
     * Provides the existing [build][org.gradle.api.DefaultTask] task.
     */
    val TaskContainer.`build`: TaskProvider<org.gradle.api.DefaultTask>
        get() = named<org.gradle.api.DefaultTask>("build")
    


    /**
     * Provides the existing [buildNeeded][org.gradle.api.DefaultTask] task.
     */
    val TaskContainer.`buildNeeded`: TaskProvider<org.gradle.api.DefaultTask>
        get() = named<org.gradle.api.DefaultTask>("buildNeeded")
    


    /**
     * Provides the existing [buildDependents][org.gradle.api.DefaultTask] task.
     */
    val TaskContainer.`buildDependents`: TaskProvider<org.gradle.api.DefaultTask>
        get() = named<org.gradle.api.DefaultTask>("buildDependents")
    


    /**
     * Provides the existing [processResources][org.gradle.language.jvm.tasks.ProcessResources] task.
     */
    val TaskContainer.`processResources`: TaskProvider<org.gradle.language.jvm.tasks.ProcessResources>
        get() = named<org.gradle.language.jvm.tasks.ProcessResources>("processResources")
    


    /**
     * Provides the existing [compileJava][org.gradle.api.tasks.compile.JavaCompile] task.
     */
    val TaskContainer.`compileJava`: TaskProvider<org.gradle.api.tasks.compile.JavaCompile>
        get() = named<org.gradle.api.tasks.compile.JavaCompile>("compileJava")
    


    /**
     * Provides the existing [classes][org.gradle.api.DefaultTask] task.
     */
    val TaskContainer.`classes`: TaskProvider<org.gradle.api.DefaultTask>
        get() = named<org.gradle.api.DefaultTask>("classes")
    


    /**
     * Provides the existing [jar][org.gradle.api.tasks.bundling.Jar] task.
     */
    val TaskContainer.`jar`: TaskProvider<org.gradle.api.tasks.bundling.Jar>
        get() = named<org.gradle.api.tasks.bundling.Jar>("jar")
    


    /**
     * Provides the existing [javadoc][org.gradle.api.tasks.javadoc.Javadoc] task.
     */
    val TaskContainer.`javadoc`: TaskProvider<org.gradle.api.tasks.javadoc.Javadoc>
        get() = named<org.gradle.api.tasks.javadoc.Javadoc>("javadoc")
    


    /**
     * Provides the existing [processTestResources][org.gradle.language.jvm.tasks.ProcessResources] task.
     */
    val TaskContainer.`processTestResources`: TaskProvider<org.gradle.language.jvm.tasks.ProcessResources>
        get() = named<org.gradle.language.jvm.tasks.ProcessResources>("processTestResources")
    


    /**
     * Provides the existing [compileTestJava][org.gradle.api.tasks.compile.JavaCompile] task.
     */
    val TaskContainer.`compileTestJava`: TaskProvider<org.gradle.api.tasks.compile.JavaCompile>
        get() = named<org.gradle.api.tasks.compile.JavaCompile>("compileTestJava")
    


    /**
     * Provides the existing [testClasses][org.gradle.api.DefaultTask] task.
     */
    val TaskContainer.`testClasses`: TaskProvider<org.gradle.api.DefaultTask>
        get() = named<org.gradle.api.DefaultTask>("testClasses")
    


    /**
     * Provides the existing [compileKotlin][org.jetbrains.kotlin.gradle.tasks.KotlinCompile] task.
     */
    val TaskContainer.`compileKotlin`: TaskProvider<org.jetbrains.kotlin.gradle.tasks.KotlinCompile>
        get() = named<org.jetbrains.kotlin.gradle.tasks.KotlinCompile>("compileKotlin")
    


    /**
     * Provides the existing [mainClasses][org.gradle.api.DefaultTask] task.
     */
    val TaskContainer.`mainClasses`: TaskProvider<org.gradle.api.DefaultTask>
        get() = named<org.gradle.api.DefaultTask>("mainClasses")
    


    /**
     * Provides the existing [compileTestKotlin][org.jetbrains.kotlin.gradle.tasks.KotlinCompile] task.
     */
    val TaskContainer.`compileTestKotlin`: TaskProvider<org.jetbrains.kotlin.gradle.tasks.KotlinCompile>
        get() = named<org.jetbrains.kotlin.gradle.tasks.KotlinCompile>("compileTestKotlin")
    


    /**
     * Provides the existing [kotlinSourcesJar][org.gradle.jvm.tasks.Jar] task.
     */
    val TaskContainer.`kotlinSourcesJar`: TaskProvider<org.gradle.jvm.tasks.Jar>
        get() = named<org.gradle.jvm.tasks.Jar>("kotlinSourcesJar")
    


    /**
     * Provides the existing [buildKotlinToolingMetadata][org.jetbrains.kotlin.gradle.tooling.BuildKotlinToolingMetadataTask.FromKotlinExtension] task.
     */
    val TaskContainer.`buildKotlinToolingMetadata`: TaskProvider<org.jetbrains.kotlin.gradle.tooling.BuildKotlinToolingMetadataTask.FromKotlinExtension>
        get() = named<org.jetbrains.kotlin.gradle.tooling.BuildKotlinToolingMetadataTask.FromKotlinExtension>("buildKotlinToolingMetadata")
    


    /**
     * Provides the existing [checkKotlinGradlePluginConfigurationErrors][org.gradle.api.DefaultTask] task.
     */
    val TaskContainer.`checkKotlinGradlePluginConfigurationErrors`: TaskProvider<org.gradle.api.DefaultTask>
        get() = named<org.gradle.api.DefaultTask>("checkKotlinGradlePluginConfigurationErrors")
    


    /**
     * Provides the existing [dumpLegacyAbi][org.gradle.api.DefaultTask] task.
     */
    val TaskContainer.`dumpLegacyAbi`: TaskProvider<org.gradle.api.DefaultTask>
        get() = named<org.gradle.api.DefaultTask>("dumpLegacyAbi")
    


    /**
     * Provides the existing [checkLegacyAbi][org.gradle.api.DefaultTask] task.
     */
    val TaskContainer.`checkLegacyAbi`: TaskProvider<org.gradle.api.DefaultTask>
        get() = named<org.gradle.api.DefaultTask>("checkLegacyAbi")
    


    /**
     * Provides the existing [updateLegacyAbi][org.gradle.api.DefaultTask] task.
     */
    val TaskContainer.`updateLegacyAbi`: TaskProvider<org.gradle.api.DefaultTask>
        get() = named<org.gradle.api.DefaultTask>("updateLegacyAbi")
    


    /**
     * Provides the existing [openApiGenerateEcoAi][org.openapitools.generator.gradle.plugin.tasks.GenerateTask] task.
     */
    val TaskContainer.`openApiGenerateEcoAi`: TaskProvider<org.openapitools.generator.gradle.plugin.tasks.GenerateTask>
        get() = named<org.openapitools.generator.gradle.plugin.tasks.GenerateTask>("openApiGenerateEcoAi")
    


    /**
     * Provides the existing [main][org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet>.`main`: NamedDomainObjectProvider<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet>
        get() = named<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet>("main")
    


    /**
     * Provides the existing [test][org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet>.`test`: NamedDomainObjectProvider<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet>
        get() = named<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet>("test")
    


    /**
     * Provides the existing [main][org.gradle.api.tasks.SourceSet] element.
     */
    val org.gradle.api.tasks.SourceSetContainer.`main`: NamedDomainObjectProvider<org.gradle.api.tasks.SourceSet>
        get() = named<org.gradle.api.tasks.SourceSet>("main")
    


    /**
     * Provides the existing [test][org.gradle.api.tasks.SourceSet] element.
     */
    val org.gradle.api.tasks.SourceSetContainer.`test`: NamedDomainObjectProvider<org.gradle.api.tasks.SourceSet>
        get() = named<org.gradle.api.tasks.SourceSet>("test")
    


    /**
     * Provides the existing [annotationProcessor][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`annotationProcessor`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("annotationProcessor")
    


    /**
     * Provides the existing [api][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`api`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("api")
    


    /**
     * Provides the existing [apiDependenciesMetadata][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`apiDependenciesMetadata`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("apiDependenciesMetadata")
    


    /**
     * Provides the existing [apiElements][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`apiElements`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("apiElements")
    


    /**
     * Provides the existing [apiElements-published][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`apiElements-published`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("apiElements-published")
    


    /**
     * Provides the existing [archives][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`archives`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("archives")
    


    /**
     * Provides the existing [compileClasspath][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`compileClasspath`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("compileClasspath")
    


    /**
     * Provides the existing [compileOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`compileOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("compileOnly")
    


    /**
     * Provides the existing [compileOnlyApi][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`compileOnlyApi`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("compileOnlyApi")
    


    /**
     * Provides the existing [compileOnlyDependenciesMetadata][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`compileOnlyDependenciesMetadata`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("compileOnlyDependenciesMetadata")
    


    /**
     * Provides the existing [default][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`default`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("default")
    


    /**
     * Provides the existing [implementation][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`implementation`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("implementation")
    


    /**
     * Provides the existing [implementationDependenciesMetadata][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`implementationDependenciesMetadata`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("implementationDependenciesMetadata")
    


    /**
     * Provides the existing [intransitiveDependenciesMetadata][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`intransitiveDependenciesMetadata`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("intransitiveDependenciesMetadata")
    


    /**
     * Provides the existing [kotlinBouncyCastleConfiguration][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`kotlinBouncyCastleConfiguration`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("kotlinBouncyCastleConfiguration")
    


    /**
     * Provides the existing [kotlinBuildToolsApiClasspath][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`kotlinBuildToolsApiClasspath`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("kotlinBuildToolsApiClasspath")
    


    /**
     * Provides the existing [kotlinCompilerClasspath][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`kotlinCompilerClasspath`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("kotlinCompilerClasspath")
    


    /**
     * Provides the existing [kotlinCompilerPluginClasspath][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`kotlinCompilerPluginClasspath`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("kotlinCompilerPluginClasspath")
    


    /**
     * Provides the existing [kotlinCompilerPluginClasspathMain][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`kotlinCompilerPluginClasspathMain`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("kotlinCompilerPluginClasspathMain")
    


    /**
     * Provides the existing [kotlinCompilerPluginClasspathTest][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`kotlinCompilerPluginClasspathTest`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("kotlinCompilerPluginClasspathTest")
    


    /**
     * Provides the existing [kotlinInternalAbiValidation][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`kotlinInternalAbiValidation`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("kotlinInternalAbiValidation")
    


    /**
     * Provides the existing [kotlinKlibCommonizerClasspath][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`kotlinKlibCommonizerClasspath`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("kotlinKlibCommonizerClasspath")
    


    /**
     * Provides the existing [kotlinNativeCompilerPluginClasspath][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`kotlinNativeCompilerPluginClasspath`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("kotlinNativeCompilerPluginClasspath")
    


    /**
     * Provides the existing [kotlinScriptDef][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`kotlinScriptDef`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("kotlinScriptDef")
    


    /**
     * Provides the existing [kotlinScriptDefExtensions][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`kotlinScriptDefExtensions`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("kotlinScriptDefExtensions")
    


    /**
     * Provides the existing [mainSourceElements][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`mainSourceElements`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("mainSourceElements")
    


    /**
     * Provides the existing [runtimeClasspath][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`runtimeClasspath`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("runtimeClasspath")
    


    /**
     * Provides the existing [runtimeElements][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`runtimeElements`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("runtimeElements")
    


    /**
     * Provides the existing [runtimeElements-published][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`runtimeElements-published`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("runtimeElements-published")
    


    /**
     * Provides the existing [runtimeOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`runtimeOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("runtimeOnly")
    


    /**
     * Provides the existing [swiftExportClasspath][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`swiftExportClasspath`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("swiftExportClasspath")
    


    /**
     * Provides the existing [swiftExportClasspathResolvable][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`swiftExportClasspathResolvable`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("swiftExportClasspathResolvable")
    


    /**
     * Provides the existing [testAnnotationProcessor][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testAnnotationProcessor`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testAnnotationProcessor")
    


    /**
     * Provides the existing [testApi][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testApi`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testApi")
    


    /**
     * Provides the existing [testApiDependenciesMetadata][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testApiDependenciesMetadata`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testApiDependenciesMetadata")
    


    /**
     * Provides the existing [testCompileClasspath][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testCompileClasspath`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testCompileClasspath")
    


    /**
     * Provides the existing [testCompileOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testCompileOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testCompileOnly")
    


    /**
     * Provides the existing [testCompileOnlyDependenciesMetadata][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testCompileOnlyDependenciesMetadata`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testCompileOnlyDependenciesMetadata")
    


    /**
     * Provides the existing [testImplementation][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testImplementation`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testImplementation")
    


    /**
     * Provides the existing [testImplementationDependenciesMetadata][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testImplementationDependenciesMetadata`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testImplementationDependenciesMetadata")
    


    /**
     * Provides the existing [testIntransitiveDependenciesMetadata][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testIntransitiveDependenciesMetadata`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testIntransitiveDependenciesMetadata")
    


    /**
     * Provides the existing [testKotlinScriptDef][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testKotlinScriptDef`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testKotlinScriptDef")
    


    /**
     * Provides the existing [testKotlinScriptDefExtensions][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testKotlinScriptDefExtensions`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testKotlinScriptDefExtensions")
    


    /**
     * Provides the existing [testResultsElementsForTest][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testResultsElementsForTest`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testResultsElementsForTest")
    


    /**
     * Provides the existing [testRuntimeClasspath][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testRuntimeClasspath`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testRuntimeClasspath")
    


    /**
     * Provides the existing [testRuntimeOnly][org.gradle.api.artifacts.Configuration] element.
     */
    val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`testRuntimeOnly`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
        get() = named<org.gradle.api.artifacts.Configuration>("testRuntimeOnly")
    


    /**
     * Adds a dependency to the 'annotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`annotationProcessor`(dependencyNotation: Any): Dependency? =
        add("annotationProcessor", dependencyNotation)


    /**
     * Adds a dependency to the 'annotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`annotationProcessor`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "annotationProcessor", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'annotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`annotationProcessor`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "annotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'annotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`annotationProcessor`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "annotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'annotationProcessor' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`annotationProcessor`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "annotationProcessor", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'annotationProcessor' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`annotationProcessor`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("annotationProcessor", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'annotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`annotationProcessor`(constraintNotation: Any): DependencyConstraint =
        add("annotationProcessor", constraintNotation)


    /**
     * Adds a dependency constraint to the 'annotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`annotationProcessor`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("annotationProcessor", constraintNotation, block)


    /**
     * Adds an artifact to the 'annotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`annotationProcessor`(artifactNotation: Any): PublishArtifact =
        add("annotationProcessor", artifactNotation)


    /**
     * Adds an artifact to the 'annotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`annotationProcessor`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("annotationProcessor", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'api' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`api`(dependencyNotation: Any): Dependency? =
        add("api", dependencyNotation)


    /**
     * Adds a dependency to the 'api' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`api`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "api", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'api' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`api`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "api", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'api' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`api`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "api", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'api' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`api`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "api", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'api' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`api`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("api", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'api' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`api`(constraintNotation: Any): DependencyConstraint =
        add("api", constraintNotation)


    /**
     * Adds a dependency constraint to the 'api' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`api`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("api", constraintNotation, block)


    /**
     * Adds an artifact to the 'api' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`api`(artifactNotation: Any): PublishArtifact =
        add("api", artifactNotation)


    /**
     * Adds an artifact to the 'api' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`api`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("api", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'apiDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`apiDependenciesMetadata`(dependencyNotation: Any): Dependency? =
        add("apiDependenciesMetadata", dependencyNotation)


    /**
     * Adds a dependency to the 'apiDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`apiDependenciesMetadata`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "apiDependenciesMetadata", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'apiDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`apiDependenciesMetadata`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "apiDependenciesMetadata", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'apiDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`apiDependenciesMetadata`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "apiDependenciesMetadata", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'apiDependenciesMetadata' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`apiDependenciesMetadata`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "apiDependenciesMetadata", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'apiDependenciesMetadata' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`apiDependenciesMetadata`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("apiDependenciesMetadata", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'apiDependenciesMetadata' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`apiDependenciesMetadata`(constraintNotation: Any): DependencyConstraint =
        add("apiDependenciesMetadata", constraintNotation)


    /**
     * Adds a dependency constraint to the 'apiDependenciesMetadata' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`apiDependenciesMetadata`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("apiDependenciesMetadata", constraintNotation, block)


    /**
     * Adds an artifact to the 'apiDependenciesMetadata' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`apiDependenciesMetadata`(artifactNotation: Any): PublishArtifact =
        add("apiDependenciesMetadata", artifactNotation)


    /**
     * Adds an artifact to the 'apiDependenciesMetadata' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`apiDependenciesMetadata`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("apiDependenciesMetadata", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'apiElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`apiElements`(dependencyNotation: Any): Dependency? =
        add("apiElements", dependencyNotation)


    /**
     * Adds a dependency to the 'apiElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`apiElements`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "apiElements", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'apiElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`apiElements`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "apiElements", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'apiElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`apiElements`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "apiElements", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'apiElements' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`apiElements`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "apiElements", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'apiElements' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`apiElements`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("apiElements", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'apiElements' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`apiElements`(constraintNotation: Any): DependencyConstraint =
        add("apiElements", constraintNotation)


    /**
     * Adds a dependency constraint to the 'apiElements' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`apiElements`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("apiElements", constraintNotation, block)


    /**
     * Adds an artifact to the 'apiElements' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`apiElements`(artifactNotation: Any): PublishArtifact =
        add("apiElements", artifactNotation)


    /**
     * Adds an artifact to the 'apiElements' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`apiElements`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("apiElements", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'apiElements-published' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`apiElements-published`(dependencyNotation: Any): Dependency? =
        add("apiElements-published", dependencyNotation)


    /**
     * Adds a dependency to the 'apiElements-published' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`apiElements-published`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "apiElements-published", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'apiElements-published' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`apiElements-published`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "apiElements-published", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'apiElements-published' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`apiElements-published`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "apiElements-published", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'apiElements-published' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`apiElements-published`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "apiElements-published", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'apiElements-published' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`apiElements-published`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("apiElements-published", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'apiElements-published' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`apiElements-published`(constraintNotation: Any): DependencyConstraint =
        add("apiElements-published", constraintNotation)


    /**
     * Adds a dependency constraint to the 'apiElements-published' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`apiElements-published`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("apiElements-published", constraintNotation, block)


    /**
     * Adds an artifact to the 'apiElements-published' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`apiElements-published`(artifactNotation: Any): PublishArtifact =
        add("apiElements-published", artifactNotation)


    /**
     * Adds an artifact to the 'apiElements-published' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`apiElements-published`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("apiElements-published", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'archives' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`archives`(dependencyNotation: Any): Dependency? =
        add("archives", dependencyNotation)


    /**
     * Adds a dependency to the 'archives' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`archives`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "archives", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'archives' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`archives`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "archives", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'archives' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`archives`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "archives", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'archives' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`archives`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "archives", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'archives' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`archives`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("archives", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'archives' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`archives`(constraintNotation: Any): DependencyConstraint =
        add("archives", constraintNotation)


    /**
     * Adds a dependency constraint to the 'archives' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`archives`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("archives", constraintNotation, block)


    /**
     * Adds an artifact to the 'archives' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`archives`(artifactNotation: Any): PublishArtifact =
        add("archives", artifactNotation)


    /**
     * Adds an artifact to the 'archives' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`archives`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("archives", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'compileClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`compileClasspath`(dependencyNotation: Any): Dependency? =
        add("compileClasspath", dependencyNotation)


    /**
     * Adds a dependency to the 'compileClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`compileClasspath`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "compileClasspath", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'compileClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`compileClasspath`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "compileClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'compileClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`compileClasspath`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "compileClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'compileClasspath' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`compileClasspath`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "compileClasspath", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'compileClasspath' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`compileClasspath`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("compileClasspath", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'compileClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`compileClasspath`(constraintNotation: Any): DependencyConstraint =
        add("compileClasspath", constraintNotation)


    /**
     * Adds a dependency constraint to the 'compileClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`compileClasspath`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("compileClasspath", constraintNotation, block)


    /**
     * Adds an artifact to the 'compileClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`compileClasspath`(artifactNotation: Any): PublishArtifact =
        add("compileClasspath", artifactNotation)


    /**
     * Adds an artifact to the 'compileClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`compileClasspath`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("compileClasspath", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'compileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`compileOnly`(dependencyNotation: Any): Dependency? =
        add("compileOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'compileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`compileOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "compileOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'compileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`compileOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "compileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'compileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`compileOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "compileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'compileOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`compileOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "compileOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'compileOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`compileOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("compileOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'compileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`compileOnly`(constraintNotation: Any): DependencyConstraint =
        add("compileOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'compileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`compileOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("compileOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'compileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`compileOnly`(artifactNotation: Any): PublishArtifact =
        add("compileOnly", artifactNotation)


    /**
     * Adds an artifact to the 'compileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`compileOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("compileOnly", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'compileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`compileOnlyApi`(dependencyNotation: Any): Dependency? =
        add("compileOnlyApi", dependencyNotation)


    /**
     * Adds a dependency to the 'compileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`compileOnlyApi`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "compileOnlyApi", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'compileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`compileOnlyApi`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "compileOnlyApi", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'compileOnlyApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`compileOnlyApi`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "compileOnlyApi", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'compileOnlyApi' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`compileOnlyApi`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "compileOnlyApi", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'compileOnlyApi' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`compileOnlyApi`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("compileOnlyApi", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'compileOnlyApi' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`compileOnlyApi`(constraintNotation: Any): DependencyConstraint =
        add("compileOnlyApi", constraintNotation)


    /**
     * Adds a dependency constraint to the 'compileOnlyApi' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`compileOnlyApi`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("compileOnlyApi", constraintNotation, block)


    /**
     * Adds an artifact to the 'compileOnlyApi' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`compileOnlyApi`(artifactNotation: Any): PublishArtifact =
        add("compileOnlyApi", artifactNotation)


    /**
     * Adds an artifact to the 'compileOnlyApi' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`compileOnlyApi`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("compileOnlyApi", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'compileOnlyDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`compileOnlyDependenciesMetadata`(dependencyNotation: Any): Dependency? =
        add("compileOnlyDependenciesMetadata", dependencyNotation)


    /**
     * Adds a dependency to the 'compileOnlyDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`compileOnlyDependenciesMetadata`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "compileOnlyDependenciesMetadata", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'compileOnlyDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`compileOnlyDependenciesMetadata`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "compileOnlyDependenciesMetadata", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'compileOnlyDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`compileOnlyDependenciesMetadata`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "compileOnlyDependenciesMetadata", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'compileOnlyDependenciesMetadata' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`compileOnlyDependenciesMetadata`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "compileOnlyDependenciesMetadata", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'compileOnlyDependenciesMetadata' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`compileOnlyDependenciesMetadata`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("compileOnlyDependenciesMetadata", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'compileOnlyDependenciesMetadata' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`compileOnlyDependenciesMetadata`(constraintNotation: Any): DependencyConstraint =
        add("compileOnlyDependenciesMetadata", constraintNotation)


    /**
     * Adds a dependency constraint to the 'compileOnlyDependenciesMetadata' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`compileOnlyDependenciesMetadata`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("compileOnlyDependenciesMetadata", constraintNotation, block)


    /**
     * Adds an artifact to the 'compileOnlyDependenciesMetadata' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`compileOnlyDependenciesMetadata`(artifactNotation: Any): PublishArtifact =
        add("compileOnlyDependenciesMetadata", artifactNotation)


    /**
     * Adds an artifact to the 'compileOnlyDependenciesMetadata' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`compileOnlyDependenciesMetadata`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("compileOnlyDependenciesMetadata", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'default' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`default`(dependencyNotation: Any): Dependency? =
        add("default", dependencyNotation)


    /**
     * Adds a dependency to the 'default' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`default`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "default", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'default' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`default`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "default", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'default' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`default`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "default", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'default' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`default`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "default", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'default' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`default`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("default", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'default' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`default`(constraintNotation: Any): DependencyConstraint =
        add("default", constraintNotation)


    /**
     * Adds a dependency constraint to the 'default' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`default`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("default", constraintNotation, block)


    /**
     * Adds an artifact to the 'default' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`default`(artifactNotation: Any): PublishArtifact =
        add("default", artifactNotation)


    /**
     * Adds an artifact to the 'default' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`default`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("default", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'implementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`implementation`(dependencyNotation: Any): Dependency? =
        add("implementation", dependencyNotation)


    /**
     * Adds a dependency to the 'implementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`implementation`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "implementation", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'implementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`implementation`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "implementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'implementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`implementation`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "implementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'implementation' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`implementation`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "implementation", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'implementation' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`implementation`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("implementation", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'implementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`implementation`(constraintNotation: Any): DependencyConstraint =
        add("implementation", constraintNotation)


    /**
     * Adds a dependency constraint to the 'implementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`implementation`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("implementation", constraintNotation, block)


    /**
     * Adds an artifact to the 'implementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`implementation`(artifactNotation: Any): PublishArtifact =
        add("implementation", artifactNotation)


    /**
     * Adds an artifact to the 'implementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`implementation`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("implementation", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'implementationDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`implementationDependenciesMetadata`(dependencyNotation: Any): Dependency? =
        add("implementationDependenciesMetadata", dependencyNotation)


    /**
     * Adds a dependency to the 'implementationDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`implementationDependenciesMetadata`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "implementationDependenciesMetadata", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'implementationDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`implementationDependenciesMetadata`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "implementationDependenciesMetadata", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'implementationDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`implementationDependenciesMetadata`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "implementationDependenciesMetadata", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'implementationDependenciesMetadata' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`implementationDependenciesMetadata`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "implementationDependenciesMetadata", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'implementationDependenciesMetadata' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`implementationDependenciesMetadata`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("implementationDependenciesMetadata", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'implementationDependenciesMetadata' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`implementationDependenciesMetadata`(constraintNotation: Any): DependencyConstraint =
        add("implementationDependenciesMetadata", constraintNotation)


    /**
     * Adds a dependency constraint to the 'implementationDependenciesMetadata' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`implementationDependenciesMetadata`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("implementationDependenciesMetadata", constraintNotation, block)


    /**
     * Adds an artifact to the 'implementationDependenciesMetadata' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`implementationDependenciesMetadata`(artifactNotation: Any): PublishArtifact =
        add("implementationDependenciesMetadata", artifactNotation)


    /**
     * Adds an artifact to the 'implementationDependenciesMetadata' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`implementationDependenciesMetadata`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("implementationDependenciesMetadata", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'intransitiveDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`intransitiveDependenciesMetadata`(dependencyNotation: Any): Dependency? =
        add("intransitiveDependenciesMetadata", dependencyNotation)


    /**
     * Adds a dependency to the 'intransitiveDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`intransitiveDependenciesMetadata`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "intransitiveDependenciesMetadata", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'intransitiveDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`intransitiveDependenciesMetadata`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "intransitiveDependenciesMetadata", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'intransitiveDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`intransitiveDependenciesMetadata`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "intransitiveDependenciesMetadata", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'intransitiveDependenciesMetadata' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`intransitiveDependenciesMetadata`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "intransitiveDependenciesMetadata", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'intransitiveDependenciesMetadata' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`intransitiveDependenciesMetadata`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("intransitiveDependenciesMetadata", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'intransitiveDependenciesMetadata' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`intransitiveDependenciesMetadata`(constraintNotation: Any): DependencyConstraint =
        add("intransitiveDependenciesMetadata", constraintNotation)


    /**
     * Adds a dependency constraint to the 'intransitiveDependenciesMetadata' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`intransitiveDependenciesMetadata`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("intransitiveDependenciesMetadata", constraintNotation, block)


    /**
     * Adds an artifact to the 'intransitiveDependenciesMetadata' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`intransitiveDependenciesMetadata`(artifactNotation: Any): PublishArtifact =
        add("intransitiveDependenciesMetadata", artifactNotation)


    /**
     * Adds an artifact to the 'intransitiveDependenciesMetadata' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`intransitiveDependenciesMetadata`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("intransitiveDependenciesMetadata", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'kotlinBouncyCastleConfiguration' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinBouncyCastleConfiguration`(dependencyNotation: Any): Dependency? =
        add("kotlinBouncyCastleConfiguration", dependencyNotation)


    /**
     * Adds a dependency to the 'kotlinBouncyCastleConfiguration' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinBouncyCastleConfiguration`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "kotlinBouncyCastleConfiguration", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'kotlinBouncyCastleConfiguration' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinBouncyCastleConfiguration`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kotlinBouncyCastleConfiguration", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinBouncyCastleConfiguration' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinBouncyCastleConfiguration`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kotlinBouncyCastleConfiguration", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinBouncyCastleConfiguration' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`kotlinBouncyCastleConfiguration`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "kotlinBouncyCastleConfiguration", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinBouncyCastleConfiguration' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`kotlinBouncyCastleConfiguration`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("kotlinBouncyCastleConfiguration", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'kotlinBouncyCastleConfiguration' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kotlinBouncyCastleConfiguration`(constraintNotation: Any): DependencyConstraint =
        add("kotlinBouncyCastleConfiguration", constraintNotation)


    /**
     * Adds a dependency constraint to the 'kotlinBouncyCastleConfiguration' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kotlinBouncyCastleConfiguration`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("kotlinBouncyCastleConfiguration", constraintNotation, block)


    /**
     * Adds an artifact to the 'kotlinBouncyCastleConfiguration' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kotlinBouncyCastleConfiguration`(artifactNotation: Any): PublishArtifact =
        add("kotlinBouncyCastleConfiguration", artifactNotation)


    /**
     * Adds an artifact to the 'kotlinBouncyCastleConfiguration' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kotlinBouncyCastleConfiguration`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("kotlinBouncyCastleConfiguration", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'kotlinBuildToolsApiClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinBuildToolsApiClasspath`(dependencyNotation: Any): Dependency? =
        add("kotlinBuildToolsApiClasspath", dependencyNotation)


    /**
     * Adds a dependency to the 'kotlinBuildToolsApiClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinBuildToolsApiClasspath`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "kotlinBuildToolsApiClasspath", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'kotlinBuildToolsApiClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinBuildToolsApiClasspath`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kotlinBuildToolsApiClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinBuildToolsApiClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinBuildToolsApiClasspath`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kotlinBuildToolsApiClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinBuildToolsApiClasspath' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`kotlinBuildToolsApiClasspath`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "kotlinBuildToolsApiClasspath", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinBuildToolsApiClasspath' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`kotlinBuildToolsApiClasspath`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("kotlinBuildToolsApiClasspath", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'kotlinBuildToolsApiClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kotlinBuildToolsApiClasspath`(constraintNotation: Any): DependencyConstraint =
        add("kotlinBuildToolsApiClasspath", constraintNotation)


    /**
     * Adds a dependency constraint to the 'kotlinBuildToolsApiClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kotlinBuildToolsApiClasspath`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("kotlinBuildToolsApiClasspath", constraintNotation, block)


    /**
     * Adds an artifact to the 'kotlinBuildToolsApiClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kotlinBuildToolsApiClasspath`(artifactNotation: Any): PublishArtifact =
        add("kotlinBuildToolsApiClasspath", artifactNotation)


    /**
     * Adds an artifact to the 'kotlinBuildToolsApiClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kotlinBuildToolsApiClasspath`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("kotlinBuildToolsApiClasspath", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'kotlinCompilerClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinCompilerClasspath`(dependencyNotation: Any): Dependency? =
        add("kotlinCompilerClasspath", dependencyNotation)


    /**
     * Adds a dependency to the 'kotlinCompilerClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinCompilerClasspath`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "kotlinCompilerClasspath", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'kotlinCompilerClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinCompilerClasspath`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kotlinCompilerClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinCompilerClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinCompilerClasspath`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kotlinCompilerClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinCompilerClasspath' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`kotlinCompilerClasspath`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "kotlinCompilerClasspath", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinCompilerClasspath' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`kotlinCompilerClasspath`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("kotlinCompilerClasspath", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'kotlinCompilerClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kotlinCompilerClasspath`(constraintNotation: Any): DependencyConstraint =
        add("kotlinCompilerClasspath", constraintNotation)


    /**
     * Adds a dependency constraint to the 'kotlinCompilerClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kotlinCompilerClasspath`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("kotlinCompilerClasspath", constraintNotation, block)


    /**
     * Adds an artifact to the 'kotlinCompilerClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kotlinCompilerClasspath`(artifactNotation: Any): PublishArtifact =
        add("kotlinCompilerClasspath", artifactNotation)


    /**
     * Adds an artifact to the 'kotlinCompilerClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kotlinCompilerClasspath`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("kotlinCompilerClasspath", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'kotlinCompilerPluginClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinCompilerPluginClasspath`(dependencyNotation: Any): Dependency? =
        add("kotlinCompilerPluginClasspath", dependencyNotation)


    /**
     * Adds a dependency to the 'kotlinCompilerPluginClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinCompilerPluginClasspath`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "kotlinCompilerPluginClasspath", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'kotlinCompilerPluginClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinCompilerPluginClasspath`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kotlinCompilerPluginClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinCompilerPluginClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinCompilerPluginClasspath`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kotlinCompilerPluginClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinCompilerPluginClasspath' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`kotlinCompilerPluginClasspath`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "kotlinCompilerPluginClasspath", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinCompilerPluginClasspath' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`kotlinCompilerPluginClasspath`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("kotlinCompilerPluginClasspath", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'kotlinCompilerPluginClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kotlinCompilerPluginClasspath`(constraintNotation: Any): DependencyConstraint =
        add("kotlinCompilerPluginClasspath", constraintNotation)


    /**
     * Adds a dependency constraint to the 'kotlinCompilerPluginClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kotlinCompilerPluginClasspath`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("kotlinCompilerPluginClasspath", constraintNotation, block)


    /**
     * Adds an artifact to the 'kotlinCompilerPluginClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kotlinCompilerPluginClasspath`(artifactNotation: Any): PublishArtifact =
        add("kotlinCompilerPluginClasspath", artifactNotation)


    /**
     * Adds an artifact to the 'kotlinCompilerPluginClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kotlinCompilerPluginClasspath`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("kotlinCompilerPluginClasspath", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'kotlinCompilerPluginClasspathMain' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinCompilerPluginClasspathMain`(dependencyNotation: Any): Dependency? =
        add("kotlinCompilerPluginClasspathMain", dependencyNotation)


    /**
     * Adds a dependency to the 'kotlinCompilerPluginClasspathMain' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinCompilerPluginClasspathMain`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "kotlinCompilerPluginClasspathMain", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'kotlinCompilerPluginClasspathMain' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinCompilerPluginClasspathMain`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kotlinCompilerPluginClasspathMain", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinCompilerPluginClasspathMain' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinCompilerPluginClasspathMain`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kotlinCompilerPluginClasspathMain", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinCompilerPluginClasspathMain' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`kotlinCompilerPluginClasspathMain`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "kotlinCompilerPluginClasspathMain", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinCompilerPluginClasspathMain' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`kotlinCompilerPluginClasspathMain`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("kotlinCompilerPluginClasspathMain", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'kotlinCompilerPluginClasspathMain' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kotlinCompilerPluginClasspathMain`(constraintNotation: Any): DependencyConstraint =
        add("kotlinCompilerPluginClasspathMain", constraintNotation)


    /**
     * Adds a dependency constraint to the 'kotlinCompilerPluginClasspathMain' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kotlinCompilerPluginClasspathMain`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("kotlinCompilerPluginClasspathMain", constraintNotation, block)


    /**
     * Adds an artifact to the 'kotlinCompilerPluginClasspathMain' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kotlinCompilerPluginClasspathMain`(artifactNotation: Any): PublishArtifact =
        add("kotlinCompilerPluginClasspathMain", artifactNotation)


    /**
     * Adds an artifact to the 'kotlinCompilerPluginClasspathMain' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kotlinCompilerPluginClasspathMain`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("kotlinCompilerPluginClasspathMain", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'kotlinCompilerPluginClasspathTest' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinCompilerPluginClasspathTest`(dependencyNotation: Any): Dependency? =
        add("kotlinCompilerPluginClasspathTest", dependencyNotation)


    /**
     * Adds a dependency to the 'kotlinCompilerPluginClasspathTest' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinCompilerPluginClasspathTest`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "kotlinCompilerPluginClasspathTest", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'kotlinCompilerPluginClasspathTest' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinCompilerPluginClasspathTest`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kotlinCompilerPluginClasspathTest", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinCompilerPluginClasspathTest' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinCompilerPluginClasspathTest`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kotlinCompilerPluginClasspathTest", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinCompilerPluginClasspathTest' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`kotlinCompilerPluginClasspathTest`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "kotlinCompilerPluginClasspathTest", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinCompilerPluginClasspathTest' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`kotlinCompilerPluginClasspathTest`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("kotlinCompilerPluginClasspathTest", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'kotlinCompilerPluginClasspathTest' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kotlinCompilerPluginClasspathTest`(constraintNotation: Any): DependencyConstraint =
        add("kotlinCompilerPluginClasspathTest", constraintNotation)


    /**
     * Adds a dependency constraint to the 'kotlinCompilerPluginClasspathTest' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kotlinCompilerPluginClasspathTest`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("kotlinCompilerPluginClasspathTest", constraintNotation, block)


    /**
     * Adds an artifact to the 'kotlinCompilerPluginClasspathTest' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kotlinCompilerPluginClasspathTest`(artifactNotation: Any): PublishArtifact =
        add("kotlinCompilerPluginClasspathTest", artifactNotation)


    /**
     * Adds an artifact to the 'kotlinCompilerPluginClasspathTest' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kotlinCompilerPluginClasspathTest`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("kotlinCompilerPluginClasspathTest", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'kotlinInternalAbiValidation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinInternalAbiValidation`(dependencyNotation: Any): Dependency? =
        add("kotlinInternalAbiValidation", dependencyNotation)


    /**
     * Adds a dependency to the 'kotlinInternalAbiValidation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinInternalAbiValidation`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "kotlinInternalAbiValidation", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'kotlinInternalAbiValidation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinInternalAbiValidation`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kotlinInternalAbiValidation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinInternalAbiValidation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinInternalAbiValidation`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kotlinInternalAbiValidation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinInternalAbiValidation' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`kotlinInternalAbiValidation`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "kotlinInternalAbiValidation", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinInternalAbiValidation' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`kotlinInternalAbiValidation`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("kotlinInternalAbiValidation", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'kotlinInternalAbiValidation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kotlinInternalAbiValidation`(constraintNotation: Any): DependencyConstraint =
        add("kotlinInternalAbiValidation", constraintNotation)


    /**
     * Adds a dependency constraint to the 'kotlinInternalAbiValidation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kotlinInternalAbiValidation`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("kotlinInternalAbiValidation", constraintNotation, block)


    /**
     * Adds an artifact to the 'kotlinInternalAbiValidation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kotlinInternalAbiValidation`(artifactNotation: Any): PublishArtifact =
        add("kotlinInternalAbiValidation", artifactNotation)


    /**
     * Adds an artifact to the 'kotlinInternalAbiValidation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kotlinInternalAbiValidation`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("kotlinInternalAbiValidation", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'kotlinKlibCommonizerClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinKlibCommonizerClasspath`(dependencyNotation: Any): Dependency? =
        add("kotlinKlibCommonizerClasspath", dependencyNotation)


    /**
     * Adds a dependency to the 'kotlinKlibCommonizerClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinKlibCommonizerClasspath`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "kotlinKlibCommonizerClasspath", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'kotlinKlibCommonizerClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinKlibCommonizerClasspath`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kotlinKlibCommonizerClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinKlibCommonizerClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinKlibCommonizerClasspath`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kotlinKlibCommonizerClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinKlibCommonizerClasspath' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`kotlinKlibCommonizerClasspath`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "kotlinKlibCommonizerClasspath", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinKlibCommonizerClasspath' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`kotlinKlibCommonizerClasspath`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("kotlinKlibCommonizerClasspath", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'kotlinKlibCommonizerClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kotlinKlibCommonizerClasspath`(constraintNotation: Any): DependencyConstraint =
        add("kotlinKlibCommonizerClasspath", constraintNotation)


    /**
     * Adds a dependency constraint to the 'kotlinKlibCommonizerClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kotlinKlibCommonizerClasspath`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("kotlinKlibCommonizerClasspath", constraintNotation, block)


    /**
     * Adds an artifact to the 'kotlinKlibCommonizerClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kotlinKlibCommonizerClasspath`(artifactNotation: Any): PublishArtifact =
        add("kotlinKlibCommonizerClasspath", artifactNotation)


    /**
     * Adds an artifact to the 'kotlinKlibCommonizerClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kotlinKlibCommonizerClasspath`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("kotlinKlibCommonizerClasspath", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'kotlinNativeCompilerPluginClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinNativeCompilerPluginClasspath`(dependencyNotation: Any): Dependency? =
        add("kotlinNativeCompilerPluginClasspath", dependencyNotation)


    /**
     * Adds a dependency to the 'kotlinNativeCompilerPluginClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinNativeCompilerPluginClasspath`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "kotlinNativeCompilerPluginClasspath", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'kotlinNativeCompilerPluginClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinNativeCompilerPluginClasspath`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kotlinNativeCompilerPluginClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinNativeCompilerPluginClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinNativeCompilerPluginClasspath`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kotlinNativeCompilerPluginClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinNativeCompilerPluginClasspath' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`kotlinNativeCompilerPluginClasspath`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "kotlinNativeCompilerPluginClasspath", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinNativeCompilerPluginClasspath' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`kotlinNativeCompilerPluginClasspath`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("kotlinNativeCompilerPluginClasspath", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'kotlinNativeCompilerPluginClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kotlinNativeCompilerPluginClasspath`(constraintNotation: Any): DependencyConstraint =
        add("kotlinNativeCompilerPluginClasspath", constraintNotation)


    /**
     * Adds a dependency constraint to the 'kotlinNativeCompilerPluginClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kotlinNativeCompilerPluginClasspath`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("kotlinNativeCompilerPluginClasspath", constraintNotation, block)


    /**
     * Adds an artifact to the 'kotlinNativeCompilerPluginClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kotlinNativeCompilerPluginClasspath`(artifactNotation: Any): PublishArtifact =
        add("kotlinNativeCompilerPluginClasspath", artifactNotation)


    /**
     * Adds an artifact to the 'kotlinNativeCompilerPluginClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kotlinNativeCompilerPluginClasspath`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("kotlinNativeCompilerPluginClasspath", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'kotlinScriptDef' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinScriptDef`(dependencyNotation: Any): Dependency? =
        add("kotlinScriptDef", dependencyNotation)


    /**
     * Adds a dependency to the 'kotlinScriptDef' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinScriptDef`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "kotlinScriptDef", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'kotlinScriptDef' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinScriptDef`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kotlinScriptDef", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinScriptDef' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinScriptDef`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kotlinScriptDef", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinScriptDef' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`kotlinScriptDef`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "kotlinScriptDef", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinScriptDef' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`kotlinScriptDef`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("kotlinScriptDef", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'kotlinScriptDef' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kotlinScriptDef`(constraintNotation: Any): DependencyConstraint =
        add("kotlinScriptDef", constraintNotation)


    /**
     * Adds a dependency constraint to the 'kotlinScriptDef' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kotlinScriptDef`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("kotlinScriptDef", constraintNotation, block)


    /**
     * Adds an artifact to the 'kotlinScriptDef' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kotlinScriptDef`(artifactNotation: Any): PublishArtifact =
        add("kotlinScriptDef", artifactNotation)


    /**
     * Adds an artifact to the 'kotlinScriptDef' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kotlinScriptDef`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("kotlinScriptDef", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'kotlinScriptDefExtensions' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinScriptDefExtensions`(dependencyNotation: Any): Dependency? =
        add("kotlinScriptDefExtensions", dependencyNotation)


    /**
     * Adds a dependency to the 'kotlinScriptDefExtensions' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinScriptDefExtensions`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "kotlinScriptDefExtensions", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'kotlinScriptDefExtensions' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinScriptDefExtensions`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kotlinScriptDefExtensions", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinScriptDefExtensions' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`kotlinScriptDefExtensions`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "kotlinScriptDefExtensions", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinScriptDefExtensions' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`kotlinScriptDefExtensions`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "kotlinScriptDefExtensions", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'kotlinScriptDefExtensions' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`kotlinScriptDefExtensions`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("kotlinScriptDefExtensions", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'kotlinScriptDefExtensions' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kotlinScriptDefExtensions`(constraintNotation: Any): DependencyConstraint =
        add("kotlinScriptDefExtensions", constraintNotation)


    /**
     * Adds a dependency constraint to the 'kotlinScriptDefExtensions' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`kotlinScriptDefExtensions`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("kotlinScriptDefExtensions", constraintNotation, block)


    /**
     * Adds an artifact to the 'kotlinScriptDefExtensions' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kotlinScriptDefExtensions`(artifactNotation: Any): PublishArtifact =
        add("kotlinScriptDefExtensions", artifactNotation)


    /**
     * Adds an artifact to the 'kotlinScriptDefExtensions' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`kotlinScriptDefExtensions`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("kotlinScriptDefExtensions", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'mainSourceElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`mainSourceElements`(dependencyNotation: Any): Dependency? =
        add("mainSourceElements", dependencyNotation)


    /**
     * Adds a dependency to the 'mainSourceElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`mainSourceElements`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "mainSourceElements", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'mainSourceElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`mainSourceElements`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "mainSourceElements", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'mainSourceElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`mainSourceElements`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "mainSourceElements", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'mainSourceElements' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`mainSourceElements`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "mainSourceElements", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'mainSourceElements' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`mainSourceElements`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("mainSourceElements", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'mainSourceElements' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`mainSourceElements`(constraintNotation: Any): DependencyConstraint =
        add("mainSourceElements", constraintNotation)


    /**
     * Adds a dependency constraint to the 'mainSourceElements' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`mainSourceElements`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("mainSourceElements", constraintNotation, block)


    /**
     * Adds an artifact to the 'mainSourceElements' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`mainSourceElements`(artifactNotation: Any): PublishArtifact =
        add("mainSourceElements", artifactNotation)


    /**
     * Adds an artifact to the 'mainSourceElements' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`mainSourceElements`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("mainSourceElements", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'runtimeClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`runtimeClasspath`(dependencyNotation: Any): Dependency? =
        add("runtimeClasspath", dependencyNotation)


    /**
     * Adds a dependency to the 'runtimeClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`runtimeClasspath`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "runtimeClasspath", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'runtimeClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`runtimeClasspath`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "runtimeClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'runtimeClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`runtimeClasspath`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "runtimeClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'runtimeClasspath' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`runtimeClasspath`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "runtimeClasspath", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'runtimeClasspath' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`runtimeClasspath`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("runtimeClasspath", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'runtimeClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`runtimeClasspath`(constraintNotation: Any): DependencyConstraint =
        add("runtimeClasspath", constraintNotation)


    /**
     * Adds a dependency constraint to the 'runtimeClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`runtimeClasspath`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("runtimeClasspath", constraintNotation, block)


    /**
     * Adds an artifact to the 'runtimeClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`runtimeClasspath`(artifactNotation: Any): PublishArtifact =
        add("runtimeClasspath", artifactNotation)


    /**
     * Adds an artifact to the 'runtimeClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`runtimeClasspath`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("runtimeClasspath", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'runtimeElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`runtimeElements`(dependencyNotation: Any): Dependency? =
        add("runtimeElements", dependencyNotation)


    /**
     * Adds a dependency to the 'runtimeElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`runtimeElements`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "runtimeElements", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'runtimeElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`runtimeElements`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "runtimeElements", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'runtimeElements' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`runtimeElements`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "runtimeElements", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'runtimeElements' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`runtimeElements`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "runtimeElements", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'runtimeElements' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`runtimeElements`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("runtimeElements", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'runtimeElements' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`runtimeElements`(constraintNotation: Any): DependencyConstraint =
        add("runtimeElements", constraintNotation)


    /**
     * Adds a dependency constraint to the 'runtimeElements' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`runtimeElements`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("runtimeElements", constraintNotation, block)


    /**
     * Adds an artifact to the 'runtimeElements' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`runtimeElements`(artifactNotation: Any): PublishArtifact =
        add("runtimeElements", artifactNotation)


    /**
     * Adds an artifact to the 'runtimeElements' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`runtimeElements`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("runtimeElements", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'runtimeElements-published' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`runtimeElements-published`(dependencyNotation: Any): Dependency? =
        add("runtimeElements-published", dependencyNotation)


    /**
     * Adds a dependency to the 'runtimeElements-published' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`runtimeElements-published`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "runtimeElements-published", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'runtimeElements-published' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`runtimeElements-published`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "runtimeElements-published", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'runtimeElements-published' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`runtimeElements-published`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "runtimeElements-published", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'runtimeElements-published' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`runtimeElements-published`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "runtimeElements-published", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'runtimeElements-published' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`runtimeElements-published`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("runtimeElements-published", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'runtimeElements-published' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`runtimeElements-published`(constraintNotation: Any): DependencyConstraint =
        add("runtimeElements-published", constraintNotation)


    /**
     * Adds a dependency constraint to the 'runtimeElements-published' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`runtimeElements-published`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("runtimeElements-published", constraintNotation, block)


    /**
     * Adds an artifact to the 'runtimeElements-published' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`runtimeElements-published`(artifactNotation: Any): PublishArtifact =
        add("runtimeElements-published", artifactNotation)


    /**
     * Adds an artifact to the 'runtimeElements-published' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`runtimeElements-published`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("runtimeElements-published", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'runtimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`runtimeOnly`(dependencyNotation: Any): Dependency? =
        add("runtimeOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'runtimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`runtimeOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "runtimeOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'runtimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`runtimeOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "runtimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'runtimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`runtimeOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "runtimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'runtimeOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`runtimeOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "runtimeOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'runtimeOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`runtimeOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("runtimeOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'runtimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`runtimeOnly`(constraintNotation: Any): DependencyConstraint =
        add("runtimeOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'runtimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`runtimeOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("runtimeOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'runtimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`runtimeOnly`(artifactNotation: Any): PublishArtifact =
        add("runtimeOnly", artifactNotation)


    /**
     * Adds an artifact to the 'runtimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`runtimeOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("runtimeOnly", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'swiftExportClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`swiftExportClasspath`(dependencyNotation: Any): Dependency? =
        add("swiftExportClasspath", dependencyNotation)


    /**
     * Adds a dependency to the 'swiftExportClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`swiftExportClasspath`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "swiftExportClasspath", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'swiftExportClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`swiftExportClasspath`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "swiftExportClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'swiftExportClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`swiftExportClasspath`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "swiftExportClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'swiftExportClasspath' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`swiftExportClasspath`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "swiftExportClasspath", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'swiftExportClasspath' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`swiftExportClasspath`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("swiftExportClasspath", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'swiftExportClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`swiftExportClasspath`(constraintNotation: Any): DependencyConstraint =
        add("swiftExportClasspath", constraintNotation)


    /**
     * Adds a dependency constraint to the 'swiftExportClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`swiftExportClasspath`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("swiftExportClasspath", constraintNotation, block)


    /**
     * Adds an artifact to the 'swiftExportClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`swiftExportClasspath`(artifactNotation: Any): PublishArtifact =
        add("swiftExportClasspath", artifactNotation)


    /**
     * Adds an artifact to the 'swiftExportClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`swiftExportClasspath`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("swiftExportClasspath", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'swiftExportClasspathResolvable' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`swiftExportClasspathResolvable`(dependencyNotation: Any): Dependency? =
        add("swiftExportClasspathResolvable", dependencyNotation)


    /**
     * Adds a dependency to the 'swiftExportClasspathResolvable' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`swiftExportClasspathResolvable`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "swiftExportClasspathResolvable", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'swiftExportClasspathResolvable' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`swiftExportClasspathResolvable`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "swiftExportClasspathResolvable", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'swiftExportClasspathResolvable' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`swiftExportClasspathResolvable`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "swiftExportClasspathResolvable", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'swiftExportClasspathResolvable' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`swiftExportClasspathResolvable`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "swiftExportClasspathResolvable", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'swiftExportClasspathResolvable' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`swiftExportClasspathResolvable`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("swiftExportClasspathResolvable", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'swiftExportClasspathResolvable' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`swiftExportClasspathResolvable`(constraintNotation: Any): DependencyConstraint =
        add("swiftExportClasspathResolvable", constraintNotation)


    /**
     * Adds a dependency constraint to the 'swiftExportClasspathResolvable' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`swiftExportClasspathResolvable`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("swiftExportClasspathResolvable", constraintNotation, block)


    /**
     * Adds an artifact to the 'swiftExportClasspathResolvable' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`swiftExportClasspathResolvable`(artifactNotation: Any): PublishArtifact =
        add("swiftExportClasspathResolvable", artifactNotation)


    /**
     * Adds an artifact to the 'swiftExportClasspathResolvable' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`swiftExportClasspathResolvable`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("swiftExportClasspathResolvable", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testAnnotationProcessor`(dependencyNotation: Any): Dependency? =
        add("testAnnotationProcessor", dependencyNotation)


    /**
     * Adds a dependency to the 'testAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testAnnotationProcessor`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testAnnotationProcessor", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testAnnotationProcessor`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testAnnotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testAnnotationProcessor' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testAnnotationProcessor`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testAnnotationProcessor", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testAnnotationProcessor' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testAnnotationProcessor`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testAnnotationProcessor", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testAnnotationProcessor' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testAnnotationProcessor`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testAnnotationProcessor", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testAnnotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testAnnotationProcessor`(constraintNotation: Any): DependencyConstraint =
        add("testAnnotationProcessor", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testAnnotationProcessor' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testAnnotationProcessor`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testAnnotationProcessor", constraintNotation, block)


    /**
     * Adds an artifact to the 'testAnnotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testAnnotationProcessor`(artifactNotation: Any): PublishArtifact =
        add("testAnnotationProcessor", artifactNotation)


    /**
     * Adds an artifact to the 'testAnnotationProcessor' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testAnnotationProcessor`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testAnnotationProcessor", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testApi`(dependencyNotation: Any): Dependency? =
        add("testApi", dependencyNotation)


    /**
     * Adds a dependency to the 'testApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testApi`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testApi", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testApi`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testApi", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testApi' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testApi`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testApi", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testApi' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testApi`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testApi", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testApi' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testApi`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testApi", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testApi' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testApi`(constraintNotation: Any): DependencyConstraint =
        add("testApi", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testApi' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testApi`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testApi", constraintNotation, block)


    /**
     * Adds an artifact to the 'testApi' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testApi`(artifactNotation: Any): PublishArtifact =
        add("testApi", artifactNotation)


    /**
     * Adds an artifact to the 'testApi' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testApi`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testApi", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testApiDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testApiDependenciesMetadata`(dependencyNotation: Any): Dependency? =
        add("testApiDependenciesMetadata", dependencyNotation)


    /**
     * Adds a dependency to the 'testApiDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testApiDependenciesMetadata`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testApiDependenciesMetadata", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testApiDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testApiDependenciesMetadata`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testApiDependenciesMetadata", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testApiDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testApiDependenciesMetadata`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testApiDependenciesMetadata", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testApiDependenciesMetadata' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testApiDependenciesMetadata`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testApiDependenciesMetadata", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testApiDependenciesMetadata' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testApiDependenciesMetadata`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testApiDependenciesMetadata", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testApiDependenciesMetadata' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testApiDependenciesMetadata`(constraintNotation: Any): DependencyConstraint =
        add("testApiDependenciesMetadata", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testApiDependenciesMetadata' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testApiDependenciesMetadata`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testApiDependenciesMetadata", constraintNotation, block)


    /**
     * Adds an artifact to the 'testApiDependenciesMetadata' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testApiDependenciesMetadata`(artifactNotation: Any): PublishArtifact =
        add("testApiDependenciesMetadata", artifactNotation)


    /**
     * Adds an artifact to the 'testApiDependenciesMetadata' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testApiDependenciesMetadata`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testApiDependenciesMetadata", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testCompileClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testCompileClasspath`(dependencyNotation: Any): Dependency? =
        add("testCompileClasspath", dependencyNotation)


    /**
     * Adds a dependency to the 'testCompileClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testCompileClasspath`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testCompileClasspath", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testCompileClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testCompileClasspath`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testCompileClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testCompileClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testCompileClasspath`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testCompileClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testCompileClasspath' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testCompileClasspath`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testCompileClasspath", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testCompileClasspath' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testCompileClasspath`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testCompileClasspath", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testCompileClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testCompileClasspath`(constraintNotation: Any): DependencyConstraint =
        add("testCompileClasspath", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testCompileClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testCompileClasspath`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testCompileClasspath", constraintNotation, block)


    /**
     * Adds an artifact to the 'testCompileClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testCompileClasspath`(artifactNotation: Any): PublishArtifact =
        add("testCompileClasspath", artifactNotation)


    /**
     * Adds an artifact to the 'testCompileClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testCompileClasspath`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testCompileClasspath", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testCompileOnly`(dependencyNotation: Any): Dependency? =
        add("testCompileOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'testCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testCompileOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testCompileOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testCompileOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testCompileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testCompileOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testCompileOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testCompileOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testCompileOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testCompileOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testCompileOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testCompileOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testCompileOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testCompileOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testCompileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testCompileOnly`(constraintNotation: Any): DependencyConstraint =
        add("testCompileOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testCompileOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testCompileOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testCompileOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'testCompileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testCompileOnly`(artifactNotation: Any): PublishArtifact =
        add("testCompileOnly", artifactNotation)


    /**
     * Adds an artifact to the 'testCompileOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testCompileOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testCompileOnly", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testCompileOnlyDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testCompileOnlyDependenciesMetadata`(dependencyNotation: Any): Dependency? =
        add("testCompileOnlyDependenciesMetadata", dependencyNotation)


    /**
     * Adds a dependency to the 'testCompileOnlyDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testCompileOnlyDependenciesMetadata`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testCompileOnlyDependenciesMetadata", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testCompileOnlyDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testCompileOnlyDependenciesMetadata`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testCompileOnlyDependenciesMetadata", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testCompileOnlyDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testCompileOnlyDependenciesMetadata`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testCompileOnlyDependenciesMetadata", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testCompileOnlyDependenciesMetadata' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testCompileOnlyDependenciesMetadata`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testCompileOnlyDependenciesMetadata", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testCompileOnlyDependenciesMetadata' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testCompileOnlyDependenciesMetadata`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testCompileOnlyDependenciesMetadata", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testCompileOnlyDependenciesMetadata' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testCompileOnlyDependenciesMetadata`(constraintNotation: Any): DependencyConstraint =
        add("testCompileOnlyDependenciesMetadata", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testCompileOnlyDependenciesMetadata' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testCompileOnlyDependenciesMetadata`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testCompileOnlyDependenciesMetadata", constraintNotation, block)


    /**
     * Adds an artifact to the 'testCompileOnlyDependenciesMetadata' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testCompileOnlyDependenciesMetadata`(artifactNotation: Any): PublishArtifact =
        add("testCompileOnlyDependenciesMetadata", artifactNotation)


    /**
     * Adds an artifact to the 'testCompileOnlyDependenciesMetadata' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testCompileOnlyDependenciesMetadata`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testCompileOnlyDependenciesMetadata", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testImplementation`(dependencyNotation: Any): Dependency? =
        add("testImplementation", dependencyNotation)


    /**
     * Adds a dependency to the 'testImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testImplementation`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testImplementation", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testImplementation`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testImplementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testImplementation' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testImplementation`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testImplementation", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testImplementation' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testImplementation`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testImplementation", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testImplementation' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testImplementation`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testImplementation", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testImplementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testImplementation`(constraintNotation: Any): DependencyConstraint =
        add("testImplementation", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testImplementation' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testImplementation`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testImplementation", constraintNotation, block)


    /**
     * Adds an artifact to the 'testImplementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testImplementation`(artifactNotation: Any): PublishArtifact =
        add("testImplementation", artifactNotation)


    /**
     * Adds an artifact to the 'testImplementation' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testImplementation`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testImplementation", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testImplementationDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testImplementationDependenciesMetadata`(dependencyNotation: Any): Dependency? =
        add("testImplementationDependenciesMetadata", dependencyNotation)


    /**
     * Adds a dependency to the 'testImplementationDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testImplementationDependenciesMetadata`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testImplementationDependenciesMetadata", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testImplementationDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testImplementationDependenciesMetadata`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testImplementationDependenciesMetadata", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testImplementationDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testImplementationDependenciesMetadata`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testImplementationDependenciesMetadata", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testImplementationDependenciesMetadata' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testImplementationDependenciesMetadata`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testImplementationDependenciesMetadata", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testImplementationDependenciesMetadata' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testImplementationDependenciesMetadata`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testImplementationDependenciesMetadata", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testImplementationDependenciesMetadata' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testImplementationDependenciesMetadata`(constraintNotation: Any): DependencyConstraint =
        add("testImplementationDependenciesMetadata", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testImplementationDependenciesMetadata' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testImplementationDependenciesMetadata`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testImplementationDependenciesMetadata", constraintNotation, block)


    /**
     * Adds an artifact to the 'testImplementationDependenciesMetadata' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testImplementationDependenciesMetadata`(artifactNotation: Any): PublishArtifact =
        add("testImplementationDependenciesMetadata", artifactNotation)


    /**
     * Adds an artifact to the 'testImplementationDependenciesMetadata' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testImplementationDependenciesMetadata`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testImplementationDependenciesMetadata", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testIntransitiveDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testIntransitiveDependenciesMetadata`(dependencyNotation: Any): Dependency? =
        add("testIntransitiveDependenciesMetadata", dependencyNotation)


    /**
     * Adds a dependency to the 'testIntransitiveDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testIntransitiveDependenciesMetadata`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testIntransitiveDependenciesMetadata", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testIntransitiveDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testIntransitiveDependenciesMetadata`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testIntransitiveDependenciesMetadata", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testIntransitiveDependenciesMetadata' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testIntransitiveDependenciesMetadata`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testIntransitiveDependenciesMetadata", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testIntransitiveDependenciesMetadata' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testIntransitiveDependenciesMetadata`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testIntransitiveDependenciesMetadata", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testIntransitiveDependenciesMetadata' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testIntransitiveDependenciesMetadata`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testIntransitiveDependenciesMetadata", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testIntransitiveDependenciesMetadata' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testIntransitiveDependenciesMetadata`(constraintNotation: Any): DependencyConstraint =
        add("testIntransitiveDependenciesMetadata", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testIntransitiveDependenciesMetadata' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testIntransitiveDependenciesMetadata`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testIntransitiveDependenciesMetadata", constraintNotation, block)


    /**
     * Adds an artifact to the 'testIntransitiveDependenciesMetadata' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testIntransitiveDependenciesMetadata`(artifactNotation: Any): PublishArtifact =
        add("testIntransitiveDependenciesMetadata", artifactNotation)


    /**
     * Adds an artifact to the 'testIntransitiveDependenciesMetadata' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testIntransitiveDependenciesMetadata`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testIntransitiveDependenciesMetadata", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testKotlinScriptDef' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testKotlinScriptDef`(dependencyNotation: Any): Dependency? =
        add("testKotlinScriptDef", dependencyNotation)


    /**
     * Adds a dependency to the 'testKotlinScriptDef' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testKotlinScriptDef`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testKotlinScriptDef", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testKotlinScriptDef' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testKotlinScriptDef`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testKotlinScriptDef", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testKotlinScriptDef' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testKotlinScriptDef`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testKotlinScriptDef", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testKotlinScriptDef' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testKotlinScriptDef`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testKotlinScriptDef", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testKotlinScriptDef' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testKotlinScriptDef`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testKotlinScriptDef", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testKotlinScriptDef' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testKotlinScriptDef`(constraintNotation: Any): DependencyConstraint =
        add("testKotlinScriptDef", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testKotlinScriptDef' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testKotlinScriptDef`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testKotlinScriptDef", constraintNotation, block)


    /**
     * Adds an artifact to the 'testKotlinScriptDef' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testKotlinScriptDef`(artifactNotation: Any): PublishArtifact =
        add("testKotlinScriptDef", artifactNotation)


    /**
     * Adds an artifact to the 'testKotlinScriptDef' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testKotlinScriptDef`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testKotlinScriptDef", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testKotlinScriptDefExtensions' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testKotlinScriptDefExtensions`(dependencyNotation: Any): Dependency? =
        add("testKotlinScriptDefExtensions", dependencyNotation)


    /**
     * Adds a dependency to the 'testKotlinScriptDefExtensions' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testKotlinScriptDefExtensions`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testKotlinScriptDefExtensions", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testKotlinScriptDefExtensions' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testKotlinScriptDefExtensions`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testKotlinScriptDefExtensions", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testKotlinScriptDefExtensions' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testKotlinScriptDefExtensions`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testKotlinScriptDefExtensions", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testKotlinScriptDefExtensions' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testKotlinScriptDefExtensions`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testKotlinScriptDefExtensions", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testKotlinScriptDefExtensions' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testKotlinScriptDefExtensions`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testKotlinScriptDefExtensions", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testKotlinScriptDefExtensions' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testKotlinScriptDefExtensions`(constraintNotation: Any): DependencyConstraint =
        add("testKotlinScriptDefExtensions", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testKotlinScriptDefExtensions' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testKotlinScriptDefExtensions`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testKotlinScriptDefExtensions", constraintNotation, block)


    /**
     * Adds an artifact to the 'testKotlinScriptDefExtensions' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testKotlinScriptDefExtensions`(artifactNotation: Any): PublishArtifact =
        add("testKotlinScriptDefExtensions", artifactNotation)


    /**
     * Adds an artifact to the 'testKotlinScriptDefExtensions' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testKotlinScriptDefExtensions`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testKotlinScriptDefExtensions", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testResultsElementsForTest' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testResultsElementsForTest`(dependencyNotation: Any): Dependency? =
        add("testResultsElementsForTest", dependencyNotation)


    /**
     * Adds a dependency to the 'testResultsElementsForTest' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testResultsElementsForTest`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testResultsElementsForTest", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testResultsElementsForTest' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testResultsElementsForTest`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testResultsElementsForTest", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testResultsElementsForTest' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testResultsElementsForTest`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testResultsElementsForTest", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testResultsElementsForTest' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testResultsElementsForTest`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testResultsElementsForTest", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testResultsElementsForTest' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testResultsElementsForTest`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testResultsElementsForTest", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testResultsElementsForTest' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testResultsElementsForTest`(constraintNotation: Any): DependencyConstraint =
        add("testResultsElementsForTest", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testResultsElementsForTest' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testResultsElementsForTest`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testResultsElementsForTest", constraintNotation, block)


    /**
     * Adds an artifact to the 'testResultsElementsForTest' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testResultsElementsForTest`(artifactNotation: Any): PublishArtifact =
        add("testResultsElementsForTest", artifactNotation)


    /**
     * Adds an artifact to the 'testResultsElementsForTest' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testResultsElementsForTest`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testResultsElementsForTest", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testRuntimeClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testRuntimeClasspath`(dependencyNotation: Any): Dependency? =
        add("testRuntimeClasspath", dependencyNotation)


    /**
     * Adds a dependency to the 'testRuntimeClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testRuntimeClasspath`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testRuntimeClasspath", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testRuntimeClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testRuntimeClasspath`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testRuntimeClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testRuntimeClasspath' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testRuntimeClasspath`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testRuntimeClasspath", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testRuntimeClasspath' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testRuntimeClasspath`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testRuntimeClasspath", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testRuntimeClasspath' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testRuntimeClasspath`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testRuntimeClasspath", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testRuntimeClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testRuntimeClasspath`(constraintNotation: Any): DependencyConstraint =
        add("testRuntimeClasspath", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testRuntimeClasspath' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testRuntimeClasspath`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testRuntimeClasspath", constraintNotation, block)


    /**
     * Adds an artifact to the 'testRuntimeClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testRuntimeClasspath`(artifactNotation: Any): PublishArtifact =
        add("testRuntimeClasspath", artifactNotation)


    /**
     * Adds an artifact to the 'testRuntimeClasspath' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testRuntimeClasspath`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testRuntimeClasspath", artifactNotation, configureAction)


    /**
     * Adds a dependency to the 'testRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testRuntimeOnly`(dependencyNotation: Any): Dependency? =
        add("testRuntimeOnly", dependencyNotation)


    /**
     * Adds a dependency to the 'testRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testRuntimeOnly`(
        dependencyNotation: String,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): ExternalModuleDependency = addDependencyTo(
        this, "testRuntimeOnly", dependencyNotation, dependencyConfiguration
    ) as ExternalModuleDependency


    /**
     * Adds a dependency to the 'testRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testRuntimeOnly`(
        dependencyNotation: Provider<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testRuntimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testRuntimeOnly' configuration.
     *
     * @param dependencyNotation notation for the dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun DependencyHandler.`testRuntimeOnly`(
        dependencyNotation: ProviderConvertible<*>,
        dependencyConfiguration: Action<ExternalModuleDependency>
    ): Unit = addConfiguredDependencyTo(
        this, "testRuntimeOnly", dependencyNotation, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testRuntimeOnly' configuration.
     *
     * @param group the group of the module to be added as a dependency.
     * @param name the name of the module to be added as a dependency.
     * @param version the optional version of the module to be added as a dependency.
     * @param configuration the optional configuration of the module to be added as a dependency.
     * @param classifier the optional classifier of the module artifact to be added as a dependency.
     * @param ext the optional extension of the module artifact to be added as a dependency.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.create]
     * @see [DependencyHandler.add]
     */
    @Deprecated("Use single-string notation instead")
    fun DependencyHandler.`testRuntimeOnly`(
        group: String,
        name: String,
        version: String? = null,
        configuration: String? = null,
        classifier: String? = null,
        ext: String? = null,
        dependencyConfiguration: Action<ExternalModuleDependency>? = null
    ): ExternalModuleDependency = addExternalModuleDependencyTo(
        this, "testRuntimeOnly", group, name, version, configuration, classifier, ext, dependencyConfiguration
    )


    /**
     * Adds a dependency to the 'testRuntimeOnly' configuration.
     *
     * @param dependency dependency to be added.
     * @param dependencyConfiguration expression to use to configure the dependency.
     * @return The dependency.
     *
     * @see [DependencyHandler.add]
     */
    fun <T : ModuleDependency> DependencyHandler.`testRuntimeOnly`(
        dependency: T,
        dependencyConfiguration: T.() -> Unit
    ): T = add("testRuntimeOnly", dependency, dependencyConfiguration)


    /**
     * Adds a dependency constraint to the 'testRuntimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testRuntimeOnly`(constraintNotation: Any): DependencyConstraint =
        add("testRuntimeOnly", constraintNotation)


    /**
     * Adds a dependency constraint to the 'testRuntimeOnly' configuration.
     *
     * @param constraintNotation the dependency constraint notation
     * @param block the block to use to configure the dependency constraint
     *
     * @return the added dependency constraint
     *
     * @see [DependencyConstraintHandler.add]
     */
    fun DependencyConstraintHandler.`testRuntimeOnly`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
        add("testRuntimeOnly", constraintNotation, block)


    /**
     * Adds an artifact to the 'testRuntimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testRuntimeOnly`(artifactNotation: Any): PublishArtifact =
        add("testRuntimeOnly", artifactNotation)


    /**
     * Adds an artifact to the 'testRuntimeOnly' configuration.
     *
     * @param artifactNotation the group of the module to be added as a dependency.
     * @param configureAction The action to execute to configure the artifact.
     * @return The artifact.
     *
     * @see [ArtifactHandler.add]
     */
    fun ArtifactHandler.`testRuntimeOnly`(
        artifactNotation: Any,
        configureAction:  ConfigurablePublishArtifact.() -> Unit
    ): PublishArtifact =
        add("testRuntimeOnly", artifactNotation, configureAction)



BUILD SUCCESSFUL in 6s
24 actionable tasks: 20 executed, 4 up-to-date
Configuration cache entry stored.

Build Analyzer results available
4:14:57 下午: Execution finished 'kotlinDslAccessorsReport'.
